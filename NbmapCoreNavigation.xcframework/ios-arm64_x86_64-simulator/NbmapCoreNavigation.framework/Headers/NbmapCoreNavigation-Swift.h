#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef NBMAPCORENAVIGATION_SWIFT_H
#define NBMAPCORENAVIGATION_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <NbmapCoreNavigation/NbmapCoreNavigation.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="NbmapCoreNavigation",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)


SWIFT_CLASS("_TtC19NbmapCoreNavigation23AlternativeRouteManager")
@interface AlternativeRouteManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






/// The component representable protocol that comprises what the instruction banner should display.
SWIFT_PROTOCOL_NAMED("ComponentRepresentable")
@protocol NBComponentRepresentable <NSSecureCoding>
@end

@class NSCoder;
@class NSString;

SWIFT_CLASS("_TtC19NbmapCoreNavigation29ConfigurationApiQueryInterval")
@interface ConfigurationApiQueryInterval : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (nonnull instancetype)init;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@property (nonatomic, readonly) NSInteger queryInterval;
@property (nonatomic, readonly, copy) NSString * _Nonnull unit;
@end


SWIFT_CLASS("_TtC19NbmapCoreNavigation21ConfigurationMapStyle")
@interface ConfigurationMapStyle : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (nonnull instancetype)initWithStyleId:(NSInteger)styleId styleBright:(NSString * _Nonnull)styleBright styleDark:(NSString * _Nonnull)styleDark styleSatellite:(NSString * _Nonnull)styleSatellite OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@property (nonatomic, readonly) NSInteger styleId;
@property (nonatomic, readonly, copy) NSString * _Nonnull styleBright;
@property (nonatomic, readonly, copy) NSString * _Nonnull styleDark;
@property (nonatomic, readonly, copy) NSString * _Nonnull styleSatellite;
@end


SWIFT_CLASS("_TtC19NbmapCoreNavigation26ConfigurationRequestParams")
@interface ConfigurationRequestParams : NSObject
- (nonnull instancetype)init;
@property (nonatomic, readonly, copy) NSString * _Nonnull baseUrl;
@end

@class ConfigurationValue;

SWIFT_CLASS("_TtC19NbmapCoreNavigation21ConfigurationResponse")
@interface ConfigurationResponse : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@property (nonatomic, readonly) NSInteger id;
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkVersion;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull platform;
@property (nonatomic, readonly, strong) ConfigurationValue * _Nonnull value;
@property (nonatomic, readonly) NSInteger orgId;
@property (nonatomic, readonly) int64_t createdAt;
@property (nonatomic, readonly) int64_t updatedAt;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19NbmapCoreNavigation18ConfigurationValue")
@interface ConfigurationValue : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (nonnull instancetype)init;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@property (nonatomic, readonly, strong) ConfigurationApiQueryInterval * _Nonnull configurationApiQueryInterval;
@property (nonatomic, readonly, copy) NSArray<ConfigurationMapStyle *> * _Nonnull mapStyles;
@property (nonatomic, readonly) NSInteger defaultStyleId;
@property (nonatomic, readonly, copy) NSString * _Nonnull baseUrl;
@end

/// A <code>CongestionLevel</code> indicates the level of traffic congestion along a road segment relative to the normal flow of traffic along that segment. You can color-code a route line according to the congestion level along each segment of the route.
typedef SWIFT_ENUM_NAMED(NSInteger, NBCongestionLevel, "CongestionLevel", open) {
/// There is not enough data to determine the level of congestion along the road segment.
  NBCongestionLevelUnknown = 0,
/// The road segment has little or no congestion. Traffic is flowing smoothly.
/// Low congestion levels are conventionally highlighted in green or not highlighted at all.
  NBCongestionLevelLow = 1,
/// The road segment has moderate, stop-and-go congestion. Traffic is flowing but speed is impeded.
/// Moderate congestion levels are conventionally highlighted in yellow.
  NBCongestionLevelModerate = 2,
/// The road segment has heavy, bumper-to-bumper congestion. Traffic is barely moving.
/// Heavy congestion levels are conventionally highlighted in orange.
  NBCongestionLevelHeavy = 3,
/// The road segment has severe congestion. Traffic may be completely stopped.
/// Severe congestion levels are conventionally highlighted in red.
  NBCongestionLevelSevere = 4,
};


/// The <code>EventsManager</code> is responsible for being the liaison between the RouteController and the telemetry framework.
/// <code>SessionState</code> is a struct that stores all memoized statistics that we later send to the telemetry engine.
SWIFT_CLASS_NAMED("DataTracking")
@interface NBEventsManager : NSObject
/// When set to <code>false</code>, flushing of telemetry events is not delayed. Is set to <code>true</code> by default.
@property (nonatomic) BOOL delaysEventFlushing;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSUUID;
enum NBFeedbackType : NSInteger;
enum NBFeedbackSource : NSInteger;

@interface NBEventsManager (SWIFT_EXTENSION(NbmapCoreNavigation))
/// Update the feedback event with a specific feedback identifier. If you implement a custom feedback UI that lets a user elaborate on an issue, you can use this to update the metadata.
/// Note that feedback is sent 20 seconds after being recorded, so you should promptly update the feedback metadata after the user discards any feedback UI.
- (void)updateFeedbackWithUuid:(NSUUID * _Nonnull)uuid type:(enum NBFeedbackType)type source:(enum NBFeedbackSource)source description:(NSString * _Nullable)description;
/// Discard a recorded feedback event, for example if you have a custom feedback UI and the user canceled feedback.
- (void)cancelFeedbackWithUuid:(NSUUID * _Nonnull)uuid;
@end


@class NBRouteOptionss;
@class NBNavRoute;
@class NSError;
@class NSURLSessionDataTask;
@class NBDirectionsOptions;
@class NSURL;

/// A <code>Directions</code> object provides you with optimal directions between different locations, or waypoints. The directions object passes your request to the <a href="https://docs.nextbillion.ai/docs/navigation/api/navigation">Nbmap Navigation  API</a> and returns the requested information to a closure (block) that you provide. A directions object can handle multiple simultaneous requests. A <code>RouteOptions</code> object specifies criteria for the results, such as intermediate waypoints, a mode of transportation, or the level of detail to be returned.
/// Each result produced by the directions object is stored in a <code>Route</code> object. Depending on the <code>RouteOptions</code> object you provide, each route may include detailed information suitable for turn-by-turn directions, or it may include only high-level information such as the distance, estimated travel time, and name of each leg of the trip. The waypoints that form the request may be conflated with nearby locations, as appropriate; the resulting waypoints are provided to the closure.
SWIFT_CLASS_NAMED("Directions")
@interface NBDirections : NSObject
/// The shared directions object.
/// To use this object, a Nbmap [access token] should be specified in the <code>NBMapAccessKey</code> key in the main application bundle’s Info.plist.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NBDirections * _Nonnull sharedDirections;)
+ (NBDirections * _Nonnull)sharedDirections SWIFT_WARN_UNUSED_RESULT;
/// Begins asynchronously calculating the route or routes using the given options and delivers the results to a closure.
/// This method retrieves the routes asynchronously over a network connection. If a connection error or server error occurs, details about the error are passed into the given completion handler in lieu of the routes.
/// Routes may be displayed atop a [Nbmap map]. They may be cached but may not be stored permanently.
/// \param options A <code>RouteOptions</code> object specifying the requirements for the resulting routes.
///
/// \param completionHandler The closure (block) to call with the resulting routes. This closure is executed on the application’s main thread.
///
///
/// returns:
/// The data task used to perform the HTTP request. If, while waiting for the completion handler to execute, you no longer want the resulting routes, cancel this task.
- (NSURLSessionDataTask * _Nonnull)calculateNavigationWithOptions:(NBRouteOptionss * _Nonnull)options completionHandler:(void (^ _Nonnull)(NSArray<NBNavRoute *> * _Nullable, NSError * _Nullable))completionHandler;
/// The HTTP URL used to fetch the routes from the API.
/// After requesting the URL returned by this method, you can parse the JSON data in the response and pass it into the <code>Route.init(json:waypoints:profileIdentifier:)</code> initializer.
- (NSURL * _Nonnull)URLForCalculatingDirectionsWithOptions:(NBDirectionsOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NBWaypoint;
@class TravelledRawLocation;
enum NBRouteShapeFormat : NSUInteger;
enum NBRouteShapeResolution : NSUInteger;
@class NSLocale;
enum NBMeasurementSystem : NSUInteger;

/// Options for calculating results from the Nbmap Directions service.
/// You do not create instances of this class directly. Instead, create instances of <code>MatchOptions</code> or <code>RouteOptions</code>.
SWIFT_CLASS_NAMED("DirectionsOptions")
@interface NBDirectionsOptions : NSObject <NSCopying, NSSecureCoding>
/// Initializes an options object for routes between the given waypoints and an optional profile identifier.
/// Do not call <code>DirectionsOptions(waypoints:profileIdentifier:)</code> directly; instead call the corresponding initializer of <code>RouteOptions</code> or <code>MatchOptions</code>.
/// \param waypoints An array of <code>Waypoint</code> objects representing locations that the route should visit in chronological order. The array should contain at least two waypoints (the source and destination) and at most 25 waypoints. (Some profiles, such as <code>NBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <a href="https://www.nbmap.com/api-documentation/#directions">may have lower limits</a>.)
///
/// \param profile A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>NBNavigationModeCar</code>, <code>NBNavigationModeTruck</code>. <code>NBNavigationModeCar</code> is used by default.
///
- (nonnull instancetype)initWithWaypoints:(NSArray<NBWaypoint *> * _Nonnull)waypoints profile:(NBNavigationMode _Nonnull)profile OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualToDirectionsOptions:(NBDirectionsOptions * _Nullable)directionsOptions SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
/// An array of <code>Waypoint</code> objects representing locations that the route should visit in chronological order.
/// A waypoint object indicates a location to visit, as well as an optional heading from which to approach the location.
/// The array should contain at least two waypoints (the source and destination) and at most 25 waypoints.
@property (nonatomic, copy) NSArray<NBWaypoint *> * _Nonnull waypoints;
/// A list of <code>TravelledRawLocation</code> objects representing the raw locations travelled during the navigation process
/// The List should contain at most 100 raw location data
@property (nonatomic, copy) NSArray<TravelledRawLocation *> * _Nonnull travelledRawLocations;
/// A string specifying the primary mode of transportation for the routes.
/// This property should be set to <code>NBNavigationModeCar</code>, <code>NBNavigationModeTruck</code>. The default value of this property is <code>NBNavigationModeCar</code>, which specifies driving directions.
@property (nonatomic) NBNavigationMode _Nonnull profileIdentifier;
/// Format of the data from which the shapes of the returned route and its steps are derived.
/// This property has no effect on the returned shape objects, although the choice of format can significantly affect the size of the underlying HTTP response.
/// The default value of this property is <code>polyline6</code>.
@property (nonatomic) enum NBRouteShapeFormat shapeFormat;
/// An encoded polyline string
/// Accepts polyline and polyline6 encoded geometry as input.
/// If this parameter is provided, the only other parameters which will be considered are originalShapeType, lang and key.
/// The rest of the parameters in the input request will be ignored.
/// Example: geometry=mxtnEpbcqU?_\pBBBca@pk@A@iSjA?BcZnG??{BaBuq@sDAEsZ_S@I{pA_SA@qu@gBuBEwVhcAEZekHgLP
@property (nonatomic, copy) NSString * _Nonnull originalShape;
/// Resolution of the shape of the returned route.
/// This property has no effect on the shape of the returned route’s steps.
/// The default value of this property is <code>full</code>, specifying a low-resolution route shape.
@property (nonatomic) enum NBRouteShapeResolution routeShapeResolution;
/// The locale in which the route’s instructions are written.
/// If you use NbmapDirections.swift with the Nbmap Directions API or Map Matching API, this property affects the sentence contained within the <code>RouteStep.instructions</code> property, but it does not affect any road names contained in that property or other properties such as <code>RouteStep.name</code>.
/// The Navigation API can provide instructions in [a number of languages]. Set this property to <code>Bundle.main.preferredLocalizations.first</code> or <code>Locale.autoupdatingCurrent</code> to match the application’s language or the system language, respectively.
/// By default, this property is set to the current system locale.
@property (nonatomic, copy) NSLocale * _Nonnull locale;
/// The measurement system used in display instructions included in route steps.
/// If this value haven’t seted , the default  value should get by .local.object(forKey: .measurementSystem)
/// You should choose a measurement system appropriate for the current region. You can also allow the user to indicate their preferred measurement system via a setting.
@property (nonatomic) enum NBMeasurementSystem distanceMeasurementSystem;
@property (nonatomic) NSInteger departureTime;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NBNavRouteLeg;
@class NSDate;

/// A <code>DirectionsResult</code> represents a result returned from either the Nbmap Directions service.
/// You do not create instances of this class directly. Instead, you receive <code>Route</code> objects when you request directions using the <code>Directions.calculate(options:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("DirectionsResult")
@interface NBDirectionsResult : NSObject <NSSecureCoding>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// An array of geographic coordinates defining the path of the route from start to finish.
/// This array may be <code>nil</code> or simplified depending on the <code>routeShapeResolution</code> property of the original <code>RouteOptions</code> object.
/// Using the [Nbmap Maps SDK for iOS], you can create an <code>NGLPolyline</code> object using these coordinates to display an overview of the route on an <code>NGLMapView</code>.
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nullable coordinates;
/// The number of coordinates.
/// The value of this property may be zero or reduced depending on the <code>routeShapeResolution</code> property of the original <code>RouteOptions</code> object.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates.count</code> property.
@property (nonatomic, readonly) NSUInteger coordinateCount;
/// Retrieves the coordinates.
/// The array may be empty or simplified depending on the <code>routeShapeResolution</code> property of the original <code>RouteOptions</code> object.
/// Using the [Nbmap Maps SDK for iOS], you can create an <code>NGLPolyline</code> object using these coordinates to display an overview of the route on an <code>NGLMapView</code>.
/// precondition:
/// <code>coordinates</code> must be large enough to hold <code>coordinateCount</code> instances of <code>CLLocationCoordinate2D</code>.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates</code> property.
/// \param coordinates A pointer to a C array of <code>CLLocationCoordinate2D</code> instances. On output, this array contains all the vertices of the overlay.
///
- (void)getCoordinates:(CLLocationCoordinate2D * _Nonnull)coordinates;
/// An array of <code>RouteLeg</code> objects representing the legs of the route.
/// The number of legs in this array depends on the number of waypoints. A route with two waypoints (the source and destination) has one leg, a route with three waypoints (the source, an intermediate waypoint, and the destination) has two legs, and so on.
/// To determine the name of the route, concatenate the names of the route’s legs.
@property (nonatomic, readonly, copy) NSArray<NBNavRouteLeg *> * _Nonnull legs;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The route’s distance, measured in meters.
/// The value of this property accounts for the distance that the user must travel to traverse the path of the route. It is the sum of the <code>distance</code> properties of the route’s legs, not the sum of the direct distances between the route’s waypoints. You should not assume that the user would travel along this distance at a fixed speed.
@property (nonatomic, readonly) CLLocationDistance distance;
/// The route’s expected travel time, measured in seconds.
/// The value of this property reflects the time it takes to traverse the entire route. It is the sum of the <code>expectedTravelTime</code> properties of the route’s legs. If the route was calculated using the <code>NBNavigationMode</code> profile, this property reflects current traffic conditions at the time of the request, not necessarily the traffic conditions at the time the user would begin the route. For other profiles, this property reflects travel time under ideal conditions and does not account for traffic congestion. If the route makes use of a ferry or train, the actual travel time may additionally be subject to the schedules of those services.
/// Do not assume that the user would travel along the route at a fixed speed. For more granular travel times, use the <code>RouteLeg.expectedTravelTime</code> or <code>RouteStep.expectedTravelTime</code>. For even more granularity, specify the <code>AttributeOptions.expectedTravelTime</code> option and use the <code>RouteLeg.expectedSegmentTravelTimes</code> property.
@property (nonatomic, readonly) NSTimeInterval expectedTravelTime;
/// <code>RouteOptions</code> used to create the directions request.
/// The route options object’s profileIdentifier property reflects the primary mode of transportation used for the route. Individual steps along the route might use different modes of transportation as necessary.
@property (nonatomic, readonly, strong) NBDirectionsOptions * _Nonnull directionsOptions;
/// The [access token] used to make the directions request.
/// This property is set automatically if a request is made via <code>Directions.calculate(options:completionHandler:)</code>.
@property (nonatomic, copy) NSString * _Nullable accessToken;
/// The endpoint used to make the directions request.
/// This property is set automatically if a request is made via <code>Directions.calculate(options:completionHandler:)</code>.
@property (nonatomic, copy) NSURL * _Nullable apiEndpoint;
/// A unique identifier for a directions request.
/// Each route produced by a single call to <code>Directions.calculate(options:completionHandler:)</code> has the same route identifier.
@property (nonatomic, copy) NSString * _Nullable routeIdentifier;
/// The locale to use for spoken instructions.
/// This locale is specific to Nbmap Voice API. If <code>nil</code> is returned, the instruction should be spoken with an alternative speech synthesizer.
@property (nonatomic, copy) NSLocale * _Nullable speechLocale;
@property (nonatomic, copy) NSString * _Nullable json;
/// The request of the route start time
@property (nonatomic, copy) NSDate * _Nullable fetchStartDate;
/// The  requestresponse time
@property (nonatomic, copy) NSDate * _Nullable responseEndDate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSUnitLength;
@class NSAttributedString;

/// Provides appropriately formatted, localized descriptions of linear distances.
SWIFT_CLASS_NAMED("DistanceFormatter")
@interface NBDistanceFormatter : NSLengthFormatter
/// Intializes a new <code>DistanceFormatter</code>.
/// \param approximate approximates the distances.
///
- (nonnull instancetype)initWithApproximate:(BOOL)approximate OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// Returns a more human readable <code>String</code> from a given <code>CLLocationDistance</code>.
/// The user’s <code>Locale</code> is used here to set the units.
- (NSString * _Nonnull)stringFrom:(CLLocationDistance)distance SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringFromMeters:(double)numberInMeters SWIFT_WARN_UNUSED_RESULT;
- (NSMeasurement<NSUnitLength *> * _Nonnull)measurementOfDistance:(CLLocationDistance)distance SWIFT_WARN_UNUSED_RESULT;
/// Returns an attributed string containing the formatted, converted distance.
/// <code>NSAttributedStringKey.quantity</code> is applied to the numeric quantity.
- (NSAttributedString * _Nullable)attributedStringForObjectValue:(id _Nonnull)obj withDefaultAttributes:(NSDictionary<NSAttributedStringKey, id> * _Nullable)attrs SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// A <code>DrivingSide</code> indicates which side of the road cars and traffic flow.
typedef SWIFT_ENUM_NAMED(NSInteger, NBDrivingSide, "DrivingSide", open) {
/// Indicates driving occurs on the <code>left</code> side.
  NBDrivingSideLeft = 0,
/// Indicates driving occurs on the <code>right</code> side.
  NBDrivingSideRight = 1,
};

@class NSNumber;

/// Feedback Model Object for End Of Route Experience.
SWIFT_CLASS("_TtC19NbmapCoreNavigation18EndOfRouteFeedback")
@interface EndOfRouteFeedback : NSObject
- (nonnull instancetype)initWithRating:(NSNumber * _Nullable)ratingNumber comment:(NSString * _Nullable)comment;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, NBFeedbackSource, "FeedbackSource", open) {
  NBFeedbackSourceUser = 0,
  NBFeedbackSourceReroute = 1,
  NBFeedbackSourceUnknown = 2,
};

/// Feedback type is used to specify the type of feedback being recorded with <code>RouteController.recordFeedback()</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, NBFeedbackType, "FeedbackType", open) {
/// Indicates general feedback. You should provide a <code>description</code> string to <code>RouteController.recordFeedback()</code> to elaborate on the feedback if possible.
  NBFeedbackTypeGeneral = 0,
/// Identifies the feedback as the location of an accident or crash
  NBFeedbackTypeAccident = 1,
/// Identifies the feedback as the location of a road hazard such as debris, stopped vehicles, etc.
  NBFeedbackTypeHazard = 2,
/// Identifies the feedback as the location of a closed road that should not allow vehicles
  NBFeedbackTypeRoadClosed = 3,
/// Identifies the feedback as a maneuver that isn’t allowed. For example, if a user is instructed to make a left turn, but the turn isn’t allowed.
  NBFeedbackTypeNotAllowed = 4,
/// Identifies the feedback as the location of a road that should exist along the route.
  NBFeedbackTypeMissingRoad = 5,
/// Identifies the feedback as a maneuver with missing exit information such as an exit number or destination sign.
  NBFeedbackTypeMissingExit = 6,
/// Identifies the feedback as the location of a poor instruction or route choice. This could be used to indicate an ambiguous or poorly-timed turn announcement, or a set of confusing turns.
  NBFeedbackTypeRoutingError = 7,
/// Identifies the feedback as the location of a confusing instruction.
  NBFeedbackTypeConfusingInstruction = 8,
/// Identifies the feedback as a place where traffic should have been reported.
  NBFeedbackTypeReportTraffic = 9,
/// Identifies the feedback as a general map issue.
  NBFeedbackTypeMapIssue = 10,
};


/// A <code>RouteShapeFormat</code> indicates the format of a route’s shape in the raw HTTP response.
typedef SWIFT_ENUM_NAMED(NSUInteger, NBInstructionFormat, "InstructionFormat", open) {
/// The route steps’ instructions are delivered in plain text format.
  NBInstructionFormatText = 0,
/// The route steps’ instructions are delivered in HTML format.
/// Key phrases are boldfaced.
  NBInstructionFormatHtml = 1,
};

@class NSIndexSet;
@class NBLane;

/// A single cross street along a step.
SWIFT_CLASS_NAMED("Intersection")
@interface NBIntersection : NSObject <NSSecureCoding>
/// The geographic coordinates at the center of the intersection.
@property (nonatomic, readonly) CLLocationCoordinate2D location;
/// An array of <code>CLLocationDirection</code>s indicating the absolute headings of the roads that meet at the intersection.
/// A road is represented in this array by a heading indicating the direction from which the road meets the intersection. To get the direction of travel when leaving the intersection along the road, rotate the heading 180 degrees.
/// A single road that passes through this intersection is represented by two items in this array: one for the segment that enters the intersection and one for the segment that exits it.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull headings;
/// The indices of the items in the <code>headings</code> array that correspond to the roads that may be used to leave the intersection.
/// This index set effectively excludes any one-way road that leads toward the intersection.
@property (nonatomic, readonly, copy) NSIndexSet * _Nonnull outletIndexes;
/// The index of the item in the <code>headings</code> array that corresponds to the road that the containing route step uses to approach the intersection.
@property (nonatomic, readonly) NSInteger approachIndex;
/// The index of the item in the <code>headings</code> array that corresponds to the road that the containing route step uses to leave the intersection.
@property (nonatomic, readonly) NSInteger outletIndex;
/// An array of <code>Lane</code> objects representing all the lanes of the road that the containing route step uses to approach the intersection.
/// If no lane information is available for an intersection, this property’s value is <code>nil</code>. The first item corresponds to the leftmost lane, the second item corresponds to the second lane from the left, and so on, regardless of whether the surrounding country drives on the left or on the right.
@property (nonatomic, readonly, copy) NSArray<NBLane *> * _Nullable approachLanes;
/// The indices of the items in the <code>approachLanes</code> array that correspond to the roads that may be used to execute the maneuver.
/// If no lane information is available for an intersection, this property’s value is <code>nil</code>.
@property (nonatomic, readonly, copy) NSIndexSet * _Nullable usableApproachLanes;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A lane on the road approaching an intersection.
SWIFT_CLASS_NAMED("Lane")
@interface NBLane : NSObject <NSSecureCoding>
/// The lane indications specifying the maneuvers that may be executed from the lane.
@property (nonatomic, readonly) NBLaneIndication indications;
/// Initializes a new <code>Lane</code> using the given lane indications.
- (nonnull instancetype)initWithIndications:(NBLaneIndication)indications OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A component that represents a lane  representation of an instruction.
SWIFT_CLASS_NAMED("LaneIndicationComponent")
@interface NBLaneIndicationComponent : NSObject <NBComponentRepresentable>
/// An array indicating which directions you can go from a lane (left, right, or straight).
/// If the value is <code>[LaneIndication.left", LaneIndication.straightAhead]</code>, the driver can go left or straight ahead from that lane. This is only set when the <code>component</code> is a <code>lane</code>.
@property (nonatomic) NBLaneIndication indications;
/// The boolean that indicates whether the lane can be used to complete the maneuver.
/// If multiple lanes are active, then they can all be used to complete the upcoming maneuver. This value is set to <code>false</code> by default.
@property (nonatomic) BOOL isUsable;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
/// Initializes a new visual instruction component object that displays the given information.
/// \param indications The directions to go from a lane component.
///
/// \param isLaneActive The flag to indicate that the upcoming maneuver can be completed with a lane component.
///
- (nonnull instancetype)initWithIndications:(NBLaneIndication)indications isUsable:(BOOL)isUsable OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// A <code>ManeuverDirection</code> clarifies a <code>ManeuverType</code> with directional information. The exact meaning of the maneuver direction for a given step depends on the step’s maneuver type; see the <code>ManeuverType</code> documentation for details.
typedef SWIFT_ENUM_NAMED(NSInteger, NBManeuverDirection, "ManeuverDirection", open) {
/// The step does not have a particular maneuver direction associated with it.
/// This maneuver direction is used as a workaround for bridging to Objective-C which does not support nullable enumeration-typed values.
  NBManeuverDirectionNone = 0,
/// The maneuver requires a sharp turn to the right.
  NBManeuverDirectionSharpRight = 1,
/// The maneuver requires a turn to the right, a merge to the right, or an exit on the right, or the destination is on the right.
  NBManeuverDirectionRight = 2,
/// The maneuver requires a slight turn to the right.
  NBManeuverDirectionSlightRight = 3,
/// The maneuver requires no notable change in direction, or the destination is straight ahead.
  NBManeuverDirectionStraightAhead = 4,
/// The maneuver requires a slight turn to the left.
  NBManeuverDirectionSlightLeft = 5,
/// The maneuver requires a turn to the left, a merge to the left, or an exit on the left, or the destination is on the right.
  NBManeuverDirectionLeft = 6,
/// The maneuver requires a sharp turn to the left.
  NBManeuverDirectionSharpLeft = 7,
/// The maneuver requires a U-turn when possible.
/// Use the difference between the step’s initial and final headings to distinguish between a U-turn to the left (typical in countries that drive on the right) and a U-turn on the right (typical in countries that drive on the left). If the difference in headings is greater than 180 degrees, the maneuver requires a U-turn to the left. If the difference in headings is less than 180 degrees, the maneuver requires a U-turn to the right.
  NBManeuverDirectionUTurn = 8,
};

/// A <code>ManeuverType</code> specifies the type of maneuver required to complete the route step. You can pair a maneuver type with a <code>ManeuverDirection</code> to choose an appropriate visual or voice prompt to present the user.
/// In Swift, you can use pattern matching with a single switch statement on a tuple containing the maneuver type and maneuver direction to avoid a complex series of if-else-if statements or switch statements.
typedef SWIFT_ENUM_NAMED(NSInteger, NBManeuverType, "ManeuverType", open) {
/// The step does not have a particular maneuver type associated with it.
/// This maneuver type is used as a workaround for bridging to Objective-C which does not support nullable enumeration-typed values.
  NBManeuverTypeNone = 0,
/// The step requires the user to depart from a waypoint.
/// If the waypoint is some distance away from the nearest road, the maneuver direction indicates the direction the user must turn upon reaching the road.
  NBManeuverTypeDepart = 1,
/// The step requires the user to turn.
/// The maneuver direction indicates the direction in which the user must turn relative to the current direction of travel. The exit index indicates the number of intersections, large or small, from the previous maneuver up to and including the intersection at which the user must turn.
  NBManeuverTypeTurn = 2,
/// The step requires the user to continue after a turn.
  NBManeuverTypeContinue = 3,
/// The step requires the user to continue on the current road as it changes names.
/// The step’s name contains the road’s new name. To get the road’s old name, use the previous step’s name.
  NBManeuverTypePassNameChange = 4,
/// The step requires the user to merge onto another road.
/// The maneuver direction indicates the side from which the other road approaches the intersection relative to the user.
  NBManeuverTypeMerge = 5,
/// The step requires the user to take a entrance ramp (slip road) onto a highway.
  NBManeuverTypeTakeOnRamp = 6,
/// The step requires the user to take an exit ramp (slip road) off a highway.
/// The maneuver direction indicates the side of the highway from which the user must exit. The exit index indicates the number of highway exits from the previous maneuver up to and including the exit that the user must take.
  NBManeuverTypeTakeOffRamp = 7,
/// The step requires the user to choose a fork at a Y-shaped fork in the road.
/// The maneuver direction indicates which fork to take.
  NBManeuverTypeReachFork = 8,
/// The step requires the user to turn at either a T-shaped three-way intersection or a sharp bend in the road where the road also changes names.
/// This maneuver type is called out separately so that the user may be able to proceed more confidently, without fear of having overshot the turn. If this distinction is unimportant to you, you may treat the maneuver as an ordinary <code>turn</code>.
  NBManeuverTypeReachEnd = 9,
/// The step requires the user to get into a specific lane in order to continue along the current road.
/// The maneuver direction is set to <code>straightAhead</code>. Each of the first intersection’s usable approach lanes also has an indication of <code>straightAhead</code>. A maneuver in a different direction would instead have a maneuver type of <code>turn</code>.
/// This maneuver type is called out separately so that the application can present the user with lane guidance based on the first element in the <code>intersections</code> property. If lane guidance is unimportant to you, you may treat the maneuver as an ordinary <code>continue</code> or ignore it.
  NBManeuverTypeUseLane = 10,
/// The step requires the user to enter and traverse a roundabout (traffic circle or rotary).
/// The step has no name, but the exit name is the name of the road to take to exit the roundabout. The exit index indicates the number of roundabout exits up to and including the exit to take.
/// If <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to <code>true</code>, this step is followed by an <code>.exitRoundabout</code> maneuver. Otherwise, this step represents the entire roundabout maneuver, from the entrance to the exit.
  NBManeuverTypeTakeRoundabout = 11,
/// The step requires the user to enter and traverse a large, named roundabout (traffic circle or rotary).
/// The step’s name is the name of the roundabout. The exit name is the name of the road to take to exit the roundabout. The exit index indicates the number of rotary exits up to and including the exit that the user must take.
/// If <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to <code>true</code>, this step is followed by an <code>.exitRotary</code> maneuver. Otherwise, this step represents the entire roundabout maneuver, from the entrance to the exit.
  NBManeuverTypeTakeRotary = 12,
/// The step requires the user to enter and exit a roundabout (traffic circle or rotary) that is compact enough to constitute a single intersection.
/// The step’s name is the name of the road to take after exiting the roundabout. This maneuver type is called out separately because the user may perceive the roundabout as an ordinary intersection with an island in the middle. If this distinction is unimportant to you, you may treat the maneuver as either an ordinary <code>turn</code> or as a <code>takeRoundabout</code>.
  NBManeuverTypeTurnAtRoundabout = 13,
/// The step requires the user to exit a roundabout (traffic circle or rotary).
/// This maneuver type follows a <code>.takeRoundabout</code> maneuver. It is only used when <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to true.
  NBManeuverTypeExitRoundabout = 14,
/// The step requires the user to exit a large, named roundabout (traffic circle or rotary).
/// This maneuver type follows a <code>.takeRotary</code> maneuver. It is only used when <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to true.
  NBManeuverTypeExitRotary = 15,
/// The step requires the user to respond to a change in travel conditions.
/// This maneuver type may occur for example when driving directions require the user to board a ferry, or when cycling directions require the user to dismount. The step’s transport type and instructions contains important contextual details that should be presented to the user at the maneuver location.
/// Similar changes can occur simultaneously with other maneuvers, such as when the road changes its name at the site of a movable bridge. In such cases, <code>heedWarning</code> is suppressed in favor of another maneuver type.
  NBManeuverTypeHeedWarning = 16,
/// The step requires the user to arrive at a waypoint.
/// The distance and expected travel time for this step are set to zero, indicating that the route or route leg is complete. The maneuver direction indicates the side of the road on which the waypoint can be found (or whether it is straight ahead).
  NBManeuverTypeArrive = 17,
/// The step requires the user to arrive at an intermediate waypoint.
/// This maneuver type is only used by version 4 of the Nbmap Directions API.
  NBManeuverTypePassWaypoint = 18,
};

/// A system of units of measuring distances and other quantities.
typedef SWIFT_ENUM_NAMED(NSUInteger, NBMeasurementSystem, "MeasurementSystem", open) {
/// U.S. customary and British imperial units.
/// Distances are measured in miles and feet.
  NBMeasurementSystemImperial = 0,
/// The metric system.
/// Distances are measured in kilometers and meters.
  NBMeasurementSystemMetric = 1,
};


SWIFT_CLASS("_TtC19NbmapCoreNavigation19NBNavigationService")
@interface NBNavigationService : NSObject
/// Stops monitoring the user’s location along the route.
- (void)suspendLocationUpdates;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@class CLLocationManager;
@class CLHeading;
@class CLLocation;

@interface NBNavigationService (SWIFT_EXTENSION(NbmapCoreNavigation)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateHeading:(CLHeading * _Nonnull)newHeading;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationManagerDidChangeAuthorization:(CLLocationManager * _Nonnull)manager;
@end

@class RouteController;

@interface NBNavigationService (SWIFT_EXTENSION(NbmapCoreNavigation))
- (BOOL)routeController:(RouteController * _Nonnull)routeController shouldRerouteFrom:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
- (void)routeController:(RouteController * _Nonnull)routeController willRerouteFrom:(CLLocation * _Nonnull)location;
- (void)routeController:(RouteController * _Nonnull)routeController didRerouteAlong:(NBNavRoute * _Nonnull)route at:(CLLocation * _Nullable)location proactive:(BOOL)proactive;
- (void)routeController:(RouteController * _Nonnull)routeController didFailToRerouteWith:(NSError * _Nonnull)error;
- (BOOL)routeController:(RouteController * _Nonnull)routeController shouldDiscard:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
- (void)routeController:(RouteController * _Nonnull)routeController didArriveAt:(NBWaypoint * _Nonnull)waypoint;
@end


SWIFT_CLASS("_TtC19NbmapCoreNavigation18NBTelemetryManager")
@interface NBTelemetryManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP19NbmapCoreNavigation23NavigationEventTracking_")
@protocol NavigationEventTracking
- (void)trackingRouteDataWithRoute:(NSDictionary<NSString *, id> * _Nonnull)route;
- (void)trackingRawLocationWithRawLocation:(NSDictionary<NSString *, id> * _Nonnull)rawLocation;
- (void)trackingSnapLocationWithSnapLocation:(NSDictionary<NSString *, id> * _Nonnull)snapLocation;
- (void)trackingSpokenWithSponken:(NSDictionary<NSString *, id> * _Nonnull)sponken;
- (void)trackingBannerInfoWithBannerInfo:(NSDictionary<NSString *, id> * _Nonnull)bannerInfo;
- (void)trackingSummaryWithSummary:(NSDictionary<NSString *, id> * _Nonnull)summary;
- (void)trackingStartRerouteWithReroute:(NSDictionary<NSString *, id> * _Nonnull)reroute;
- (void)trackingRerouteErrorWithReRouteError:(NSDictionary<NSString *, id> * _Nonnull)reRouteError;
- (void)trackingRerouteResponseWithRerouteResponse:(NSDictionary<NSString *, id> * _Nonnull)rerouteResponse;
- (void)trackingNavigationFinish;
@end


/// <code>NavigationLocationManager</code> is the base location manager which handles permissions and background modes.
SWIFT_CLASS_NAMED("NavigationLocationManager")
@interface NBNavigationLocationManager : CLLocationManager <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("RouteOptions")
@interface NBRouteOptionss : NBDirectionsOptions
/// Initializes a route options object for routes between the given locations and an optional profile identifier.
/// note:
/// This initializer is intended for <code>CLLocation</code> objects created using the <code>CLLocation.init(latitude:longitude:)</code> initializer. If you intend to use a <code>CLLocation</code> object obtained from a <code>CLLocationManager</code> object, consider increasing the <code>horizontalAccuracy</code> or set it to a negative value to avoid overfitting, since the <code>Waypoint</code> class’s <code>coordinateAccuracy</code> property represents the maximum allowed deviation from the waypoint.
/// \param locations An array of <code>CLLocation</code> objects representing locations that the route should visit in chronological order. The array should contain at least two locations (the source and destination) and at most 25 locations. Each location object is converted into a <code>Waypoint</code> object. This class respects the <code>CLLocation</code> class’s <code>coordinate</code> and <code>horizontalAccuracy</code> properties, converting them into the <code>Waypoint</code> class’s <code>coordinate</code> and <code>coordinateAccuracy</code> properties, respectively.
///
/// \param mode A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>NBNavigationModeCar</code>, <code>NBNavigationModeTruck</code>. <code>NBNavigationModeCar</code> is used by default.
///
- (nonnull instancetype)initWithOrigin:(CLLocation * _Nonnull)origin destination:(CLLocation * _Nonnull)destination with:(NSArray<CLLocation *> * _Nullable)locations mode:(NBNavigationMode _Nullable)mode;
/// Initializes a route options object for routes between the given geographic coordinates and an optional profile identifier.
/// \param coordinates An array of geographic coordinates representing locations that the route should visit in chronological order. The array should contain at least two locations (the source and destination) and at most 25 locations. Each coordinate is converted into a <code>Waypoint</code> object.
///
/// \param mode A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>NBNavigationModeCar</code>, <code>NBNavigationModeTruck</code>. <code>NBNavigationModeCar</code> is used by default.
///
- (nonnull instancetype)initFrom:(CLLocationCoordinate2D)origin to:(CLLocationCoordinate2D)destination with:(NSArray<NSValue *> * _Nullable)coordinates mode:(NBNavigationMode _Nullable)mode;
/// Initializes a route options object for routes between the given waypoints and an optional profile identifier.
/// \param waypoints An array of <code>Waypoint</code> objects representing locations that the route should visit in chronological order.
///
/// \param mode A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>NBNavigationModeCar</code>, <code>NBNavigationModeTruck``. </code>NBNavigationModeCar` is used by default.
///
- (nonnull instancetype)initWithOrigin:(NBWaypoint * _Nonnull)origin destination:(NBWaypoint * _Nonnull)destination waypoints:(NSArray<NBWaypoint *> * _Nullable)waypoints mode:(NBNavigationMode _Nullable)mode;
- (nonnull instancetype)initWithWaypoints:(NSArray<NBWaypoint *> * _Nonnull)waypoints profile:(NBNavigationMode _Nonnull)profile OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// A Boolean value indicating whether alternative routes should be included in the response.
/// If the value of this property is <code>false</code>, the server only calculates a single route that visits each of the waypoints. If the value of this property is <code>true</code>, the server attempts to find additional reasonable routes that visit the waypoints. Regardless, multiple routes are only returned if it is possible to visit the waypoints by a different route without significantly increasing the distance or travel time. The alternative routes may partially overlap with the preferred route, especially if intermediate waypoints are specified.
/// Alternative routes may take longer to calculate and make the response significantly larger, so only request alternative routes if you intend to display them to the user or let the user choose them over the preferred route. For example, do not request alternative routes if you only want to know the distance or estimated travel time to a destination.
/// The default value of this property is <code>false</code>.
@property (nonatomic) BOOL includesAlternativeRoutes;
/// A Int value of the alternative route count
/// The maxnum value is 3 , Minimum value is 1 , By default the value is 3
@property (nonatomic) NSInteger alternativeCount;
/// The route classes that the calculated routes will avoid.
/// We can set an array road class to avoid.
@property (nonatomic) NBRoadClasses roadClassesToAvoid SWIFT_DEPRECATED_MSG("Use `avoid` instead.");
/// The route classes that the calculated routes will avoid.
/// We can set an array road class to avoid.
/// Allowed Values:  <code>toll</code> <code>highway</code> <code>ferry</code> <code>sharp_turn</code> <code>uturn</code> <code>service_road</code> <code>left_turn</code> <code>right_turn</code> <code>bbox</code> <code>geofence_id</code> <code>none</code>
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull avoid;
@property (nonatomic) NBMapOption _Nonnull mapOption;
/// This defines the dimensions of a truck in centimeters (cm). This parameter is effective only when the <code>profileIdentifier</code> is<code>NBNavigationMode6W</code>. Maximum dimensions are as follows:
/// Height = 1000 cm
/// Width = 1000 cm
/// Length = 5000 cm
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull truckSize;
/// This parameter defines the weight of the truck including trailers and shipped goods in kilograms (kg). This parameter is effective only when  <code>profileIdentifier</code> is<code>.truck</code>
/// The minimum value of this propery is 1, and the maximum of this value is 100000
@property (nonatomic) NSInteger truckWeight;
/// Set the route type that needs to be returned.
/// Default: fastest
@property (nonatomic) NBNavigationRouteType _Nullable routeType;
/// Specify if crossing an international border is expected. When set to <code>false</code>, the API will place a penalty for crossing an international border through a checkpoint. Consequently, alternative routes will be preferred if they are feasible for the given set of destination or waypoints . A higher penalty is placed on a route crossing international border without a checkpoint, hence such routes will be preferred the least.
/// When set to <code>true</code>, there will be no penalty for crossing an international border.
/// Please note this parameter is effective only when  <code>mapOption</code> is<code>.valhalla</code>
/// The default value is set to <code>false</code>
@property (nonatomic) BOOL crossBorder;
/// Specify the total load per axle (including the weight of trailers and shipped goods) of the truck, in tonnes. When used, the service will return routes which are legally allowed to carry the load specified per axle.
/// Please note this parameter is effective only when <code>profileIdentifier</code> is <code>.truck</code> and <code>mapOption</code> is<code>.valhalla</code>
@property (nonatomic) double truckAxleLoad;
/// Allowed Values:  <code>taxi</code> <code>hov</code>
@property (nonatomic, copy) NSString * _Nonnull allow;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualToRouteOptions:(NBRouteOptionss * _Nullable)routeOptions SWIFT_WARN_UNUSED_RESULT;
@end


/// A <code>NavigationRouteOptions</code> object specifies turn-by-turn-optimized criteria for results returned by the Nbmap Directions API.
/// <code>NavigationRouteOptions</code> is a subclass of <code>RouteOptions</code> that has been optimized for navigation. Pass an instance of this class into the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("NavigationRouteOptions")
@interface NBNavigationRouteOptions : NBRouteOptionss
/// Initializes a navigation route options object for routes between the given waypoints and an optional profile identifier optimized for navigation.
/// seealso:
///
/// <a href="https://www.nbmap.com/nbmap-navigation-ios/directions/0.10.1/Classes/RouteOptions.html">RouteOptions</a>
- (nonnull instancetype)initWithWaypoints:(NSArray<NBWaypoint *> * _Nonnull)waypoints profile:(NBNavigationMode _Nonnull)profile OBJC_DESIGNATED_INITIALIZER;
/// Initializes a navigation route options object for routes between the given locations and an optional profile identifier optimized for navigation.
/// seealso:
///
/// <a href="https://www.nbmap.com/nbmap-navigation-ios/directions/0.19.0/Classes/RouteOptions.html">RouteOptions</a>
- (nonnull instancetype)initWithLocations:(NSArray<CLLocation *> * _Nonnull)locations profileIdentifier:(NBNavigationMode _Nullable)profileIdentifier;
/// Initializes a route options object for routes between the given geographic coordinates and an optional profile identifier optimized for navigation.
/// seealso:
///
/// <a href="https://www.nbmap.com/nbmap-navigation-ios/directions/0.19.0/Classes/RouteOptions.html">RouteOptions</a>
- (nonnull instancetype)initWithCoordinates:(NSArray<NSValue *> * _Nonnull)coordinates profileIdentifier:(NBNavigationMode _Nullable)profileIdentifier;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>NavigationSettings</code> provides a wrapper for UserDefaults.
/// Properties are prefixed and before they are stored in UserDefaults.standard.
SWIFT_CLASS_NAMED("NavigationSettings")
@interface NBNavigationSettings : NSObject
/// The volume that the voice controller will use.
/// This volume is relative to the system’s volume where 1.0 is same volume as the system.
@property (nonatomic) float voiceVolume;
/// Specifies whether to mute the voice controller or not.
@property (nonatomic) BOOL voiceMuted;
/// Specifies the preferred distance measurement unit.
/// note:
/// Anything but <code>kilometer</code> and <code>mile</code> will fall back to the default measurement for the current locale.
/// Meters and feets will be used when the presented distances are small enough. See <code>DistanceFormatter</code> for more information.
@property (nonatomic) NSLengthFormatterUnit distanceUnit;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end



/// <code>ReplayLocationManager</code> replays an array of locations exactly as they were
/// recorded with the single exception of the location’s timestamp which will be
/// adjusted by interval between locations.
SWIFT_CLASS_NAMED("ReplayLocationManager")
@interface NBReplayLocationManager : NBNavigationLocationManager
/// <code>speedMultiplier</code> adjusts the speed of the replay.
@property (nonatomic) NSTimeInterval speedMultiplier;
/// <code>locations</code> to be replayed.
@property (nonatomic, copy) NSArray<CLLocation *> * _Null_unspecified locations;
@property (nonatomic, readonly, strong) CLLocation * _Nullable location;
- (void)startUpdatingLocation;
- (void)stopUpdatingLocation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19NbmapCoreNavigation17RerouteController")
@interface RerouteController : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>Route</code> object defines a single route that the user can follow to visit a series of waypoints in order. The route object includes information about the route, such as its distance and expected travel time. Depending on the criteria used to calculate the route, the route object may also include detailed turn-by-turn instructions.
/// Typically, you do not create instances of this class directly. Instead, you receive route objects when you request directions using the <code>Directions.calculate(_:completionHandler:)</code> method. However, if you use the <code>Directions.url(forCalculating:)</code> method instead, you can pass the results of the HTTP request into this class’s initializer.
SWIFT_CLASS_NAMED("Route")
@interface NBNavRoute : NBDirectionsResult
/// Initializes a new route object with the given parameters
/// \param json A JSON string representation of the route, It can default to null
///
/// \param legs An array of <code>RouteLeg</code> of the route.
///
/// \param distance The <code>Route</code> distance.
///
/// \param expectedTravelTime The <code>Route</code> expeted travel time.
///
/// \param coordinates The <code>Route</code> coordinates .
///
/// \param speechLocale The <code>Route</code> used to create the request.
///
/// \param options The <code>RouteOptions</code> used to create the request.
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json legs:(NSArray<NBNavRouteLeg *> * _Nonnull)legs distance:(CLLocationDistance)distance expectedTravelTime:(NSTimeInterval)expectedTravelTime coordinates:(NSArray<NSValue *> * _Nullable)coordinates speechLocale:(NSLocale * _Nullable)speechLocale options:(NBDirectionsOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new route object with the given JSON dictionary representation and waypoints.
/// This initializer is intended for use in conjunction with the <code>Directions.url(forCalculating:)</code> method.
/// \param json A JSON dictionary representation of the route as returned by the Nbmap Directions API.
///
/// \param waypoints An array of waypoints that the route visits in chronological order.
///
/// \param routeOptions The <code>RouteOptions</code> used to create the request.
///
- (nonnull instancetype)initWithJSON:(NSDictionary<NSString *, id> * _Nonnull)json waypoints:(NSArray<NBWaypoint *> * _Nonnull)waypoints routeOptions:(NBDirectionsOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end



/// A <code>RouteController</code> tracks the user’s progress along a route, posting notifications as the user reaches significant points along the route. On every location update, the route controller evaluates the user’s location, determining whether the user remains on the route. If not, the route controller calculates a new route.
/// <code>RouteController</code> is responsible for the core navigation logic whereas
/// <code>NavigationViewController</code> is responsible for displaying a default drop-in navigation UI.
SWIFT_CLASS("_TtC19NbmapCoreNavigation15RouteController")
@interface RouteController : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








@interface RouteController (SWIFT_EXTENSION(NbmapCoreNavigation)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateHeading:(CLHeading * _Nonnull)newHeading;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
@end

@class NBRouteStep;

/// A <code>RouteLeg</code> object defines a single leg of a route between two waypoints. If the overall route has only two waypoints, it has a single <code>RouteLeg</code> object that covers the entire route. The route leg object includes information about the leg, such as its name, distance, and expected travel time. Depending on the criteria used to calculate the route, the route leg object may also include detailed turn-by-turn instructions.
/// You do not create instances of this class directly. Instead, you receive route leg objects as part of route objects when you request directions using the <code>Directions.calculate(options:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("RouteLeg")
@interface NBNavRouteLeg : NSObject <NSSecureCoding>
/// Initializes a new route leg object with the given JSON dictionary representation and waypoints.
/// Normally, you do not create instances of this class directly. Instead, you receive route leg objects as part of route objects when you request directions using the <code>Directions.calculateDirections(options:completionHandler:)</code> method.
/// \param json A JSON dictionary representation of a route leg object as returnd by the Nbmap Directions API.
///
/// \param source The waypoint at the beginning of the leg.
///
/// \param destination The waypoint at the end of the leg.
///
/// \param profileIdentifier The profile identifier used to request the routes.
///
- (nonnull instancetype)initWithJSON:(NSDictionary<NSString *, id> * _Nonnull)json source:(NBWaypoint * _Nonnull)source destination:(NBWaypoint * _Nonnull)destination options:(NBDirectionsOptions * _Nonnull)options;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// The starting point of the route leg.
/// Unless this is the first leg of the route, the source of this leg is the same as the destination of the previous leg.
@property (nonatomic, readonly, strong) NBWaypoint * _Nonnull source;
/// The endpoint of the route leg.
/// Unless this is the last leg of the route, the destination of this leg is the same as the source of the next leg.
@property (nonatomic, readonly, strong) NBWaypoint * _Nonnull destination;
/// An array of one or more <code>RouteStep</code> objects representing the steps for traversing this leg of the route.
/// Each route step object corresponds to a distinct maneuver and the approach to the next maneuver.
/// This array is empty if the <code>includesSteps</code> property of the original <code>RouteOptions</code> object is set to <code>false</code>.
@property (nonatomic, readonly, copy) NSArray<NBRouteStep *> * _Nonnull steps;
/// An array containing the distance (measured in meters) between each coordinate in the route leg geometry.
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.distance</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable segmentDistances;
/// An array containing the expected travel time (measured in seconds) between each coordinate in the route leg geometry.
/// These values are dynamic, accounting for any conditions that may change along a segment, such as traffic congestion if the profile identifier is set to <code>.automobileAvoidingTraffic</code>.
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.expectedTravelTime</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable expectedSegmentTravelTimes;
/// An array containing the expected average speed (measured in meters per second) between each coordinate in the route leg geometry.
/// These values are dynamic; rather than speed limits, they account for the road’s classification and/or any traffic congestion (if the profile identifier is set to <code>.automobileAvoidingTraffic</code>).
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.speed</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable segmentSpeeds;
/// A name that describes the route leg.
/// The name describes the leg using the most significant roads or trails along the route leg. You can display this string to the user to help the user can distinguish one route from another based on how the legs of the routes are named.
/// The leg’s name does not identify the start and end points of the leg. To distinguish one leg from another within the same route, concatenate the <code>name</code> properties of the <code>source</code> and <code>destination</code> waypoints.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The route leg’s distance, measured in meters.
/// The value of this property accounts for the distance that the user must travel to arrive at the destination from the source. It is not the direct distance between the source and destination, nor should not assume that the user would travel along this distance at a fixed speed.
@property (nonatomic, readonly) CLLocationDistance distance;
/// The route leg’s expected travel time, measured in seconds.
/// The value of this property reflects the time it takes to traverse the route leg. If the route was calculated using the <code>NBNavigationMode</code> profile, this property reflects current traffic conditions at the time of the request, not necessarily the traffic conditions at the time the user would begin this leg. For other profiles, this property reflects travel time under ideal conditions and does not account for traffic congestion. If the leg makes use of a ferry or train, the actual travel time may additionally be subject to the schedules of those services.
/// Do not assume that the user would travel along the leg at a fixed speed. For the expected travel time on each individual segment along the leg, use the <code>RouteStep.expectedTravelTimes</code> property. For more granularity, specify the <code>AttributeOptions.expectedTravelTime</code> option and use the <code>expectedSegmentTravelTimes</code> property.
@property (nonatomic, readonly) NSTimeInterval expectedTravelTime;
/// A string specifying the primary mode of transportation for the route leg.
/// The value of this property is <code>NBNavigationModeCar</code>, <code>NBNavigationModeTruck</code>, depending on the <code>profileIdentifier</code> property of the original <code>RouteOptions</code> object. This property reflects the primary mode of transportation used for the route leg. Individual steps along the route leg might use different modes of transportation as necessary.
@property (nonatomic, readonly) NBNavigationMode _Nonnull profileIdentifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NBRouteStepProgress;

/// <code>RouteLegProgress</code> stores the user’s progress along a route leg.
SWIFT_CLASS_NAMED("RouteLegProgress")
@interface NBRouteLegProgress : NSObject
/// Returns the current <code>RouteLeg</code>.
@property (nonatomic, readonly, strong) NBNavRouteLeg * _Nonnull leg;
/// Index representing the current step.
@property (nonatomic) NSInteger stepIndex;
@property (nonatomic) BOOL currentLegComplete;
/// The remaining steps for user to complete.
@property (nonatomic, readonly, copy) NSArray<NBRouteStep *> * _Nonnull remainingSteps;
/// Total distance traveled in meters along current leg.
@property (nonatomic, readonly) CLLocationDistance distanceTraveled;
/// Duration remaining in seconds on current leg.
@property (nonatomic, readonly) NSTimeInterval durationRemaining;
/// Distance remaining on the current leg.
@property (nonatomic, readonly) CLLocationDistance distanceRemaining;
/// Number between 0 and 1 representing how far along the current leg the user has traveled.
@property (nonatomic, readonly) double fractionTraveled;
@property (nonatomic) BOOL userHasArrivedAtWaypoint;
/// Returns the <code>RouteStep</code> before a given step. Returns <code>nil</code> if there is no step prior.
- (NBRouteStep * _Nullable)stepBefore:(NBRouteStep * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
/// Returns the <code>RouteStep</code> after a given step. Returns <code>nil</code> if there is not a step after.
- (NBRouteStep * _Nullable)stepAfter:(NBRouteStep * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
/// Returns the <code>RouteStep</code> before the current step.
/// If there is no <code>priorStep</code>, nil is returned.
@property (nonatomic, readonly, strong) NBRouteStep * _Nullable priorStep;
/// Returns the current <code>RouteStep</code> for the leg the user is on.
@property (nonatomic, readonly, strong) NBRouteStep * _Nonnull currentStep;
/// Returns the upcoming <code>RouteStep</code>.
/// If there is no <code>upcomingStep</code>, nil is returned.
@property (nonatomic, readonly, strong) NBRouteStep * _Nullable upComingStep;
/// Returns step 2 steps ahead.
/// If there is no <code>followOnStep</code>, nil is returned.
@property (nonatomic, readonly, strong) NBRouteStep * _Nullable followOnStep;
/// Return bool whether step provided is the current <code>RouteStep</code> the user is on.
- (BOOL)isCurrentStep:(NBRouteStep * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
/// Returns the progress along the current <code>RouteStep</code>.
@property (nonatomic, strong) NBRouteStepProgress * _Nonnull currentStepProgress;
/// Intializes a new <code>RouteLegProgress</code>.
/// \param leg Leg on a <code>Route</code>.
///
/// \param stepIndex Current step the user is on.
///
- (nonnull instancetype)initWithLeg:(NBNavRouteLeg * _Nonnull)leg stepIndex:(NSInteger)stepIndex spokenInstructionIndex:(NSInteger)spokenInstructionIndex OBJC_DESIGNATED_INITIALIZER;
/// Returns an array of <code>CLLocationCoordinate2D</code> of the prior, current and upcoming step geometry.
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nonnull nearbyCoordinates;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// <code>RouteProgress</code> stores the user’s progress along a route.
SWIFT_CLASS_NAMED("RouteProgress")
@interface NBRouteProgress : NSObject
/// Returns the current <code>Route</code>.
@property (nonatomic, readonly, strong) NBNavRoute * _Nonnull route;
/// Index representing current <code>RouteLeg</code>.
@property (nonatomic) NSInteger legIndex;
/// If waypoints are provided in the <code>Route</code>, this will contain which leg the user is on.
@property (nonatomic, readonly, strong) NBNavRouteLeg * _Nonnull currentLeg;
/// Total distance traveled by user along all legs.
@property (nonatomic, readonly) CLLocationDistance distanceTraveled;
/// Total seconds remaining on all legs.
@property (nonatomic, readonly) NSTimeInterval durationRemaining;
/// Number between 0 and 1 representing how far along the <code>Route</code> the user has traveled.
@property (nonatomic, readonly) double fractionTraveled;
/// Total distance remaining in meters along route.
@property (nonatomic, readonly) CLLocationDistance distanceRemaining;
/// Number of waypoints remaining on the current route.
@property (nonatomic, readonly, copy) NSArray<NBWaypoint *> * _Nonnull remainingWaypoints;
/// Number of waypoints remaining on the current route.
- (NSArray<NBWaypoint *> * _Nonnull)remainingWaypointsWithoutLegWithRemoveIndex:(NSInteger)removeIndex SWIFT_WARN_UNUSED_RESULT;
/// Returns the progress along the current <code>RouteLeg</code>.
@property (nonatomic, strong) NBRouteLegProgress * _Nonnull currentLegProgress;
/// Intializes a new <code>RouteProgress</code>.
/// \param route The route to follow.
///
/// \param legIndex Zero-based index indicating the current leg the user is on.
///
- (nonnull instancetype)initWithRoute:(NBNavRoute * _Nonnull)route legIndex:(NSInteger)legIndex stepIndex:(NSInteger)stepIndex spokenInstructionIndex:(NSInteger)spokenInstructionIndex OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// A <code>RouteShapeFormat</code> indicates the format of a route or match shape in the raw HTTP response.
typedef SWIFT_ENUM_NAMED(NSUInteger, NBRouteShapeFormat, "RouteShapeFormat", open) {
/// The route’s shape is delivered in <a href="http://geojson.org/">GeoJSON</a> format.
/// This standard format is human-readable and can be parsed straightforwardly, but it is far more verbose than <code>polyline</code>.
  NBRouteShapeFormatGeoJSON = 0,
/// The route’s shape is delivered in <a href="https://developers.google.com/maps/documentation/utilities/polylinealgorithm">encoded polyline algorithm</a> format with 1×10<sup>−5</sup> precision.
/// This machine-readable format is considerably more compact than <code>geoJSON</code> but less precise than <code>polyline6</code>.
  NBRouteShapeFormatPolyline = 1,
/// The route’s shape is delivered in <a href="https://developers.google.com/maps/documentation/utilities/polylinealgorithm">encoded polyline algorithm</a> format with 1×10<sup>−6</sup> precision.
/// This format is an order of magnitude more precise than <code>polyline</code>.
  NBRouteShapeFormatPolyline6 = 2,
};

/// A <code>RouteShapeResolution</code> indicates the level of detail in a route’s shape, or whether the shape is present at all.
typedef SWIFT_ENUM_NAMED(NSUInteger, NBRouteShapeResolution, "RouteShapeResolution", open) {
/// The route’s shape is omitted.
/// Specify this resolution if you do not intend to show the route line to the user or analyze the route line in any way.
  NBRouteShapeResolutionNone = 0,
/// The route’s shape is simplified.
/// This resolution considerably reduces the size of the response. The resulting shape is suitable for display at a low zoom level, but it lacks the detail necessary for focusing on individual segments of the route.
  NBRouteShapeResolutionLow = 1,
/// The route’s shape is as detailed as possible.
/// The resulting shape is equivalent to concatenating the shapes of all the route’s consitituent steps. You can focus on individual segments of this route while faithfully representing the path of the route. If you only intend to show a route overview and do not need to analyze the route line in any way, consider specifying <code>low</code> instead to considerably reduce the size of the response.
  NBRouteShapeResolutionFull = 2,
};

@class NBSpokenInstruction;
@class NBVisualInstructionBanner;
enum NBTransportType : NSInteger;

/// A <code>RouteStep</code> object represents a single distinct maneuver along a route and the approach to the next maneuver. The route step object corresponds to a single instruction the user must follow to complete a portion of the route. For example, a step might require the user to turn then follow a road.
/// You do not create instances of this class directly. Instead, you receive route step objects as part of route objects when you request directions using the <code>Directions.calculate(_:completionHandler:)</code> method, setting the <code>includesSteps</code> option to <code>true</code> in the <code>RouteOptions</code> object that you pass into that method.
SWIFT_CLASS_NAMED("RouteStep")
@interface NBRouteStep : NSObject <NSSecureCoding>
/// Initializes a new route step object based on the given JSON dictionary representation.
/// Normally, you do not create instances of this class directly. Instead, you receive route step objects as part of route objects when you request directions using the <code>Directions.calculateDirections(options:completionHandler:)</code> method, setting the <code>includesSteps</code> option to <code>true</code> in the <code>RouteOptions</code> object that you pass into that method.
/// \param json A JSON object that conforms to the <a href="https://www.nbmap.com/api-documentation/#routestep-object">route step</a> format described in the Directions API documentation.
///
- (nonnull instancetype)initWithJSON:(NSDictionary<NSString *, id> * _Nonnull)json options:(NBDirectionsOptions * _Nonnull)options;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// An array of geographic coordinates defining the path of the route step from the location of the maneuver to the location of the next step’s maneuver.
/// The value of this property may be <code>nil</code>, for example when the maneuver type is <code>arrive</code>.
/// Using the <a href="https://www.nbmap.com/ios-sdk/">Nbmap Maps SDK for iOS</a> or <a href="https://github.com/nbmap/nbmap-gl-native/tree/master/platform/macos/">Nbmap Maps SDK for macOS</a>, you can create an <code>NGLPolyline</code> object using these coordinates to display a portion of a route on an <code>NGLMapView</code>.
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nullable coordinates;
/// The number of coordinates.
/// The value of this property may be zero, for example when the maneuver type is <code>arrive</code>.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates.count</code> property.
@property (nonatomic, readonly) NSUInteger coordinateCount;
/// Retrieves the coordinates.
/// The array may be empty, for example when the maneuver type is <code>arrive</code>.
/// Using the <a href="https://www.nbmap.com/ios-sdk/">Nbmap Maps SDK for iOS</a> or <a href="https://github.com/nbmap/nbmap-gl-native/tree/master/platform/macos/">Nbmap Maps SDK for macOS</a>, you can create an <code>NGLPolyline</code> object using these coordinates to display a portion of a route on an <code>NGLMapView</code>.
/// precondition:
/// <code>coordinates</code> must be large enough to hold <code>coordinateCount</code> instances of <code>CLLocationCoordinate2D</code>.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates</code> property.
/// \param coordinates A pointer to a C array of <code>CLLocationCoordinate2D</code> instances. On output, this array contains all the vertices of the overlay.
///
///
/// returns:
/// True if the step has coordinates and <code>coordinates</code> has been populated, or false if the step has no coordinates and <code>coordinates</code> has not been modified.
- (BOOL)getCoordinates:(CLLocationCoordinate2D * _Nonnull)coordinates SWIFT_WARN_UNUSED_RESULT;
/// A string with instructions explaining how to perform the step’s maneuver.
/// You can display this string or read it aloud to the user. The string does not include the distance to or from the maneuver. For instructions optimized for real-time delivery during turn-by-turn navigation, set the <code>RouteOptions.includesSpokenInstructions</code> option and use the <code>instructionsSpokenAlongStep</code> property. If you need customized instructions, you can construct them yourself from the step’s other properties or use <a href="https://github.com/Project-OSRM/osrm-text-instructions.swift/">OSRM Text Instructions</a>.
/// note:
/// If you use NbmapDirections.swift with the Nbmap Directions API, this property is formatted and localized for display to the user. If you use OSRM directly, this property contains a basic string that only includes the maneuver type and direction. Use <a href="https://github.com/Project-OSRM/osrm-text-instructions.swift/">OSRM Text Instructions</a> to construct a complete, localized instruction string for display.
@property (nonatomic, readonly, copy) NSString * _Nonnull instructions;
@property (nonatomic, readonly, copy) NSString * _Nullable displayInstruction;
/// Instructions about the next step’s maneuver, optimized for speech synthesis.
/// As the user traverses this step, you can give them advance notice of the upcoming maneuver by reading aloud each item in this array in order as the user reaches the specified distances along this step. The text of the spoken instructions refers to the details in the next step, but the distances are measured from the beginning of this step.
/// This property is non-<code>nil</code> if the <code>RouteOptions.includesSpokenInstructions</code> option is set to <code>true</code>. For instructions designed for display, use the <code>instructions</code> property.
@property (nonatomic, copy) NSArray<NBSpokenInstruction *> * _Nullable instructionsSpokenAlongStep;
/// Instructions about the next step’s maneuver, optimized for display in real time.
/// As the user traverses this step, you can give them advance notice of the upcoming maneuver by displaying each item in this array in order as the user reaches the specified distances along this step. The text and images of the visual instructions refer to the details in the next step, but the distances are measured from the beginning of this step.
/// This property is non-<code>nil</code> if the <code>RouteOptions.includesVisualInstructions</code> option is set to <code>true</code>. For instructions designed for speech synthesis, use the <code>instructionsSpokenAlongStep</code> property. For instructions designed for display in a static list, use the <code>instructions</code> property.
@property (nonatomic, copy) NSArray<NBVisualInstructionBanner *> * _Nullable instructionsDisplayedAlongStep;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The type of maneuver required for beginning this step.
@property (nonatomic, readonly) enum NBManeuverType maneuverType;
/// Additional directional information to clarify the maneuver type.
@property (nonatomic, readonly) enum NBManeuverDirection maneuverDirection;
/// The location of the maneuver at the beginning of this step.
@property (nonatomic, readonly) CLLocationCoordinate2D maneuverLocation;
/// Any <a href="https://en.wikipedia.org/wiki/Exit_number">exit numbers</a> assigned to the highway exit at the maneuver.
/// This property is only set when the <code>maneuverType</code> is <code>ManeuverType.takeOffRamp</code>. For the number of exits from the previous maneuver, regardless of the highway’s exit numbering scheme, use the <code>exitIndex</code> property. For the route reference codes associated with the connecting road, use the <code>destinationCodes</code> property. For the names associated with a roundabout exit, use the <code>exitNames</code> property.
/// An exit number is an alphanumeric identifier posted at or ahead of a highway off-ramp. Exit numbers may increase or decrease sequentially along a road, or they may correspond to distances from either end of the road. An alphabetic suffix may appear when multiple exits are located in the same interchange. If multiple exits are <a href="https://en.wikipedia.org/wiki/Local-express_lanes#Example_of_cloverleaf_interchanges">combined into a single exit</a>, the step may have multiple exit codes.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable exitCodes;
/// The names of the roundabout exit.
/// This property is only set for roundabout (traffic circle or rotary) maneuvers. For the signposted names associated with a highway exit, use the <code>destinations</code> property. For the signposted exit numbers, use the <code>exitCodes</code> property.
/// If you display a name to the user, you may need to abbreviate common words like “East” or “Boulevard” to ensure that it fits in the allotted space.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable exitNames;
/// A phonetic or phonemic transcription indicating how to pronounce the names in the <code>exitNames</code> property.
/// This property is only set for roundabout (traffic circle or rotary) maneuvers.
/// The transcription is written in the <a href="https://en.wikipedia.org/wiki/International_Phonetic_Alphabet">International Phonetic Alphabet</a>.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable phoneticExitNames;
/// The step’s distance, measured in meters.
/// The value of this property accounts for the distance that the user must travel to go from this step’s maneuver location to the next step’s maneuver location. It is not the sum of the direct distances between the route’s waypoints, nor should you assume that the user would travel along this distance at a fixed speed.
@property (nonatomic, readonly) CLLocationDistance distance;
/// The step’s expected travel time, measured in seconds.
/// The value of this property reflects the time it takes to go from this step’s maneuver location to the next step’s maneuver location. If the route was calculated using the <code>NBNavigationMode</code> profile, this property reflects current traffic conditions at the time of the request, not necessarily the traffic conditions at the time the user would begin this step. For other profiles, this property reflects travel time under ideal conditions and does not account for traffic congestion. If the step makes use of a ferry or train, the actual travel time may additionally be subject to the schedules of those services.
/// Do not assume that the user would travel along the step at a fixed speed. For the expected travel time on each individual segment along the leg, specify the <code>AttributeOptions.expectedTravelTime</code> option and use the <code>RouteLeg.expectedSegmentTravelTimes</code> property.
@property (nonatomic, readonly) NSTimeInterval expectedTravelTime;
/// The names of the road or path leading from this step’s maneuver to the next step’s maneuver.
/// If the maneuver is a turning maneuver, the step’s names are the name of the road or path onto which the user turns. If you display a name to the user, you may need to abbreviate common words like “East” or “Boulevard” to ensure that it fits in the allotted space.
/// If the maneuver is a roundabout maneuver, the outlet to take is named in the <code>exitNames</code> property; the <code>names</code> property is only set for large roundabouts that have their own names.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable names;
/// A phonetic or phonemic transcription indicating how to pronounce the names in the <code>names</code> property.
/// The transcription is written in the <a href="https://en.wikipedia.org/wiki/International_Phonetic_Alphabet">International Phonetic Alphabet</a>.
/// If the maneuver traverses a large, named roundabout, the <code>exitPronunciationHints</code> property contains a hint about how to pronounce the names of the outlet to take.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable phoneticNames;
/// Any route reference codes assigned to the road or path leading from this step’s maneuver to the next step’s maneuver.
/// A route reference code commonly consists of an alphabetic network code, a space or hyphen, and a route number. You should not assume that the network code is globally unique: for example, a network code of “NH” may indicate a “National Highway” or “New Hampshire”. Moreover, a route number may not even uniquely identify a route within a given network.
/// If a highway ramp is part of a numbered route, its reference code is contained in this property. On the other hand, guide signage for a highway ramp usually indicates route reference codes of the adjoining road; use the <code>destinationCodes</code> property for those route reference codes.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable codes;
/// The mode of transportation used for the step.
/// This step may use a different mode of transportation than the overall route.
@property (nonatomic, readonly) enum NBTransportType transportType;
/// Any route reference codes that appear on guide signage for the road leading from this step’s maneuver to the next step’s maneuver.
/// This property is typically available in steps leading to or from a freeway or expressway. This property contains route reference codes associated with a road later in the route. If a highway ramp is itself part of a numbered route, its reference code is contained in the <code>codes</code> property. For the signposted exit numbers associated with a highway exit, use the <code>exitCodes</code> property.
/// A route reference code commonly consists of an alphabetic network code, a space or hyphen, and a route number. You should not assume that the network code is globally unique: for example, a network code of “NH” may indicate a “National Highway” or “New Hampshire”. Moreover, a route number may not even uniquely identify a route within a given network. A destination code for a divided road is often suffixed with the cardinal direction of travel, for example “I 80 East”.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable destinationCodes;
/// Destinations, such as <a href="https://en.wikipedia.org/wiki/Control_city">control cities</a>, that appear on guide signage for the road leading from this step’s maneuver to the next step’s maneuver.
/// This property is typically available in steps leading to or from a freeway or expressway.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable destinations;
/// An array of intersections along the step.
/// Each item in the array corresponds to a cross street, starting with the intersection at the maneuver location indicated by the coordinates property and continuing with each cross street along the step.
@property (nonatomic, readonly, copy) NSArray<NBIntersection *> * _Nullable intersections;
@property (nonatomic, readonly, copy) NSURL * _Nullable shiledImageUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable shiledLabel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// <code>RouteStepProgress</code> stores the user’s progress along a route step.
SWIFT_CLASS_NAMED("RouteStepProgress")
@interface NBRouteStepProgress : NSObject
/// Returns the current <code>RouteStep</code>.
@property (nonatomic, readonly, strong) NBRouteStep * _Nonnull step;
/// Returns distance user has traveled along current step.
@property (nonatomic) CLLocationDistance distanceTraveled;
/// Returns distance from user to end of step.
@property (nonatomic) CLLocationDistance userDistanceToManeuverLocation;
/// Total distance in meters remaining on current step.
@property (nonatomic, readonly) CLLocationDistance distanceRemaining;
/// Number between 0 and 1 representing fraction of current step traveled.
@property (nonatomic, readonly) double fractionTraveled;
/// Number of seconds remaining on current step.
@property (nonatomic, readonly) NSTimeInterval durationRemaining;
/// Intializes a new <code>RouteStepProgress</code>.
/// \param step Step on a <code>RouteLeg</code>.
///
- (nonnull instancetype)initWithStep:(NBRouteStep * _Nonnull)step spokenInstructionIndex:(NSInteger)spokenInstructionIndex OBJC_DESIGNATED_INITIALIZER;
/// All intersections on the current <code>RouteStep</code> and also the first intersection on the upcoming <code>RouteStep</code>.
/// The upcoming <code>RouteStep</code> first <code>Intersection</code> is added because it is omitted from the current step.
@property (nonatomic, copy) NSArray<NBIntersection *> * _Nullable intersectionsIncludingUpcomingManeuverIntersection;
/// The next intersection the user will travel through.
/// The step must contain <code>intersectionsIncludingUpcomingManeuverIntersection</code> otherwise this property will be <code>nil</code>.
@property (nonatomic, readonly, strong) NBIntersection * _Nullable upcomingIntersection;
/// Index representing the current intersection.
@property (nonatomic) NSInteger intersectionIndex;
/// The current intersection the user will travel through.
/// The step must contain <code>intersectionsIncludingUpcomingManeuverIntersection</code> otherwise this property will be <code>nil</code>.
@property (nonatomic, readonly, strong) NBIntersection * _Nullable currentIntersection;
/// Returns an array of the calculated distances from the current intersection to the next intersection on the current step.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable intersectionDistances;
/// Index into <code>step.instructionsDisplayedAlongStep</code> representing the current visual instruction for the step.
@property (nonatomic) NSInteger visualInstructionIndex;
/// An <code>Array</code> of remaining <code>VisualInstruction</code> for a step.
@property (nonatomic, readonly, copy) NSArray<NBVisualInstructionBanner *> * _Nullable remainingVisualInstructions;
/// Index into <code>step.instructionsSpokenAlongStep</code> representing the current spoken instruction.
@property (nonatomic) NSInteger spokenInstructionIndex;
/// An <code>Array</code> of remaining <code>SpokenInstruction</code> for a step.
@property (nonatomic, readonly, copy) NSArray<NBSpokenInstruction *> * _Nullable remainingSpokenInstructions;
/// Current spoken instruction for the user’s progress along a step.
@property (nonatomic, readonly, strong) NBSpokenInstruction * _Nullable currentSpokenInstruction;
/// Current visual instruction for the user’s progress along a step.
@property (nonatomic, readonly, strong) NBVisualInstructionBanner * _Nullable currentVisualInstruction;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>SimulatedLocationManager</code> class simulates location updates along a given route.
/// The route will be replaced upon a <code>RouteControllerDidReroute</code> notification.
/// The manager calls delegate methods on a background thread.
SWIFT_CLASS("_TtC19NbmapCoreNavigation24SimulatedLocationManager")
@interface SimulatedLocationManager : NBNavigationLocationManager
@property (nonatomic, strong) CLLocation * _Nullable location;
- (void)startUpdatingLocation;
- (void)stopUpdatingLocation;
- (id _Nonnull)copy SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>SimulatedLocationModelManager</code> class simulates location updates along a given route. only for simulation navigation
/// The route will be replaced upon a <code>RouteControllerDidReroute</code> notification.
/// The manager calls delegate methods on a background thread.
SWIFT_CLASS("_TtC19NbmapCoreNavigation29SimulatedLocationModelManager")
@interface SimulatedLocationModelManager : NBNavigationLocationManager
@property (nonatomic, strong) CLLocation * _Nullable location;
- (void)startUpdatingLocation;
- (void)stopUpdatingLocation;
- (id _Nonnull)copy SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An instruction about an upcoming <code>RouteStep</code>’s maneuver, optimized for speech synthesis.
/// The instruction is provided in two formats: plain text and text marked up according to the <a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language">Speech Synthesis Markup Language</a> (SSML). Use a speech synthesizer such as <code>AVSpeechSynthesizer</code> or Amazon Polly to read aloud the instruction.
/// The <code>distanceAlongStep</code> property is measured from the beginning of the step associated with this object. By contrast, the <code>text</code> and <code>ssmlText</code> properties refer to the details in the following step. It is also possible for the instruction to refer to two following steps simultaneously when needed for safe navigation.
SWIFT_CLASS_NAMED("SpokenInstruction")
@interface NBSpokenInstruction : NSObject <NSSecureCoding>
/// A distance along the associated <code>RouteStep</code> at which to read the instruction aloud.
/// The distance is measured in meters from the beginning of the associated step.
@property (nonatomic, readonly) CLLocationDistance distanceAlongStep;
/// A plain-text representation of the speech-optimized instruction.
/// This representation is appropriate for speech synthesizers that lack support for the <a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language">Speech Synthesis Markup Language</a> (SSML), such as <code>AVSpeechSynthesizer</code>. For speech synthesizers that support SSML, use the <code>ssmlText</code> property instead.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// A formatted representation of the speech-optimized instruction.
/// This representation is appropriate for speech synthesizers that support the <a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language">Speech Synthesis Markup Language</a> (SSML), such as <a href="https://aws.amazon.com/polly/">Amazon Polly</a>. Numbers and names are marked up to ensure correct pronunciation. For speech synthesizers that lack SSML support, use the <code>text</code> property instead.
@property (nonatomic, readonly, copy) NSString * _Nullable ssmlText;
/// A distance along the associated <code>RouteStep</code> at which to read the instruction aloud.
/// The distance is measured in meters from the beginning of the associated step.
@property (nonatomic, readonly, strong) NSUnitLength * _Nullable unit;
/// Initializes a new spoken instruction object based on the given JSON dictionary representation.
/// \param json A JSON object that conforms to the [voice instruction] format described in the Navigation API documentation.
///
- (nonnull instancetype)initWithJSON:(NSDictionary<NSString *, id> * _Nonnull)json;
/// Initialize a <code>SpokenInstruction</code>.
/// \param distanceAlongStep A distance along the associated <code>RouteStep</code> at which to read the instruction aloud.
///
/// \param text A plain-text representation of the speech-optimized instruction.
///
/// \param ssmlText A formatted representation of the speech-optimized instruction.
///
- (nonnull instancetype)initWithDistanceAlongStep:(CLLocationDistance)distanceAlongStep text:(NSString * _Nonnull)text ssmlText:(NSString * _Nullable)ssmlText unit:(NSUnitLength * _Nullable)unit OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>Waypoint</code> object indicates a location along a route. It may be the route’s origin or destination, or it may be another location that the route visits. A waypoint object indicates the location’s geographic location along with other optional information, such as a name or the user’s direction approaching the waypoint. You create a <code>RouteOptions</code> object using waypoint objects and also receive waypoint objects in the completion handler of the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("Waypoint")
@interface NBWaypoint : NSObject <NSCopying, NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// Initializes a new waypoint object with the given geographic coordinate and an optional accuracy and name.
/// \param coordinate The geographic coordinate of the waypoint.
///
/// \param coordinateAccuracy The maximum distance away from the waypoint that the route may come and still be considered viable. This parameter is measured in meters. A negative value means the route may be an indefinite number of meters away from the route and still be considered viable.
/// It is recommended that the value of this parameter be greater than the <code>horizontalAccuracy</code> property of a <code>CLLocation</code> object obtained from a <code>CLLocationManager</code> object. There is a high likelihood that the user may be located some distance away from a navigable road, for instance if the user is currently on a driveway or inside a building.
///
/// \param name The name of the waypoint. This parameter does not affect the route but may help you to distinguish one waypoint from another.
///
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate coordinateAccuracy:(CLLocationAccuracy)coordinateAccuracy name:(NSString * _Nullable)name OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new waypoint object with the given <code>CLLocation</code> object and an optional <code>CLHeading</code> object and name.
/// note:
/// This initializer is intended for <code>CLLocation</code> objects created using the <code>CLLocation.init(latitude:longitude:)</code> initializer. If you intend to use a <code>CLLocation</code> object obtained from a <code>CLLocationManager</code> object, consider increasing the <code>horizontalAccuracy</code> or set it to a negative value to avoid overfitting, since the <code>Waypoint</code> class’s <code>coordinateAccuracy</code> property represents the maximum allowed deviation from the waypoint. There is a high likelihood that the user may be located some distance away from a navigable road, for instance if the user is currently on a driveway of inside a building.
/// \param location A <code>CLLocation</code> object representing the waypoint’s location. This initializer respects the <code>CLLocation</code> class’s <code>coordinate</code> and <code>horizontalAccuracy</code> properties, converting them into the <code>coordinate</code> and <code>coordinateAccuracy</code> properties, respectively.
///
/// \param heading A <code>CLHeading</code> object representing the direction from which the route must approach the waypoint in order to be considered viable. This initializer respects the <code>CLHeading</code> class’s <code>trueHeading</code> property or <code>magneticHeading</code> property, converting it into the <code>headingAccuracy</code> property.
///
/// \param name The name of the waypoint. This parameter does not affect the route but may help you to distinguish one waypoint from another.
///
- (nonnull instancetype)initWithLocation:(CLLocation * _Nonnull)location heading:(CLHeading * _Nullable)heading name:(NSString * _Nullable)name OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// The geographic coordinate of the waypoint.
@property (nonatomic, readonly) CLLocationCoordinate2D coordinate;
/// The radius of uncertainty for the waypoint, measured in meters.
/// For a route to be considered viable, it must enter this waypoint’s circle of uncertainty. The <code>coordinate</code> property identifies the center of the circle, while this property indicates the circle’s radius. If the value of this property is negative, a route is considered viable regardless of whether it enters this waypoint’s circle of uncertainty, subject to an undefined maximum distance.
/// By default, the value of this property is a negative number.
@property (nonatomic) CLLocationAccuracy coordinateAccuracy;
/// The direction from which a route must approach this waypoint in order to be considered viable.
/// This property is measured in degrees clockwise from true north. A value of 0 degrees means due north, 90 degrees means due east, 180 degrees means due south, and so on. If the value of this property is negative, a route is considered viable regardless of the direction from which it approaches this waypoint.
/// If this waypoint is the first waypoint (the source waypoint), the route must start out by heading in the direction specified by this property. You should always set the <code>headingAccuracy</code> property in conjunction with this property. If the <code>headingAccuracy</code> property is set to a negative value, this property is ignored.
/// For driving directions, this property can be useful for avoiding a route that begins by going in the direction opposite the current direction of travel. For example, if you know the user is moving eastwardly and the first waypoint is the user’s current location, specifying a heading of 90 degrees and a heading accuracy of 90 degrees for the first waypoint avoids a route that begins with a “head west” instruction.
/// You should be certain that the user is in motion before specifying a heading and heading accuracy; otherwise, you may be unnecessarily filtering out the best route. For example, suppose the user is sitting in a car parked in a driveway, facing due north, with the garage in front and the street to the rear. In that case, specifying a heading of 0 degrees and a heading accuracy of 90 degrees may result in a route that begins on the back alley or, worse, no route at all. For this reason, it is recommended that you only specify a heading and heading accuracy when automatically recalculating directions due to the user deviating from the route.
/// By default, the value of this property is a negative number, meaning that a route is considered viable regardless of the direction of approach.
@property (nonatomic) CLLocationDirection heading;
/// The maximum amount, in degrees, by which a route’s approach to a waypoint may differ from <code>heading</code> in either direction in order to be considered viable.
/// A value of 0 degrees means that the approach must match the specified <code>heading</code> exactly – an unlikely scenario. A value of 180 degrees or more means that the approach may be as much as 180 degrees in either direction from the specified <code>heading</code>, effectively allowing a candidate route to approach the waypoint from any direction.
/// If you set the <code>heading</code> property, you should set this property to a value such as 90 degrees, to avoid filtering out routes whose approaches differ only slightly from the specified <code>heading</code>. Otherwise, if the <code>heading</code> property is set to a negative value, this property is ignored.
/// By default, the value of this property is a negative number, meaning that a route is considered viable regardless of the direction of approach.
@property (nonatomic) CLLocationDirection headingAccuracy;
/// The name of the waypoint.
/// This parameter does not affect the route, but you can set the name of a waypoint you pass into a <code>RouteOptions</code> object to help you distinguish one waypoint from another in the array of waypoints passed into the completion handler of the <code>Directions.calculate(_:completionHandler:)</code> method.
@property (nonatomic, copy) NSString * _Nullable name;
/// A boolean value indicating whether arriving on opposite side is allowed.
/// This property has no effect if <code>RouteOptions.includesSteps</code> is set to <code>false</code>.
@property (nonatomic) BOOL allowsArrivingOnOppositeSide;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull latLngString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>Tracepoint</code> represents a location matched to the road network.
SWIFT_CLASS_NAMED("Tracepoint")
@interface NBTracepoint : NBWaypoint
/// Number of probable alternative matchings for this tracepoint. A value of zero indicates that this point was matched unambiguously.
@property (nonatomic) NSInteger alternateCount;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate coordinateAccuracy:(CLLocationAccuracy)coordinateAccuracy name:(NSString * _Nullable)name SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithLocation:(CLLocation * _Nonnull)location heading:(CLHeading * _Nullable)heading name:(NSString * _Nullable)name SWIFT_UNAVAILABLE;
@end

/// A <code>TransportType</code> specifies the mode of transportation used for part of a route.
typedef SWIFT_ENUM_NAMED(NSInteger, NBTransportType, "TransportType", open) {
/// The step does not have a particular transport type associated with it.
/// This transport type is used as a workaround for bridging to Objective-C which does not support nullable enumeration-typed values.
  NBTransportTypeNone = 0,
/// The route requires the user to drive or ride a car, truck, or motorcycle.
/// This is the usual transport type when the <code>profileIdentifier</code> is <code>NBDirectionsProfileIdentifierAutomobile</code> or <code>NBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>.
  NBTransportTypeAutomobile = 1,
/// The route requires the user to board a ferry.
/// The user should verify that the ferry is in operation. For driving and cycling directions, the user should also verify that his or her vehicle is permitted onboard the ferry.
  NBTransportTypeFerry = 2,
/// The route requires the user to cross a movable bridge.
/// The user may need to wait for the movable bridge to become passable before continuing.
  NBTransportTypeMovableBridge = 3,
/// The route becomes impassable at this point.
/// You should not encounter this transport type under normal circumstances.
  NBTransportTypeInaccessible = 4,
/// The route requires the user to walk.
/// This is the usual transport type when the <code>profileIdentifier</code> is <code>NBDirectionsProfileIdentifierWalking</code>. For cycling directions, this value indicates that the user is expected to dismount.
  NBTransportTypeWalking = 5,
/// The route requires the user to ride a bicycle.
/// This is the usual transport type when the <code>profileIdentifier</code> is <code>NBDirectionsProfileIdentifierCycling</code>.
  NBTransportTypeCycling = 6,
/// The route requires the user to board a train.
/// The user should consult the train’s timetable. For cycling directions, the user should also verify that bicycles are permitted onboard the train.
  NBTransportTypeTrain = 7,
};


SWIFT_CLASS("_TtC19NbmapCoreNavigation20TravelledRawLocation")
@interface TravelledRawLocation : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol NBTunnelIntersectionManagerDelegate;

SWIFT_CLASS_NAMED("TunnelIntersectionManager")
@interface NBTunnelIntersectionManager : NSObject
/// The associated delegate for tunnel intersection manager.
@property (nonatomic, weak) id <NBTunnelIntersectionManagerDelegate> _Nullable delegate;
/// The simulated location manager dedicated to tunnel simulated navigation.
@property (nonatomic, strong) SimulatedLocationManager * _Nullable animatedLocationManager;
/// An array of bad location updates recorded upon exit of a tunnel.
@property (nonatomic, copy) NSArray<CLLocation *> * _Nonnull tunnelExitLocations;
/// Flag indicating whether the user is animated through tunnels.
@property (nonatomic) BOOL tunnelSimulationEnabled;
/// Given a user’s current location and the route progress,
/// detects whether the upcoming intersection contains a tunnel road class, and
/// returns a Boolean whether they are within the minimum radius of a tunnel entrance.
- (BOOL)userWithinTunnelEntranceRadiusAt:(CLLocation * _Nonnull)location routeProgress:(NBRouteProgress * _Nonnull)routeProgress SWIFT_WARN_UNUSED_RESULT;
- (void)enableTunnelAnimationWithRouteController:(RouteController * _Nonnull)routeController routeProgress:(NBRouteProgress * _Nonnull)routeProgress;
- (void)suspendTunnelAnimationAt:(CLLocation * _Nonnull)location routeController:(RouteController * _Nonnull)routeController;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>TunnelIntersectionManagerDelegate</code> protocol provides methods for responding to events where a user enters or exits a tunnel.
SWIFT_PROTOCOL_NAMED("TunnelIntersectionManagerDelegate")
@protocol NBTunnelIntersectionManagerDelegate
@optional
/// Called immediately when the location manager detects a user will enter a tunnel.
/// \param manager The <code>TunnelIntersectionManager</code> that currently sends the location updates.
///
/// \param location The user’s current location where the tunnel was detected.
///
- (void)tunnelIntersectionManager:(NBTunnelIntersectionManager * _Nonnull)manager willEnableAnimationAtLocation:(CLLocation * _Nonnull)location;
/// Called immediately when the location manager detects the user will exit a tunnel.
/// \param manager The <code>TunnelIntersectionManager</code> that currently sends the location updates.
///
/// \param location The user’s current location where the tunnel was detected.
///
- (void)tunnelIntersectionManager:(NBTunnelIntersectionManager * _Nonnull)manager willDisableAnimationAtLocation:(CLLocation * _Nonnull)location;
@end


@interface UIDevice (SWIFT_EXTENSION(NbmapCoreNavigation))
/// Returns a <code>Bool</code> whether the device is plugged in. Returns false if not an iOS device.
@property (nonatomic, readonly) BOOL isPluggedIn;
@end





/// The contents of a banner that should be displayed as added visual guidance for a route. The banner instructions are children of the steps during which they should be displayed, but they refer to the maneuver in the following step.
SWIFT_CLASS_NAMED("VisualInstruction")
@interface NBVisualInstruction : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
/// A plain text representation of the instruction.
@property (nonatomic, readonly, copy) NSString * _Nullable text;
/// A plain text representation of the instruction.
@property (nonatomic, readonly, copy) NSString * _Nullable instruction;
/// The type of maneuver required for beginning the step described by the visual instruction.
@property (nonatomic) enum NBManeuverType maneuverType;
/// Additional directional information to clarify the maneuver type.
@property (nonatomic) enum NBManeuverDirection maneuverDirection;
/// A structured representation of the instruction.
@property (nonatomic, readonly, copy) NSArray<id <NBComponentRepresentable>> * _Nonnull components;
/// The heading at which the user exits a roundabout (traffic circle or rotary).
/// This property is measured in degrees clockwise relative to the user’s initial heading. A value of 180° means continuing through the roundabout without changing course, whereas a value of 0° means traversing the entire roundabout back to the entry point.
/// This property is only relevant if the <code>maneuverType</code> is any of the following values: <code>ManeuverType.takeRoundabout</code>, <code>ManeuverType.takeRotary</code>, <code>ManeuverType.turnAtRoundabout</code>, <code>ManeuverType.exitRoundabout</code>, or <code>ManeuverType.exitRotary</code>.
@property (nonatomic) CLLocationDegrees finalHeading;
/// Initializes a new visual instruction banner object that displays the given information.
- (nonnull instancetype)initWithText:(NSString * _Nullable)text instruction:(NSString * _Nullable)instruction maneuverType:(enum NBManeuverType)maneuverType maneuverDirection:(enum NBManeuverDirection)maneuverDirection components:(NSArray<id <NBComponentRepresentable>> * _Nonnull)components degrees:(CLLocationDegrees)degrees OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new visual instruction object based on the given JSON dictionary representation.
/// \param json A JSON object that conforms to the [banner instruction] format described in the Directions API documentation.
///
- (nonnull instancetype)initWithJSON:(NSDictionary<NSString *, id> * _Nonnull)json;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A visual instruction banner contains all the information necessary for creating a visual cue about a given <code>RouteStep</code>.
SWIFT_CLASS_NAMED("VisualInstructionBanner")
@interface NBVisualInstructionBanner : NSObject <NSSecureCoding>
/// The distance at which the visual instruction should be shown, measured in meters from the beginning of the step.
@property (nonatomic, readonly) CLLocationDistance distanceAlongStep;
/// The most important information to convey to the user about the <code>RouteStep</code>.
@property (nonatomic, readonly, strong) NBVisualInstruction * _Nonnull primaryInstruction;
/// Less important details about the <code>RouteStep</code>.
@property (nonatomic, readonly, strong) NBVisualInstruction * _Nullable secondaryInstruction;
/// A visual instruction that is presented simultaneously to provide information about an additional maneuver that occurs in rapid succession.
/// This instruction could either contain the visual layout information or the lane information about the upcoming maneuver.
@property (nonatomic, readonly, strong) NBVisualInstruction * _Nullable tertiaryInstruction;
/// Which side of a bidirectional road the driver should drive on, also known as the rule of the road. By default it will set as <code>DrivingSide.right'</code>  if in the <code>RouteStep</code> not parse the driving side successfully
@property (nonatomic) enum NBDrivingSide drivingSide;
/// Initializes a new visual instruction banner object based on the given JSON dictionary representation and a driving side.
/// \param json A JSON object that conforms to the [primary or secondary banner] format described in the Directions API documentation.
///
/// \param drivingSide The side of the road the user should drive on. This value should be consistent with the containing route step.
///
- (nonnull instancetype)initWithJSON:(NSDictionary<NSString *, id> * _Nonnull)json drivingSide:(enum NBDrivingSide)drivingSide;
/// Initializes a new visual instruction banner object that displays the given information.
/// \param distanceAlongStep The distance at which the visual instruction should be shown, measured in meters from the beginning of the step.
///
/// \param primaryInstruction The most important information to convey to the user about the <code>RouteStep</code>.
///
/// \param secondaryInstruction Less important details about the <code>RouteStep</code>.
///
/// \param drivingSide Which side of a bidirectional road the driver should drive on.
///
- (nonnull instancetype)initWithDistanceAlongStep:(CLLocationDistance)distanceAlongStep primaryInstruction:(NBVisualInstruction * _Nonnull)primaryInstruction secondaryInstruction:(NBVisualInstruction * _Nullable)secondaryInstruction tertiaryInstruction:(NBVisualInstruction * _Nullable)tertiaryInstruction drivingSide:(enum NBDrivingSide)drivingSide OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum NBVisualInstructionComponentType : NSInteger;

/// A component of a <code>VisualInstruction</code> that represents a single run of similarly formatted text or an image with a textual fallback representation.
SWIFT_CLASS_NAMED("VisualInstructionComponent")
@interface NBVisualInstructionComponent : NSObject <NBComponentRepresentable>
/// The URL to an image representation of this component.
/// The URL refers to an image that uses the device’s native screen scale.
@property (nonatomic, copy) NSURL * _Nullable imageURL;
/// The lable to an image representation of this component.
/// The  string refers to an image that uses the device’s native screen scale.
@property (nonatomic, copy) NSString * _Nullable label;
/// An abbreviated representation of the <code>text</code> property.
@property (nonatomic, copy) NSString * _Nullable abbreviation;
/// The priority for which the component should be abbreviated.
/// A component with a lower abbreviation priority value should be abbreviated before a component with a higher abbreviation priority value.
@property (nonatomic) NSInteger abbreviationPriority;
/// The plain text representation of this component.
/// Use this property if <code>imageURL</code> is <code>nil</code> or if the URL contained in that property is not yet available.
@property (nonatomic, copy) NSString * _Nullable text;
/// The type of visual instruction component. You can display the component differently depending on its type.
@property (nonatomic) enum NBVisualInstructionComponentType type;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
/// Initializes a new visual instruction component object based on the given JSON dictionary representation.
/// \param json A JSON object that conforms to the [banner component] format described in the Directions API documentation.
///
- (nonnull instancetype)initWithJSON:(NSDictionary<NSString *, id> * _Nonnull)json;
/// Initializes a new visual instruction component object that displays the given information.
/// \param type The type of visual instruction component.
///
/// \param text The plain text representation of this component.
///
/// \param imageURL The URL to an image representation of this component.
///
/// \param label The label to an image representation of this component.
///
/// \param abbreviation An abbreviated representation of <code>text</code>.
///
/// \param abbreviationPriority The priority for which the component should be abbreviated.
///
- (nonnull instancetype)initWithType:(enum NBVisualInstructionComponentType)type text:(NSString * _Nullable)text imageURL:(NSURL * _Nullable)imageURL label:(NSString * _Nullable)label abbreviation:(NSString * _Nullable)abbreviation abbreviationPriority:(NSInteger)abbreviationPriority OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>VisualInstructionComponentType</code> describes the type of <code>VisualInstructionComponent</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, NBVisualInstructionComponentType, "VisualInstructionComponentType", open) {
/// The component separates two other destination components.
/// If the two adjacent components are both displayed as images, you can hide this delimiter component.
  NBVisualInstructionComponentTypeDelimiter = 0,
/// The component bears the name of a place or street.
  NBVisualInstructionComponentTypeText = 1,
/// Component contains an image that should be rendered.
  NBVisualInstructionComponentTypeImage = 2,
/// The compoment contains the localized word for “exit”.
/// This component may appear before or after an <code>.exitNumber</code> component, depending on the language.
  NBVisualInstructionComponentTypeExit = 3,
/// A component contains an exit number.
  NBVisualInstructionComponentTypeExitCode = 4,
};



#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef NBMAPCORENAVIGATION_SWIFT_H
#define NBMAPCORENAVIGATION_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <NbmapCoreNavigation/NbmapCoreNavigation.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="NbmapCoreNavigation",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)


SWIFT_CLASS("_TtC19NbmapCoreNavigation23AlternativeRouteManager")
@interface AlternativeRouteManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






/// The component representable protocol that comprises what the instruction banner should display.
SWIFT_PROTOCOL_NAMED("ComponentRepresentable")
@protocol NBComponentRepresentable <NSSecureCoding>
@end

@class NSCoder;
@class NSString;

SWIFT_CLASS("_TtC19NbmapCoreNavigation29ConfigurationApiQueryInterval")
@interface ConfigurationApiQueryInterval : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (nonnull instancetype)init;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@property (nonatomic, readonly) NSInteger queryInterval;
@property (nonatomic, readonly, copy) NSString * _Nonnull unit;
@end


SWIFT_CLASS("_TtC19NbmapCoreNavigation21ConfigurationMapStyle")
@interface ConfigurationMapStyle : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (nonnull instancetype)initWithStyleId:(NSInteger)styleId styleBright:(NSString * _Nonnull)styleBright styleDark:(NSString * _Nonnull)styleDark styleSatellite:(NSString * _Nonnull)styleSatellite OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@property (nonatomic, readonly) NSInteger styleId;
@property (nonatomic, readonly, copy) NSString * _Nonnull styleBright;
@property (nonatomic, readonly, copy) NSString * _Nonnull styleDark;
@property (nonatomic, readonly, copy) NSString * _Nonnull styleSatellite;
@end


SWIFT_CLASS("_TtC19NbmapCoreNavigation26ConfigurationRequestParams")
@interface ConfigurationRequestParams : NSObject
- (nonnull instancetype)init;
@property (nonatomic, readonly, copy) NSString * _Nonnull baseUrl;
@end

@class ConfigurationValue;

SWIFT_CLASS("_TtC19NbmapCoreNavigation21ConfigurationResponse")
@interface ConfigurationResponse : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@property (nonatomic, readonly) NSInteger id;
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkVersion;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull platform;
@property (nonatomic, readonly, strong) ConfigurationValue * _Nonnull value;
@property (nonatomic, readonly) NSInteger orgId;
@property (nonatomic, readonly) int64_t createdAt;
@property (nonatomic, readonly) int64_t updatedAt;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19NbmapCoreNavigation18ConfigurationValue")
@interface ConfigurationValue : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (nonnull instancetype)init;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@property (nonatomic, readonly, strong) ConfigurationApiQueryInterval * _Nonnull configurationApiQueryInterval;
@property (nonatomic, readonly, copy) NSArray<ConfigurationMapStyle *> * _Nonnull mapStyles;
@property (nonatomic, readonly) NSInteger defaultStyleId;
@property (nonatomic, readonly, copy) NSString * _Nonnull baseUrl;
@end

/// A <code>CongestionLevel</code> indicates the level of traffic congestion along a road segment relative to the normal flow of traffic along that segment. You can color-code a route line according to the congestion level along each segment of the route.
typedef SWIFT_ENUM_NAMED(NSInteger, NBCongestionLevel, "CongestionLevel", open) {
/// There is not enough data to determine the level of congestion along the road segment.
  NBCongestionLevelUnknown = 0,
/// The road segment has little or no congestion. Traffic is flowing smoothly.
/// Low congestion levels are conventionally highlighted in green or not highlighted at all.
  NBCongestionLevelLow = 1,
/// The road segment has moderate, stop-and-go congestion. Traffic is flowing but speed is impeded.
/// Moderate congestion levels are conventionally highlighted in yellow.
  NBCongestionLevelModerate = 2,
/// The road segment has heavy, bumper-to-bumper congestion. Traffic is barely moving.
/// Heavy congestion levels are conventionally highlighted in orange.
  NBCongestionLevelHeavy = 3,
/// The road segment has severe congestion. Traffic may be completely stopped.
/// Severe congestion levels are conventionally highlighted in red.
  NBCongestionLevelSevere = 4,
};


/// The <code>EventsManager</code> is responsible for being the liaison between the RouteController and the telemetry framework.
/// <code>SessionState</code> is a struct that stores all memoized statistics that we later send to the telemetry engine.
SWIFT_CLASS_NAMED("DataTracking")
@interface NBEventsManager : NSObject
/// When set to <code>false</code>, flushing of telemetry events is not delayed. Is set to <code>true</code> by default.
@property (nonatomic) BOOL delaysEventFlushing;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSUUID;
enum NBFeedbackType : NSInteger;
enum NBFeedbackSource : NSInteger;

@interface NBEventsManager (SWIFT_EXTENSION(NbmapCoreNavigation))
/// Update the feedback event with a specific feedback identifier. If you implement a custom feedback UI that lets a user elaborate on an issue, you can use this to update the metadata.
/// Note that feedback is sent 20 seconds after being recorded, so you should promptly update the feedback metadata after the user discards any feedback UI.
- (void)updateFeedbackWithUuid:(NSUUID * _Nonnull)uuid type:(enum NBFeedbackType)type source:(enum NBFeedbackSource)source description:(NSString * _Nullable)description;
/// Discard a recorded feedback event, for example if you have a custom feedback UI and the user canceled feedback.
- (void)cancelFeedbackWithUuid:(NSUUID * _Nonnull)uuid;
@end


@class NBRouteOptionss;
@class NBNavRoute;
@class NSError;
@class NSURLSessionDataTask;
@class NBDirectionsOptions;
@class NSURL;

/// A <code>Directions</code> object provides you with optimal directions between different locations, or waypoints. The directions object passes your request to the <a href="https://docs.nextbillion.ai/docs/navigation/api/navigation">Nbmap Navigation  API</a> and returns the requested information to a closure (block) that you provide. A directions object can handle multiple simultaneous requests. A <code>RouteOptions</code> object specifies criteria for the results, such as intermediate waypoints, a mode of transportation, or the level of detail to be returned.
/// Each result produced by the directions object is stored in a <code>Route</code> object. Depending on the <code>RouteOptions</code> object you provide, each route may include detailed information suitable for turn-by-turn directions, or it may include only high-level information such as the distance, estimated travel time, and name of each leg of the trip. The waypoints that form the request may be conflated with nearby locations, as appropriate; the resulting waypoints are provided to the closure.
SWIFT_CLASS_NAMED("Directions")
@interface NBDirections : NSObject
/// The shared directions object.
/// To use this object, a Nbmap [access token] should be specified in the <code>NBMapAccessKey</code> key in the main application bundle’s Info.plist.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NBDirections * _Nonnull sharedDirections;)
+ (NBDirections * _Nonnull)sharedDirections SWIFT_WARN_UNUSED_RESULT;
/// Begins asynchronously calculating the route or routes using the given options and delivers the results to a closure.
/// This method retrieves the routes asynchronously over a network connection. If a connection error or server error occurs, details about the error are passed into the given completion handler in lieu of the routes.
/// Routes may be displayed atop a [Nbmap map]. They may be cached but may not be stored permanently.
/// \param options A <code>RouteOptions</code> object specifying the requirements for the resulting routes.
///
/// \param completionHandler The closure (block) to call with the resulting routes. This closure is executed on the application’s main thread.
///
///
/// returns:
/// The data task used to perform the HTTP request. If, while waiting for the completion handler to execute, you no longer want the resulting routes, cancel this task.
- (NSURLSessionDataTask * _Nonnull)calculateNavigationWithOptions:(NBRouteOptionss * _Nonnull)options completionHandler:(void (^ _Nonnull)(NSArray<NBNavRoute *> * _Nullable, NSError * _Nullable))completionHandler;
/// The HTTP URL used to fetch the routes from the API.
/// After requesting the URL returned by this method, you can parse the JSON data in the response and pass it into the <code>Route.init(json:waypoints:profileIdentifier:)</code> initializer.
- (NSURL * _Nonnull)URLForCalculatingDirectionsWithOptions:(NBDirectionsOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NBWaypoint;
@class TravelledRawLocation;
enum NBRouteShapeFormat : NSUInteger;
enum NBRouteShapeResolution : NSUInteger;
@class NSLocale;
enum NBMeasurementSystem : NSUInteger;

/// Options for calculating results from the Nbmap Directions service.
/// You do not create instances of this class directly. Instead, create instances of <code>MatchOptions</code> or <code>RouteOptions</code>.
SWIFT_CLASS_NAMED("DirectionsOptions")
@interface NBDirectionsOptions : NSObject <NSCopying, NSSecureCoding>
/// Initializes an options object for routes between the given waypoints and an optional profile identifier.
/// Do not call <code>DirectionsOptions(waypoints:profileIdentifier:)</code> directly; instead call the corresponding initializer of <code>RouteOptions</code> or <code>MatchOptions</code>.
/// \param waypoints An array of <code>Waypoint</code> objects representing locations that the route should visit in chronological order. The array should contain at least two waypoints (the source and destination) and at most 25 waypoints. (Some profiles, such as <code>NBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>, <a href="https://www.nbmap.com/api-documentation/#directions">may have lower limits</a>.)
///
/// \param profile A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>NBNavigationModeCar</code>, <code>NBNavigationModeTruck</code>. <code>NBNavigationModeCar</code> is used by default.
///
- (nonnull instancetype)initWithWaypoints:(NSArray<NBWaypoint *> * _Nonnull)waypoints profile:(NBNavigationMode _Nonnull)profile OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualToDirectionsOptions:(NBDirectionsOptions * _Nullable)directionsOptions SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
/// An array of <code>Waypoint</code> objects representing locations that the route should visit in chronological order.
/// A waypoint object indicates a location to visit, as well as an optional heading from which to approach the location.
/// The array should contain at least two waypoints (the source and destination) and at most 25 waypoints.
@property (nonatomic, copy) NSArray<NBWaypoint *> * _Nonnull waypoints;
/// A list of <code>TravelledRawLocation</code> objects representing the raw locations travelled during the navigation process
/// The List should contain at most 100 raw location data
@property (nonatomic, copy) NSArray<TravelledRawLocation *> * _Nonnull travelledRawLocations;
/// A string specifying the primary mode of transportation for the routes.
/// This property should be set to <code>NBNavigationModeCar</code>, <code>NBNavigationModeTruck</code>. The default value of this property is <code>NBNavigationModeCar</code>, which specifies driving directions.
@property (nonatomic) NBNavigationMode _Nonnull profileIdentifier;
/// Format of the data from which the shapes of the returned route and its steps are derived.
/// This property has no effect on the returned shape objects, although the choice of format can significantly affect the size of the underlying HTTP response.
/// The default value of this property is <code>polyline6</code>.
@property (nonatomic) enum NBRouteShapeFormat shapeFormat;
/// An encoded polyline string
/// Accepts polyline and polyline6 encoded geometry as input.
/// If this parameter is provided, the only other parameters which will be considered are originalShapeType, lang and key.
/// The rest of the parameters in the input request will be ignored.
/// Example: geometry=mxtnEpbcqU?_\pBBBca@pk@A@iSjA?BcZnG??{BaBuq@sDAEsZ_S@I{pA_SA@qu@gBuBEwVhcAEZekHgLP
@property (nonatomic, copy) NSString * _Nonnull originalShape;
/// Resolution of the shape of the returned route.
/// This property has no effect on the shape of the returned route’s steps.
/// The default value of this property is <code>full</code>, specifying a low-resolution route shape.
@property (nonatomic) enum NBRouteShapeResolution routeShapeResolution;
/// The locale in which the route’s instructions are written.
/// If you use NbmapDirections.swift with the Nbmap Directions API or Map Matching API, this property affects the sentence contained within the <code>RouteStep.instructions</code> property, but it does not affect any road names contained in that property or other properties such as <code>RouteStep.name</code>.
/// The Navigation API can provide instructions in [a number of languages]. Set this property to <code>Bundle.main.preferredLocalizations.first</code> or <code>Locale.autoupdatingCurrent</code> to match the application’s language or the system language, respectively.
/// By default, this property is set to the current system locale.
@property (nonatomic, copy) NSLocale * _Nonnull locale;
/// The measurement system used in display instructions included in route steps.
/// If this value haven’t seted , the default  value should get by .local.object(forKey: .measurementSystem)
/// You should choose a measurement system appropriate for the current region. You can also allow the user to indicate their preferred measurement system via a setting.
@property (nonatomic) enum NBMeasurementSystem distanceMeasurementSystem;
@property (nonatomic) NSInteger departureTime;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NBNavRouteLeg;
@class NSDate;

/// A <code>DirectionsResult</code> represents a result returned from either the Nbmap Directions service.
/// You do not create instances of this class directly. Instead, you receive <code>Route</code> objects when you request directions using the <code>Directions.calculate(options:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("DirectionsResult")
@interface NBDirectionsResult : NSObject <NSSecureCoding>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// An array of geographic coordinates defining the path of the route from start to finish.
/// This array may be <code>nil</code> or simplified depending on the <code>routeShapeResolution</code> property of the original <code>RouteOptions</code> object.
/// Using the [Nbmap Maps SDK for iOS], you can create an <code>NGLPolyline</code> object using these coordinates to display an overview of the route on an <code>NGLMapView</code>.
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nullable coordinates;
/// The number of coordinates.
/// The value of this property may be zero or reduced depending on the <code>routeShapeResolution</code> property of the original <code>RouteOptions</code> object.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates.count</code> property.
@property (nonatomic, readonly) NSUInteger coordinateCount;
/// Retrieves the coordinates.
/// The array may be empty or simplified depending on the <code>routeShapeResolution</code> property of the original <code>RouteOptions</code> object.
/// Using the [Nbmap Maps SDK for iOS], you can create an <code>NGLPolyline</code> object using these coordinates to display an overview of the route on an <code>NGLMapView</code>.
/// precondition:
/// <code>coordinates</code> must be large enough to hold <code>coordinateCount</code> instances of <code>CLLocationCoordinate2D</code>.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates</code> property.
/// \param coordinates A pointer to a C array of <code>CLLocationCoordinate2D</code> instances. On output, this array contains all the vertices of the overlay.
///
- (void)getCoordinates:(CLLocationCoordinate2D * _Nonnull)coordinates;
/// An array of <code>RouteLeg</code> objects representing the legs of the route.
/// The number of legs in this array depends on the number of waypoints. A route with two waypoints (the source and destination) has one leg, a route with three waypoints (the source, an intermediate waypoint, and the destination) has two legs, and so on.
/// To determine the name of the route, concatenate the names of the route’s legs.
@property (nonatomic, readonly, copy) NSArray<NBNavRouteLeg *> * _Nonnull legs;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The route’s distance, measured in meters.
/// The value of this property accounts for the distance that the user must travel to traverse the path of the route. It is the sum of the <code>distance</code> properties of the route’s legs, not the sum of the direct distances between the route’s waypoints. You should not assume that the user would travel along this distance at a fixed speed.
@property (nonatomic, readonly) CLLocationDistance distance;
/// The route’s expected travel time, measured in seconds.
/// The value of this property reflects the time it takes to traverse the entire route. It is the sum of the <code>expectedTravelTime</code> properties of the route’s legs. If the route was calculated using the <code>NBNavigationMode</code> profile, this property reflects current traffic conditions at the time of the request, not necessarily the traffic conditions at the time the user would begin the route. For other profiles, this property reflects travel time under ideal conditions and does not account for traffic congestion. If the route makes use of a ferry or train, the actual travel time may additionally be subject to the schedules of those services.
/// Do not assume that the user would travel along the route at a fixed speed. For more granular travel times, use the <code>RouteLeg.expectedTravelTime</code> or <code>RouteStep.expectedTravelTime</code>. For even more granularity, specify the <code>AttributeOptions.expectedTravelTime</code> option and use the <code>RouteLeg.expectedSegmentTravelTimes</code> property.
@property (nonatomic, readonly) NSTimeInterval expectedTravelTime;
/// <code>RouteOptions</code> used to create the directions request.
/// The route options object’s profileIdentifier property reflects the primary mode of transportation used for the route. Individual steps along the route might use different modes of transportation as necessary.
@property (nonatomic, readonly, strong) NBDirectionsOptions * _Nonnull directionsOptions;
/// The [access token] used to make the directions request.
/// This property is set automatically if a request is made via <code>Directions.calculate(options:completionHandler:)</code>.
@property (nonatomic, copy) NSString * _Nullable accessToken;
/// The endpoint used to make the directions request.
/// This property is set automatically if a request is made via <code>Directions.calculate(options:completionHandler:)</code>.
@property (nonatomic, copy) NSURL * _Nullable apiEndpoint;
/// A unique identifier for a directions request.
/// Each route produced by a single call to <code>Directions.calculate(options:completionHandler:)</code> has the same route identifier.
@property (nonatomic, copy) NSString * _Nullable routeIdentifier;
/// The locale to use for spoken instructions.
/// This locale is specific to Nbmap Voice API. If <code>nil</code> is returned, the instruction should be spoken with an alternative speech synthesizer.
@property (nonatomic, copy) NSLocale * _Nullable speechLocale;
@property (nonatomic, copy) NSString * _Nullable json;
/// The request of the route start time
@property (nonatomic, copy) NSDate * _Nullable fetchStartDate;
/// The  requestresponse time
@property (nonatomic, copy) NSDate * _Nullable responseEndDate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSUnitLength;
@class NSAttributedString;

/// Provides appropriately formatted, localized descriptions of linear distances.
SWIFT_CLASS_NAMED("DistanceFormatter")
@interface NBDistanceFormatter : NSLengthFormatter
/// Intializes a new <code>DistanceFormatter</code>.
/// \param approximate approximates the distances.
///
- (nonnull instancetype)initWithApproximate:(BOOL)approximate OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// Returns a more human readable <code>String</code> from a given <code>CLLocationDistance</code>.
/// The user’s <code>Locale</code> is used here to set the units.
- (NSString * _Nonnull)stringFrom:(CLLocationDistance)distance SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringFromMeters:(double)numberInMeters SWIFT_WARN_UNUSED_RESULT;
- (NSMeasurement<NSUnitLength *> * _Nonnull)measurementOfDistance:(CLLocationDistance)distance SWIFT_WARN_UNUSED_RESULT;
/// Returns an attributed string containing the formatted, converted distance.
/// <code>NSAttributedStringKey.quantity</code> is applied to the numeric quantity.
- (NSAttributedString * _Nullable)attributedStringForObjectValue:(id _Nonnull)obj withDefaultAttributes:(NSDictionary<NSAttributedStringKey, id> * _Nullable)attrs SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// A <code>DrivingSide</code> indicates which side of the road cars and traffic flow.
typedef SWIFT_ENUM_NAMED(NSInteger, NBDrivingSide, "DrivingSide", open) {
/// Indicates driving occurs on the <code>left</code> side.
  NBDrivingSideLeft = 0,
/// Indicates driving occurs on the <code>right</code> side.
  NBDrivingSideRight = 1,
};

@class NSNumber;

/// Feedback Model Object for End Of Route Experience.
SWIFT_CLASS("_TtC19NbmapCoreNavigation18EndOfRouteFeedback")
@interface EndOfRouteFeedback : NSObject
- (nonnull instancetype)initWithRating:(NSNumber * _Nullable)ratingNumber comment:(NSString * _Nullable)comment;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, NBFeedbackSource, "FeedbackSource", open) {
  NBFeedbackSourceUser = 0,
  NBFeedbackSourceReroute = 1,
  NBFeedbackSourceUnknown = 2,
};

/// Feedback type is used to specify the type of feedback being recorded with <code>RouteController.recordFeedback()</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, NBFeedbackType, "FeedbackType", open) {
/// Indicates general feedback. You should provide a <code>description</code> string to <code>RouteController.recordFeedback()</code> to elaborate on the feedback if possible.
  NBFeedbackTypeGeneral = 0,
/// Identifies the feedback as the location of an accident or crash
  NBFeedbackTypeAccident = 1,
/// Identifies the feedback as the location of a road hazard such as debris, stopped vehicles, etc.
  NBFeedbackTypeHazard = 2,
/// Identifies the feedback as the location of a closed road that should not allow vehicles
  NBFeedbackTypeRoadClosed = 3,
/// Identifies the feedback as a maneuver that isn’t allowed. For example, if a user is instructed to make a left turn, but the turn isn’t allowed.
  NBFeedbackTypeNotAllowed = 4,
/// Identifies the feedback as the location of a road that should exist along the route.
  NBFeedbackTypeMissingRoad = 5,
/// Identifies the feedback as a maneuver with missing exit information such as an exit number or destination sign.
  NBFeedbackTypeMissingExit = 6,
/// Identifies the feedback as the location of a poor instruction or route choice. This could be used to indicate an ambiguous or poorly-timed turn announcement, or a set of confusing turns.
  NBFeedbackTypeRoutingError = 7,
/// Identifies the feedback as the location of a confusing instruction.
  NBFeedbackTypeConfusingInstruction = 8,
/// Identifies the feedback as a place where traffic should have been reported.
  NBFeedbackTypeReportTraffic = 9,
/// Identifies the feedback as a general map issue.
  NBFeedbackTypeMapIssue = 10,
};


/// A <code>RouteShapeFormat</code> indicates the format of a route’s shape in the raw HTTP response.
typedef SWIFT_ENUM_NAMED(NSUInteger, NBInstructionFormat, "InstructionFormat", open) {
/// The route steps’ instructions are delivered in plain text format.
  NBInstructionFormatText = 0,
/// The route steps’ instructions are delivered in HTML format.
/// Key phrases are boldfaced.
  NBInstructionFormatHtml = 1,
};

@class NSIndexSet;
@class NBLane;

/// A single cross street along a step.
SWIFT_CLASS_NAMED("Intersection")
@interface NBIntersection : NSObject <NSSecureCoding>
/// The geographic coordinates at the center of the intersection.
@property (nonatomic, readonly) CLLocationCoordinate2D location;
/// An array of <code>CLLocationDirection</code>s indicating the absolute headings of the roads that meet at the intersection.
/// A road is represented in this array by a heading indicating the direction from which the road meets the intersection. To get the direction of travel when leaving the intersection along the road, rotate the heading 180 degrees.
/// A single road that passes through this intersection is represented by two items in this array: one for the segment that enters the intersection and one for the segment that exits it.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull headings;
/// The indices of the items in the <code>headings</code> array that correspond to the roads that may be used to leave the intersection.
/// This index set effectively excludes any one-way road that leads toward the intersection.
@property (nonatomic, readonly, copy) NSIndexSet * _Nonnull outletIndexes;
/// The index of the item in the <code>headings</code> array that corresponds to the road that the containing route step uses to approach the intersection.
@property (nonatomic, readonly) NSInteger approachIndex;
/// The index of the item in the <code>headings</code> array that corresponds to the road that the containing route step uses to leave the intersection.
@property (nonatomic, readonly) NSInteger outletIndex;
/// An array of <code>Lane</code> objects representing all the lanes of the road that the containing route step uses to approach the intersection.
/// If no lane information is available for an intersection, this property’s value is <code>nil</code>. The first item corresponds to the leftmost lane, the second item corresponds to the second lane from the left, and so on, regardless of whether the surrounding country drives on the left or on the right.
@property (nonatomic, readonly, copy) NSArray<NBLane *> * _Nullable approachLanes;
/// The indices of the items in the <code>approachLanes</code> array that correspond to the roads that may be used to execute the maneuver.
/// If no lane information is available for an intersection, this property’s value is <code>nil</code>.
@property (nonatomic, readonly, copy) NSIndexSet * _Nullable usableApproachLanes;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A lane on the road approaching an intersection.
SWIFT_CLASS_NAMED("Lane")
@interface NBLane : NSObject <NSSecureCoding>
/// The lane indications specifying the maneuvers that may be executed from the lane.
@property (nonatomic, readonly) NBLaneIndication indications;
/// Initializes a new <code>Lane</code> using the given lane indications.
- (nonnull instancetype)initWithIndications:(NBLaneIndication)indications OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A component that represents a lane  representation of an instruction.
SWIFT_CLASS_NAMED("LaneIndicationComponent")
@interface NBLaneIndicationComponent : NSObject <NBComponentRepresentable>
/// An array indicating which directions you can go from a lane (left, right, or straight).
/// If the value is <code>[LaneIndication.left", LaneIndication.straightAhead]</code>, the driver can go left or straight ahead from that lane. This is only set when the <code>component</code> is a <code>lane</code>.
@property (nonatomic) NBLaneIndication indications;
/// The boolean that indicates whether the lane can be used to complete the maneuver.
/// If multiple lanes are active, then they can all be used to complete the upcoming maneuver. This value is set to <code>false</code> by default.
@property (nonatomic) BOOL isUsable;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
/// Initializes a new visual instruction component object that displays the given information.
/// \param indications The directions to go from a lane component.
///
/// \param isLaneActive The flag to indicate that the upcoming maneuver can be completed with a lane component.
///
- (nonnull instancetype)initWithIndications:(NBLaneIndication)indications isUsable:(BOOL)isUsable OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// A <code>ManeuverDirection</code> clarifies a <code>ManeuverType</code> with directional information. The exact meaning of the maneuver direction for a given step depends on the step’s maneuver type; see the <code>ManeuverType</code> documentation for details.
typedef SWIFT_ENUM_NAMED(NSInteger, NBManeuverDirection, "ManeuverDirection", open) {
/// The step does not have a particular maneuver direction associated with it.
/// This maneuver direction is used as a workaround for bridging to Objective-C which does not support nullable enumeration-typed values.
  NBManeuverDirectionNone = 0,
/// The maneuver requires a sharp turn to the right.
  NBManeuverDirectionSharpRight = 1,
/// The maneuver requires a turn to the right, a merge to the right, or an exit on the right, or the destination is on the right.
  NBManeuverDirectionRight = 2,
/// The maneuver requires a slight turn to the right.
  NBManeuverDirectionSlightRight = 3,
/// The maneuver requires no notable change in direction, or the destination is straight ahead.
  NBManeuverDirectionStraightAhead = 4,
/// The maneuver requires a slight turn to the left.
  NBManeuverDirectionSlightLeft = 5,
/// The maneuver requires a turn to the left, a merge to the left, or an exit on the left, or the destination is on the right.
  NBManeuverDirectionLeft = 6,
/// The maneuver requires a sharp turn to the left.
  NBManeuverDirectionSharpLeft = 7,
/// The maneuver requires a U-turn when possible.
/// Use the difference between the step’s initial and final headings to distinguish between a U-turn to the left (typical in countries that drive on the right) and a U-turn on the right (typical in countries that drive on the left). If the difference in headings is greater than 180 degrees, the maneuver requires a U-turn to the left. If the difference in headings is less than 180 degrees, the maneuver requires a U-turn to the right.
  NBManeuverDirectionUTurn = 8,
};

/// A <code>ManeuverType</code> specifies the type of maneuver required to complete the route step. You can pair a maneuver type with a <code>ManeuverDirection</code> to choose an appropriate visual or voice prompt to present the user.
/// In Swift, you can use pattern matching with a single switch statement on a tuple containing the maneuver type and maneuver direction to avoid a complex series of if-else-if statements or switch statements.
typedef SWIFT_ENUM_NAMED(NSInteger, NBManeuverType, "ManeuverType", open) {
/// The step does not have a particular maneuver type associated with it.
/// This maneuver type is used as a workaround for bridging to Objective-C which does not support nullable enumeration-typed values.
  NBManeuverTypeNone = 0,
/// The step requires the user to depart from a waypoint.
/// If the waypoint is some distance away from the nearest road, the maneuver direction indicates the direction the user must turn upon reaching the road.
  NBManeuverTypeDepart = 1,
/// The step requires the user to turn.
/// The maneuver direction indicates the direction in which the user must turn relative to the current direction of travel. The exit index indicates the number of intersections, large or small, from the previous maneuver up to and including the intersection at which the user must turn.
  NBManeuverTypeTurn = 2,
/// The step requires the user to continue after a turn.
  NBManeuverTypeContinue = 3,
/// The step requires the user to continue on the current road as it changes names.
/// The step’s name contains the road’s new name. To get the road’s old name, use the previous step’s name.
  NBManeuverTypePassNameChange = 4,
/// The step requires the user to merge onto another road.
/// The maneuver direction indicates the side from which the other road approaches the intersection relative to the user.
  NBManeuverTypeMerge = 5,
/// The step requires the user to take a entrance ramp (slip road) onto a highway.
  NBManeuverTypeTakeOnRamp = 6,
/// The step requires the user to take an exit ramp (slip road) off a highway.
/// The maneuver direction indicates the side of the highway from which the user must exit. The exit index indicates the number of highway exits from the previous maneuver up to and including the exit that the user must take.
  NBManeuverTypeTakeOffRamp = 7,
/// The step requires the user to choose a fork at a Y-shaped fork in the road.
/// The maneuver direction indicates which fork to take.
  NBManeuverTypeReachFork = 8,
/// The step requires the user to turn at either a T-shaped three-way intersection or a sharp bend in the road where the road also changes names.
/// This maneuver type is called out separately so that the user may be able to proceed more confidently, without fear of having overshot the turn. If this distinction is unimportant to you, you may treat the maneuver as an ordinary <code>turn</code>.
  NBManeuverTypeReachEnd = 9,
/// The step requires the user to get into a specific lane in order to continue along the current road.
/// The maneuver direction is set to <code>straightAhead</code>. Each of the first intersection’s usable approach lanes also has an indication of <code>straightAhead</code>. A maneuver in a different direction would instead have a maneuver type of <code>turn</code>.
/// This maneuver type is called out separately so that the application can present the user with lane guidance based on the first element in the <code>intersections</code> property. If lane guidance is unimportant to you, you may treat the maneuver as an ordinary <code>continue</code> or ignore it.
  NBManeuverTypeUseLane = 10,
/// The step requires the user to enter and traverse a roundabout (traffic circle or rotary).
/// The step has no name, but the exit name is the name of the road to take to exit the roundabout. The exit index indicates the number of roundabout exits up to and including the exit to take.
/// If <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to <code>true</code>, this step is followed by an <code>.exitRoundabout</code> maneuver. Otherwise, this step represents the entire roundabout maneuver, from the entrance to the exit.
  NBManeuverTypeTakeRoundabout = 11,
/// The step requires the user to enter and traverse a large, named roundabout (traffic circle or rotary).
/// The step’s name is the name of the roundabout. The exit name is the name of the road to take to exit the roundabout. The exit index indicates the number of rotary exits up to and including the exit that the user must take.
/// If <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to <code>true</code>, this step is followed by an <code>.exitRotary</code> maneuver. Otherwise, this step represents the entire roundabout maneuver, from the entrance to the exit.
  NBManeuverTypeTakeRotary = 12,
/// The step requires the user to enter and exit a roundabout (traffic circle or rotary) that is compact enough to constitute a single intersection.
/// The step’s name is the name of the road to take after exiting the roundabout. This maneuver type is called out separately because the user may perceive the roundabout as an ordinary intersection with an island in the middle. If this distinction is unimportant to you, you may treat the maneuver as either an ordinary <code>turn</code> or as a <code>takeRoundabout</code>.
  NBManeuverTypeTurnAtRoundabout = 13,
/// The step requires the user to exit a roundabout (traffic circle or rotary).
/// This maneuver type follows a <code>.takeRoundabout</code> maneuver. It is only used when <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to true.
  NBManeuverTypeExitRoundabout = 14,
/// The step requires the user to exit a large, named roundabout (traffic circle or rotary).
/// This maneuver type follows a <code>.takeRotary</code> maneuver. It is only used when <code>RouteOptions.includesExitRoundaboutManeuver</code> is set to true.
  NBManeuverTypeExitRotary = 15,
/// The step requires the user to respond to a change in travel conditions.
/// This maneuver type may occur for example when driving directions require the user to board a ferry, or when cycling directions require the user to dismount. The step’s transport type and instructions contains important contextual details that should be presented to the user at the maneuver location.
/// Similar changes can occur simultaneously with other maneuvers, such as when the road changes its name at the site of a movable bridge. In such cases, <code>heedWarning</code> is suppressed in favor of another maneuver type.
  NBManeuverTypeHeedWarning = 16,
/// The step requires the user to arrive at a waypoint.
/// The distance and expected travel time for this step are set to zero, indicating that the route or route leg is complete. The maneuver direction indicates the side of the road on which the waypoint can be found (or whether it is straight ahead).
  NBManeuverTypeArrive = 17,
/// The step requires the user to arrive at an intermediate waypoint.
/// This maneuver type is only used by version 4 of the Nbmap Directions API.
  NBManeuverTypePassWaypoint = 18,
};

/// A system of units of measuring distances and other quantities.
typedef SWIFT_ENUM_NAMED(NSUInteger, NBMeasurementSystem, "MeasurementSystem", open) {
/// U.S. customary and British imperial units.
/// Distances are measured in miles and feet.
  NBMeasurementSystemImperial = 0,
/// The metric system.
/// Distances are measured in kilometers and meters.
  NBMeasurementSystemMetric = 1,
};


SWIFT_CLASS("_TtC19NbmapCoreNavigation19NBNavigationService")
@interface NBNavigationService : NSObject
/// Stops monitoring the user’s location along the route.
- (void)suspendLocationUpdates;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@class CLLocationManager;
@class CLHeading;
@class CLLocation;

@interface NBNavigationService (SWIFT_EXTENSION(NbmapCoreNavigation)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateHeading:(CLHeading * _Nonnull)newHeading;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationManagerDidChangeAuthorization:(CLLocationManager * _Nonnull)manager;
@end

@class RouteController;

@interface NBNavigationService (SWIFT_EXTENSION(NbmapCoreNavigation))
- (BOOL)routeController:(RouteController * _Nonnull)routeController shouldRerouteFrom:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
- (void)routeController:(RouteController * _Nonnull)routeController willRerouteFrom:(CLLocation * _Nonnull)location;
- (void)routeController:(RouteController * _Nonnull)routeController didRerouteAlong:(NBNavRoute * _Nonnull)route at:(CLLocation * _Nullable)location proactive:(BOOL)proactive;
- (void)routeController:(RouteController * _Nonnull)routeController didFailToRerouteWith:(NSError * _Nonnull)error;
- (BOOL)routeController:(RouteController * _Nonnull)routeController shouldDiscard:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
- (void)routeController:(RouteController * _Nonnull)routeController didArriveAt:(NBWaypoint * _Nonnull)waypoint;
@end


SWIFT_CLASS("_TtC19NbmapCoreNavigation18NBTelemetryManager")
@interface NBTelemetryManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP19NbmapCoreNavigation23NavigationEventTracking_")
@protocol NavigationEventTracking
- (void)trackingRouteDataWithRoute:(NSDictionary<NSString *, id> * _Nonnull)route;
- (void)trackingRawLocationWithRawLocation:(NSDictionary<NSString *, id> * _Nonnull)rawLocation;
- (void)trackingSnapLocationWithSnapLocation:(NSDictionary<NSString *, id> * _Nonnull)snapLocation;
- (void)trackingSpokenWithSponken:(NSDictionary<NSString *, id> * _Nonnull)sponken;
- (void)trackingBannerInfoWithBannerInfo:(NSDictionary<NSString *, id> * _Nonnull)bannerInfo;
- (void)trackingSummaryWithSummary:(NSDictionary<NSString *, id> * _Nonnull)summary;
- (void)trackingStartRerouteWithReroute:(NSDictionary<NSString *, id> * _Nonnull)reroute;
- (void)trackingRerouteErrorWithReRouteError:(NSDictionary<NSString *, id> * _Nonnull)reRouteError;
- (void)trackingRerouteResponseWithRerouteResponse:(NSDictionary<NSString *, id> * _Nonnull)rerouteResponse;
- (void)trackingNavigationFinish;
@end


/// <code>NavigationLocationManager</code> is the base location manager which handles permissions and background modes.
SWIFT_CLASS_NAMED("NavigationLocationManager")
@interface NBNavigationLocationManager : CLLocationManager <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("RouteOptions")
@interface NBRouteOptionss : NBDirectionsOptions
/// Initializes a route options object for routes between the given locations and an optional profile identifier.
/// note:
/// This initializer is intended for <code>CLLocation</code> objects created using the <code>CLLocation.init(latitude:longitude:)</code> initializer. If you intend to use a <code>CLLocation</code> object obtained from a <code>CLLocationManager</code> object, consider increasing the <code>horizontalAccuracy</code> or set it to a negative value to avoid overfitting, since the <code>Waypoint</code> class’s <code>coordinateAccuracy</code> property represents the maximum allowed deviation from the waypoint.
/// \param locations An array of <code>CLLocation</code> objects representing locations that the route should visit in chronological order. The array should contain at least two locations (the source and destination) and at most 25 locations. Each location object is converted into a <code>Waypoint</code> object. This class respects the <code>CLLocation</code> class’s <code>coordinate</code> and <code>horizontalAccuracy</code> properties, converting them into the <code>Waypoint</code> class’s <code>coordinate</code> and <code>coordinateAccuracy</code> properties, respectively.
///
/// \param mode A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>NBNavigationModeCar</code>, <code>NBNavigationModeTruck</code>. <code>NBNavigationModeCar</code> is used by default.
///
- (nonnull instancetype)initWithOrigin:(CLLocation * _Nonnull)origin destination:(CLLocation * _Nonnull)destination with:(NSArray<CLLocation *> * _Nullable)locations mode:(NBNavigationMode _Nullable)mode;
/// Initializes a route options object for routes between the given geographic coordinates and an optional profile identifier.
/// \param coordinates An array of geographic coordinates representing locations that the route should visit in chronological order. The array should contain at least two locations (the source and destination) and at most 25 locations. Each coordinate is converted into a <code>Waypoint</code> object.
///
/// \param mode A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>NBNavigationModeCar</code>, <code>NBNavigationModeTruck</code>. <code>NBNavigationModeCar</code> is used by default.
///
- (nonnull instancetype)initFrom:(CLLocationCoordinate2D)origin to:(CLLocationCoordinate2D)destination with:(NSArray<NSValue *> * _Nullable)coordinates mode:(NBNavigationMode _Nullable)mode;
/// Initializes a route options object for routes between the given waypoints and an optional profile identifier.
/// \param waypoints An array of <code>Waypoint</code> objects representing locations that the route should visit in chronological order.
///
/// \param mode A string specifying the primary mode of transportation for the routes. This parameter, if set, should be set to <code>NBNavigationModeCar</code>, <code>NBNavigationModeTruck``. </code>NBNavigationModeCar` is used by default.
///
- (nonnull instancetype)initWithOrigin:(NBWaypoint * _Nonnull)origin destination:(NBWaypoint * _Nonnull)destination waypoints:(NSArray<NBWaypoint *> * _Nullable)waypoints mode:(NBNavigationMode _Nullable)mode;
- (nonnull instancetype)initWithWaypoints:(NSArray<NBWaypoint *> * _Nonnull)waypoints profile:(NBNavigationMode _Nonnull)profile OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// A Boolean value indicating whether alternative routes should be included in the response.
/// If the value of this property is <code>false</code>, the server only calculates a single route that visits each of the waypoints. If the value of this property is <code>true</code>, the server attempts to find additional reasonable routes that visit the waypoints. Regardless, multiple routes are only returned if it is possible to visit the waypoints by a different route without significantly increasing the distance or travel time. The alternative routes may partially overlap with the preferred route, especially if intermediate waypoints are specified.
/// Alternative routes may take longer to calculate and make the response significantly larger, so only request alternative routes if you intend to display them to the user or let the user choose them over the preferred route. For example, do not request alternative routes if you only want to know the distance or estimated travel time to a destination.
/// The default value of this property is <code>false</code>.
@property (nonatomic) BOOL includesAlternativeRoutes;
/// A Int value of the alternative route count
/// The maxnum value is 3 , Minimum value is 1 , By default the value is 3
@property (nonatomic) NSInteger alternativeCount;
/// The route classes that the calculated routes will avoid.
/// We can set an array road class to avoid.
@property (nonatomic) NBRoadClasses roadClassesToAvoid SWIFT_DEPRECATED_MSG("Use `avoid` instead.");
/// The route classes that the calculated routes will avoid.
/// We can set an array road class to avoid.
/// Allowed Values:  <code>toll</code> <code>highway</code> <code>ferry</code> <code>sharp_turn</code> <code>uturn</code> <code>service_road</code> <code>left_turn</code> <code>right_turn</code> <code>bbox</code> <code>geofence_id</code> <code>none</code>
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull avoid;
@property (nonatomic) NBMapOption _Nonnull mapOption;
/// This defines the dimensions of a truck in centimeters (cm). This parameter is effective only when the <code>profileIdentifier</code> is<code>NBNavigationMode6W</code>. Maximum dimensions are as follows:
/// Height = 1000 cm
/// Width = 1000 cm
/// Length = 5000 cm
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull truckSize;
/// This parameter defines the weight of the truck including trailers and shipped goods in kilograms (kg). This parameter is effective only when  <code>profileIdentifier</code> is<code>.truck</code>
/// The minimum value of this propery is 1, and the maximum of this value is 100000
@property (nonatomic) NSInteger truckWeight;
/// Set the route type that needs to be returned.
/// Default: fastest
@property (nonatomic) NBNavigationRouteType _Nullable routeType;
/// Specify if crossing an international border is expected. When set to <code>false</code>, the API will place a penalty for crossing an international border through a checkpoint. Consequently, alternative routes will be preferred if they are feasible for the given set of destination or waypoints . A higher penalty is placed on a route crossing international border without a checkpoint, hence such routes will be preferred the least.
/// When set to <code>true</code>, there will be no penalty for crossing an international border.
/// Please note this parameter is effective only when  <code>mapOption</code> is<code>.valhalla</code>
/// The default value is set to <code>false</code>
@property (nonatomic) BOOL crossBorder;
/// Specify the total load per axle (including the weight of trailers and shipped goods) of the truck, in tonnes. When used, the service will return routes which are legally allowed to carry the load specified per axle.
/// Please note this parameter is effective only when <code>profileIdentifier</code> is <code>.truck</code> and <code>mapOption</code> is<code>.valhalla</code>
@property (nonatomic) double truckAxleLoad;
/// Allowed Values:  <code>taxi</code> <code>hov</code>
@property (nonatomic, copy) NSString * _Nonnull allow;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualToRouteOptions:(NBRouteOptionss * _Nullable)routeOptions SWIFT_WARN_UNUSED_RESULT;
@end


/// A <code>NavigationRouteOptions</code> object specifies turn-by-turn-optimized criteria for results returned by the Nbmap Directions API.
/// <code>NavigationRouteOptions</code> is a subclass of <code>RouteOptions</code> that has been optimized for navigation. Pass an instance of this class into the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("NavigationRouteOptions")
@interface NBNavigationRouteOptions : NBRouteOptionss
/// Initializes a navigation route options object for routes between the given waypoints and an optional profile identifier optimized for navigation.
/// seealso:
///
/// <a href="https://www.nbmap.com/nbmap-navigation-ios/directions/0.10.1/Classes/RouteOptions.html">RouteOptions</a>
- (nonnull instancetype)initWithWaypoints:(NSArray<NBWaypoint *> * _Nonnull)waypoints profile:(NBNavigationMode _Nonnull)profile OBJC_DESIGNATED_INITIALIZER;
/// Initializes a navigation route options object for routes between the given locations and an optional profile identifier optimized for navigation.
/// seealso:
///
/// <a href="https://www.nbmap.com/nbmap-navigation-ios/directions/0.19.0/Classes/RouteOptions.html">RouteOptions</a>
- (nonnull instancetype)initWithLocations:(NSArray<CLLocation *> * _Nonnull)locations profileIdentifier:(NBNavigationMode _Nullable)profileIdentifier;
/// Initializes a route options object for routes between the given geographic coordinates and an optional profile identifier optimized for navigation.
/// seealso:
///
/// <a href="https://www.nbmap.com/nbmap-navigation-ios/directions/0.19.0/Classes/RouteOptions.html">RouteOptions</a>
- (nonnull instancetype)initWithCoordinates:(NSArray<NSValue *> * _Nonnull)coordinates profileIdentifier:(NBNavigationMode _Nullable)profileIdentifier;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>NavigationSettings</code> provides a wrapper for UserDefaults.
/// Properties are prefixed and before they are stored in UserDefaults.standard.
SWIFT_CLASS_NAMED("NavigationSettings")
@interface NBNavigationSettings : NSObject
/// The volume that the voice controller will use.
/// This volume is relative to the system’s volume where 1.0 is same volume as the system.
@property (nonatomic) float voiceVolume;
/// Specifies whether to mute the voice controller or not.
@property (nonatomic) BOOL voiceMuted;
/// Specifies the preferred distance measurement unit.
/// note:
/// Anything but <code>kilometer</code> and <code>mile</code> will fall back to the default measurement for the current locale.
/// Meters and feets will be used when the presented distances are small enough. See <code>DistanceFormatter</code> for more information.
@property (nonatomic) NSLengthFormatterUnit distanceUnit;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end



/// <code>ReplayLocationManager</code> replays an array of locations exactly as they were
/// recorded with the single exception of the location’s timestamp which will be
/// adjusted by interval between locations.
SWIFT_CLASS_NAMED("ReplayLocationManager")
@interface NBReplayLocationManager : NBNavigationLocationManager
/// <code>speedMultiplier</code> adjusts the speed of the replay.
@property (nonatomic) NSTimeInterval speedMultiplier;
/// <code>locations</code> to be replayed.
@property (nonatomic, copy) NSArray<CLLocation *> * _Null_unspecified locations;
@property (nonatomic, readonly, strong) CLLocation * _Nullable location;
- (void)startUpdatingLocation;
- (void)stopUpdatingLocation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19NbmapCoreNavigation17RerouteController")
@interface RerouteController : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>Route</code> object defines a single route that the user can follow to visit a series of waypoints in order. The route object includes information about the route, such as its distance and expected travel time. Depending on the criteria used to calculate the route, the route object may also include detailed turn-by-turn instructions.
/// Typically, you do not create instances of this class directly. Instead, you receive route objects when you request directions using the <code>Directions.calculate(_:completionHandler:)</code> method. However, if you use the <code>Directions.url(forCalculating:)</code> method instead, you can pass the results of the HTTP request into this class’s initializer.
SWIFT_CLASS_NAMED("Route")
@interface NBNavRoute : NBDirectionsResult
/// Initializes a new route object with the given parameters
/// \param json A JSON string representation of the route, It can default to null
///
/// \param legs An array of <code>RouteLeg</code> of the route.
///
/// \param distance The <code>Route</code> distance.
///
/// \param expectedTravelTime The <code>Route</code> expeted travel time.
///
/// \param coordinates The <code>Route</code> coordinates .
///
/// \param speechLocale The <code>Route</code> used to create the request.
///
/// \param options The <code>RouteOptions</code> used to create the request.
///
- (nonnull instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json legs:(NSArray<NBNavRouteLeg *> * _Nonnull)legs distance:(CLLocationDistance)distance expectedTravelTime:(NSTimeInterval)expectedTravelTime coordinates:(NSArray<NSValue *> * _Nullable)coordinates speechLocale:(NSLocale * _Nullable)speechLocale options:(NBDirectionsOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new route object with the given JSON dictionary representation and waypoints.
/// This initializer is intended for use in conjunction with the <code>Directions.url(forCalculating:)</code> method.
/// \param json A JSON dictionary representation of the route as returned by the Nbmap Directions API.
///
/// \param waypoints An array of waypoints that the route visits in chronological order.
///
/// \param routeOptions The <code>RouteOptions</code> used to create the request.
///
- (nonnull instancetype)initWithJSON:(NSDictionary<NSString *, id> * _Nonnull)json waypoints:(NSArray<NBWaypoint *> * _Nonnull)waypoints routeOptions:(NBDirectionsOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end



/// A <code>RouteController</code> tracks the user’s progress along a route, posting notifications as the user reaches significant points along the route. On every location update, the route controller evaluates the user’s location, determining whether the user remains on the route. If not, the route controller calculates a new route.
/// <code>RouteController</code> is responsible for the core navigation logic whereas
/// <code>NavigationViewController</code> is responsible for displaying a default drop-in navigation UI.
SWIFT_CLASS("_TtC19NbmapCoreNavigation15RouteController")
@interface RouteController : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








@interface RouteController (SWIFT_EXTENSION(NbmapCoreNavigation)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateHeading:(CLHeading * _Nonnull)newHeading;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
@end

@class NBRouteStep;

/// A <code>RouteLeg</code> object defines a single leg of a route between two waypoints. If the overall route has only two waypoints, it has a single <code>RouteLeg</code> object that covers the entire route. The route leg object includes information about the leg, such as its name, distance, and expected travel time. Depending on the criteria used to calculate the route, the route leg object may also include detailed turn-by-turn instructions.
/// You do not create instances of this class directly. Instead, you receive route leg objects as part of route objects when you request directions using the <code>Directions.calculate(options:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("RouteLeg")
@interface NBNavRouteLeg : NSObject <NSSecureCoding>
/// Initializes a new route leg object with the given JSON dictionary representation and waypoints.
/// Normally, you do not create instances of this class directly. Instead, you receive route leg objects as part of route objects when you request directions using the <code>Directions.calculateDirections(options:completionHandler:)</code> method.
/// \param json A JSON dictionary representation of a route leg object as returnd by the Nbmap Directions API.
///
/// \param source The waypoint at the beginning of the leg.
///
/// \param destination The waypoint at the end of the leg.
///
/// \param profileIdentifier The profile identifier used to request the routes.
///
- (nonnull instancetype)initWithJSON:(NSDictionary<NSString *, id> * _Nonnull)json source:(NBWaypoint * _Nonnull)source destination:(NBWaypoint * _Nonnull)destination options:(NBDirectionsOptions * _Nonnull)options;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// The starting point of the route leg.
/// Unless this is the first leg of the route, the source of this leg is the same as the destination of the previous leg.
@property (nonatomic, readonly, strong) NBWaypoint * _Nonnull source;
/// The endpoint of the route leg.
/// Unless this is the last leg of the route, the destination of this leg is the same as the source of the next leg.
@property (nonatomic, readonly, strong) NBWaypoint * _Nonnull destination;
/// An array of one or more <code>RouteStep</code> objects representing the steps for traversing this leg of the route.
/// Each route step object corresponds to a distinct maneuver and the approach to the next maneuver.
/// This array is empty if the <code>includesSteps</code> property of the original <code>RouteOptions</code> object is set to <code>false</code>.
@property (nonatomic, readonly, copy) NSArray<NBRouteStep *> * _Nonnull steps;
/// An array containing the distance (measured in meters) between each coordinate in the route leg geometry.
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.distance</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable segmentDistances;
/// An array containing the expected travel time (measured in seconds) between each coordinate in the route leg geometry.
/// These values are dynamic, accounting for any conditions that may change along a segment, such as traffic congestion if the profile identifier is set to <code>.automobileAvoidingTraffic</code>.
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.expectedTravelTime</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable expectedSegmentTravelTimes;
/// An array containing the expected average speed (measured in meters per second) between each coordinate in the route leg geometry.
/// These values are dynamic; rather than speed limits, they account for the road’s classification and/or any traffic congestion (if the profile identifier is set to <code>.automobileAvoidingTraffic</code>).
/// This property is set if the <code>RouteOptions.attributeOptions</code> property contains <code>.speed</code>.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable segmentSpeeds;
/// A name that describes the route leg.
/// The name describes the leg using the most significant roads or trails along the route leg. You can display this string to the user to help the user can distinguish one route from another based on how the legs of the routes are named.
/// The leg’s name does not identify the start and end points of the leg. To distinguish one leg from another within the same route, concatenate the <code>name</code> properties of the <code>source</code> and <code>destination</code> waypoints.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The route leg’s distance, measured in meters.
/// The value of this property accounts for the distance that the user must travel to arrive at the destination from the source. It is not the direct distance between the source and destination, nor should not assume that the user would travel along this distance at a fixed speed.
@property (nonatomic, readonly) CLLocationDistance distance;
/// The route leg’s expected travel time, measured in seconds.
/// The value of this property reflects the time it takes to traverse the route leg. If the route was calculated using the <code>NBNavigationMode</code> profile, this property reflects current traffic conditions at the time of the request, not necessarily the traffic conditions at the time the user would begin this leg. For other profiles, this property reflects travel time under ideal conditions and does not account for traffic congestion. If the leg makes use of a ferry or train, the actual travel time may additionally be subject to the schedules of those services.
/// Do not assume that the user would travel along the leg at a fixed speed. For the expected travel time on each individual segment along the leg, use the <code>RouteStep.expectedTravelTimes</code> property. For more granularity, specify the <code>AttributeOptions.expectedTravelTime</code> option and use the <code>expectedSegmentTravelTimes</code> property.
@property (nonatomic, readonly) NSTimeInterval expectedTravelTime;
/// A string specifying the primary mode of transportation for the route leg.
/// The value of this property is <code>NBNavigationModeCar</code>, <code>NBNavigationModeTruck</code>, depending on the <code>profileIdentifier</code> property of the original <code>RouteOptions</code> object. This property reflects the primary mode of transportation used for the route leg. Individual steps along the route leg might use different modes of transportation as necessary.
@property (nonatomic, readonly) NBNavigationMode _Nonnull profileIdentifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NBRouteStepProgress;

/// <code>RouteLegProgress</code> stores the user’s progress along a route leg.
SWIFT_CLASS_NAMED("RouteLegProgress")
@interface NBRouteLegProgress : NSObject
/// Returns the current <code>RouteLeg</code>.
@property (nonatomic, readonly, strong) NBNavRouteLeg * _Nonnull leg;
/// Index representing the current step.
@property (nonatomic) NSInteger stepIndex;
@property (nonatomic) BOOL currentLegComplete;
/// The remaining steps for user to complete.
@property (nonatomic, readonly, copy) NSArray<NBRouteStep *> * _Nonnull remainingSteps;
/// Total distance traveled in meters along current leg.
@property (nonatomic, readonly) CLLocationDistance distanceTraveled;
/// Duration remaining in seconds on current leg.
@property (nonatomic, readonly) NSTimeInterval durationRemaining;
/// Distance remaining on the current leg.
@property (nonatomic, readonly) CLLocationDistance distanceRemaining;
/// Number between 0 and 1 representing how far along the current leg the user has traveled.
@property (nonatomic, readonly) double fractionTraveled;
@property (nonatomic) BOOL userHasArrivedAtWaypoint;
/// Returns the <code>RouteStep</code> before a given step. Returns <code>nil</code> if there is no step prior.
- (NBRouteStep * _Nullable)stepBefore:(NBRouteStep * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
/// Returns the <code>RouteStep</code> after a given step. Returns <code>nil</code> if there is not a step after.
- (NBRouteStep * _Nullable)stepAfter:(NBRouteStep * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
/// Returns the <code>RouteStep</code> before the current step.
/// If there is no <code>priorStep</code>, nil is returned.
@property (nonatomic, readonly, strong) NBRouteStep * _Nullable priorStep;
/// Returns the current <code>RouteStep</code> for the leg the user is on.
@property (nonatomic, readonly, strong) NBRouteStep * _Nonnull currentStep;
/// Returns the upcoming <code>RouteStep</code>.
/// If there is no <code>upcomingStep</code>, nil is returned.
@property (nonatomic, readonly, strong) NBRouteStep * _Nullable upComingStep;
/// Returns step 2 steps ahead.
/// If there is no <code>followOnStep</code>, nil is returned.
@property (nonatomic, readonly, strong) NBRouteStep * _Nullable followOnStep;
/// Return bool whether step provided is the current <code>RouteStep</code> the user is on.
- (BOOL)isCurrentStep:(NBRouteStep * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
/// Returns the progress along the current <code>RouteStep</code>.
@property (nonatomic, strong) NBRouteStepProgress * _Nonnull currentStepProgress;
/// Intializes a new <code>RouteLegProgress</code>.
/// \param leg Leg on a <code>Route</code>.
///
/// \param stepIndex Current step the user is on.
///
- (nonnull instancetype)initWithLeg:(NBNavRouteLeg * _Nonnull)leg stepIndex:(NSInteger)stepIndex spokenInstructionIndex:(NSInteger)spokenInstructionIndex OBJC_DESIGNATED_INITIALIZER;
/// Returns an array of <code>CLLocationCoordinate2D</code> of the prior, current and upcoming step geometry.
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nonnull nearbyCoordinates;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// <code>RouteProgress</code> stores the user’s progress along a route.
SWIFT_CLASS_NAMED("RouteProgress")
@interface NBRouteProgress : NSObject
/// Returns the current <code>Route</code>.
@property (nonatomic, readonly, strong) NBNavRoute * _Nonnull route;
/// Index representing current <code>RouteLeg</code>.
@property (nonatomic) NSInteger legIndex;
/// If waypoints are provided in the <code>Route</code>, this will contain which leg the user is on.
@property (nonatomic, readonly, strong) NBNavRouteLeg * _Nonnull currentLeg;
/// Total distance traveled by user along all legs.
@property (nonatomic, readonly) CLLocationDistance distanceTraveled;
/// Total seconds remaining on all legs.
@property (nonatomic, readonly) NSTimeInterval durationRemaining;
/// Number between 0 and 1 representing how far along the <code>Route</code> the user has traveled.
@property (nonatomic, readonly) double fractionTraveled;
/// Total distance remaining in meters along route.
@property (nonatomic, readonly) CLLocationDistance distanceRemaining;
/// Number of waypoints remaining on the current route.
@property (nonatomic, readonly, copy) NSArray<NBWaypoint *> * _Nonnull remainingWaypoints;
/// Number of waypoints remaining on the current route.
- (NSArray<NBWaypoint *> * _Nonnull)remainingWaypointsWithoutLegWithRemoveIndex:(NSInteger)removeIndex SWIFT_WARN_UNUSED_RESULT;
/// Returns the progress along the current <code>RouteLeg</code>.
@property (nonatomic, strong) NBRouteLegProgress * _Nonnull currentLegProgress;
/// Intializes a new <code>RouteProgress</code>.
/// \param route The route to follow.
///
/// \param legIndex Zero-based index indicating the current leg the user is on.
///
- (nonnull instancetype)initWithRoute:(NBNavRoute * _Nonnull)route legIndex:(NSInteger)legIndex stepIndex:(NSInteger)stepIndex spokenInstructionIndex:(NSInteger)spokenInstructionIndex OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// A <code>RouteShapeFormat</code> indicates the format of a route or match shape in the raw HTTP response.
typedef SWIFT_ENUM_NAMED(NSUInteger, NBRouteShapeFormat, "RouteShapeFormat", open) {
/// The route’s shape is delivered in <a href="http://geojson.org/">GeoJSON</a> format.
/// This standard format is human-readable and can be parsed straightforwardly, but it is far more verbose than <code>polyline</code>.
  NBRouteShapeFormatGeoJSON = 0,
/// The route’s shape is delivered in <a href="https://developers.google.com/maps/documentation/utilities/polylinealgorithm">encoded polyline algorithm</a> format with 1×10<sup>−5</sup> precision.
/// This machine-readable format is considerably more compact than <code>geoJSON</code> but less precise than <code>polyline6</code>.
  NBRouteShapeFormatPolyline = 1,
/// The route’s shape is delivered in <a href="https://developers.google.com/maps/documentation/utilities/polylinealgorithm">encoded polyline algorithm</a> format with 1×10<sup>−6</sup> precision.
/// This format is an order of magnitude more precise than <code>polyline</code>.
  NBRouteShapeFormatPolyline6 = 2,
};

/// A <code>RouteShapeResolution</code> indicates the level of detail in a route’s shape, or whether the shape is present at all.
typedef SWIFT_ENUM_NAMED(NSUInteger, NBRouteShapeResolution, "RouteShapeResolution", open) {
/// The route’s shape is omitted.
/// Specify this resolution if you do not intend to show the route line to the user or analyze the route line in any way.
  NBRouteShapeResolutionNone = 0,
/// The route’s shape is simplified.
/// This resolution considerably reduces the size of the response. The resulting shape is suitable for display at a low zoom level, but it lacks the detail necessary for focusing on individual segments of the route.
  NBRouteShapeResolutionLow = 1,
/// The route’s shape is as detailed as possible.
/// The resulting shape is equivalent to concatenating the shapes of all the route’s consitituent steps. You can focus on individual segments of this route while faithfully representing the path of the route. If you only intend to show a route overview and do not need to analyze the route line in any way, consider specifying <code>low</code> instead to considerably reduce the size of the response.
  NBRouteShapeResolutionFull = 2,
};

@class NBSpokenInstruction;
@class NBVisualInstructionBanner;
enum NBTransportType : NSInteger;

/// A <code>RouteStep</code> object represents a single distinct maneuver along a route and the approach to the next maneuver. The route step object corresponds to a single instruction the user must follow to complete a portion of the route. For example, a step might require the user to turn then follow a road.
/// You do not create instances of this class directly. Instead, you receive route step objects as part of route objects when you request directions using the <code>Directions.calculate(_:completionHandler:)</code> method, setting the <code>includesSteps</code> option to <code>true</code> in the <code>RouteOptions</code> object that you pass into that method.
SWIFT_CLASS_NAMED("RouteStep")
@interface NBRouteStep : NSObject <NSSecureCoding>
/// Initializes a new route step object based on the given JSON dictionary representation.
/// Normally, you do not create instances of this class directly. Instead, you receive route step objects as part of route objects when you request directions using the <code>Directions.calculateDirections(options:completionHandler:)</code> method, setting the <code>includesSteps</code> option to <code>true</code> in the <code>RouteOptions</code> object that you pass into that method.
/// \param json A JSON object that conforms to the <a href="https://www.nbmap.com/api-documentation/#routestep-object">route step</a> format described in the Directions API documentation.
///
- (nonnull instancetype)initWithJSON:(NSDictionary<NSString *, id> * _Nonnull)json options:(NBDirectionsOptions * _Nonnull)options;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// An array of geographic coordinates defining the path of the route step from the location of the maneuver to the location of the next step’s maneuver.
/// The value of this property may be <code>nil</code>, for example when the maneuver type is <code>arrive</code>.
/// Using the <a href="https://www.nbmap.com/ios-sdk/">Nbmap Maps SDK for iOS</a> or <a href="https://github.com/nbmap/nbmap-gl-native/tree/master/platform/macos/">Nbmap Maps SDK for macOS</a>, you can create an <code>NGLPolyline</code> object using these coordinates to display a portion of a route on an <code>NGLMapView</code>.
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nullable coordinates;
/// The number of coordinates.
/// The value of this property may be zero, for example when the maneuver type is <code>arrive</code>.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates.count</code> property.
@property (nonatomic, readonly) NSUInteger coordinateCount;
/// Retrieves the coordinates.
/// The array may be empty, for example when the maneuver type is <code>arrive</code>.
/// Using the <a href="https://www.nbmap.com/ios-sdk/">Nbmap Maps SDK for iOS</a> or <a href="https://github.com/nbmap/nbmap-gl-native/tree/master/platform/macos/">Nbmap Maps SDK for macOS</a>, you can create an <code>NGLPolyline</code> object using these coordinates to display a portion of a route on an <code>NGLMapView</code>.
/// precondition:
/// <code>coordinates</code> must be large enough to hold <code>coordinateCount</code> instances of <code>CLLocationCoordinate2D</code>.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates</code> property.
/// \param coordinates A pointer to a C array of <code>CLLocationCoordinate2D</code> instances. On output, this array contains all the vertices of the overlay.
///
///
/// returns:
/// True if the step has coordinates and <code>coordinates</code> has been populated, or false if the step has no coordinates and <code>coordinates</code> has not been modified.
- (BOOL)getCoordinates:(CLLocationCoordinate2D * _Nonnull)coordinates SWIFT_WARN_UNUSED_RESULT;
/// A string with instructions explaining how to perform the step’s maneuver.
/// You can display this string or read it aloud to the user. The string does not include the distance to or from the maneuver. For instructions optimized for real-time delivery during turn-by-turn navigation, set the <code>RouteOptions.includesSpokenInstructions</code> option and use the <code>instructionsSpokenAlongStep</code> property. If you need customized instructions, you can construct them yourself from the step’s other properties or use <a href="https://github.com/Project-OSRM/osrm-text-instructions.swift/">OSRM Text Instructions</a>.
/// note:
/// If you use NbmapDirections.swift with the Nbmap Directions API, this property is formatted and localized for display to the user. If you use OSRM directly, this property contains a basic string that only includes the maneuver type and direction. Use <a href="https://github.com/Project-OSRM/osrm-text-instructions.swift/">OSRM Text Instructions</a> to construct a complete, localized instruction string for display.
@property (nonatomic, readonly, copy) NSString * _Nonnull instructions;
@property (nonatomic, readonly, copy) NSString * _Nullable displayInstruction;
/// Instructions about the next step’s maneuver, optimized for speech synthesis.
/// As the user traverses this step, you can give them advance notice of the upcoming maneuver by reading aloud each item in this array in order as the user reaches the specified distances along this step. The text of the spoken instructions refers to the details in the next step, but the distances are measured from the beginning of this step.
/// This property is non-<code>nil</code> if the <code>RouteOptions.includesSpokenInstructions</code> option is set to <code>true</code>. For instructions designed for display, use the <code>instructions</code> property.
@property (nonatomic, copy) NSArray<NBSpokenInstruction *> * _Nullable instructionsSpokenAlongStep;
/// Instructions about the next step’s maneuver, optimized for display in real time.
/// As the user traverses this step, you can give them advance notice of the upcoming maneuver by displaying each item in this array in order as the user reaches the specified distances along this step. The text and images of the visual instructions refer to the details in the next step, but the distances are measured from the beginning of this step.
/// This property is non-<code>nil</code> if the <code>RouteOptions.includesVisualInstructions</code> option is set to <code>true</code>. For instructions designed for speech synthesis, use the <code>instructionsSpokenAlongStep</code> property. For instructions designed for display in a static list, use the <code>instructions</code> property.
@property (nonatomic, copy) NSArray<NBVisualInstructionBanner *> * _Nullable instructionsDisplayedAlongStep;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The type of maneuver required for beginning this step.
@property (nonatomic, readonly) enum NBManeuverType maneuverType;
/// Additional directional information to clarify the maneuver type.
@property (nonatomic, readonly) enum NBManeuverDirection maneuverDirection;
/// The location of the maneuver at the beginning of this step.
@property (nonatomic, readonly) CLLocationCoordinate2D maneuverLocation;
/// Any <a href="https://en.wikipedia.org/wiki/Exit_number">exit numbers</a> assigned to the highway exit at the maneuver.
/// This property is only set when the <code>maneuverType</code> is <code>ManeuverType.takeOffRamp</code>. For the number of exits from the previous maneuver, regardless of the highway’s exit numbering scheme, use the <code>exitIndex</code> property. For the route reference codes associated with the connecting road, use the <code>destinationCodes</code> property. For the names associated with a roundabout exit, use the <code>exitNames</code> property.
/// An exit number is an alphanumeric identifier posted at or ahead of a highway off-ramp. Exit numbers may increase or decrease sequentially along a road, or they may correspond to distances from either end of the road. An alphabetic suffix may appear when multiple exits are located in the same interchange. If multiple exits are <a href="https://en.wikipedia.org/wiki/Local-express_lanes#Example_of_cloverleaf_interchanges">combined into a single exit</a>, the step may have multiple exit codes.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable exitCodes;
/// The names of the roundabout exit.
/// This property is only set for roundabout (traffic circle or rotary) maneuvers. For the signposted names associated with a highway exit, use the <code>destinations</code> property. For the signposted exit numbers, use the <code>exitCodes</code> property.
/// If you display a name to the user, you may need to abbreviate common words like “East” or “Boulevard” to ensure that it fits in the allotted space.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable exitNames;
/// A phonetic or phonemic transcription indicating how to pronounce the names in the <code>exitNames</code> property.
/// This property is only set for roundabout (traffic circle or rotary) maneuvers.
/// The transcription is written in the <a href="https://en.wikipedia.org/wiki/International_Phonetic_Alphabet">International Phonetic Alphabet</a>.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable phoneticExitNames;
/// The step’s distance, measured in meters.
/// The value of this property accounts for the distance that the user must travel to go from this step’s maneuver location to the next step’s maneuver location. It is not the sum of the direct distances between the route’s waypoints, nor should you assume that the user would travel along this distance at a fixed speed.
@property (nonatomic, readonly) CLLocationDistance distance;
/// The step’s expected travel time, measured in seconds.
/// The value of this property reflects the time it takes to go from this step’s maneuver location to the next step’s maneuver location. If the route was calculated using the <code>NBNavigationMode</code> profile, this property reflects current traffic conditions at the time of the request, not necessarily the traffic conditions at the time the user would begin this step. For other profiles, this property reflects travel time under ideal conditions and does not account for traffic congestion. If the step makes use of a ferry or train, the actual travel time may additionally be subject to the schedules of those services.
/// Do not assume that the user would travel along the step at a fixed speed. For the expected travel time on each individual segment along the leg, specify the <code>AttributeOptions.expectedTravelTime</code> option and use the <code>RouteLeg.expectedSegmentTravelTimes</code> property.
@property (nonatomic, readonly) NSTimeInterval expectedTravelTime;
/// The names of the road or path leading from this step’s maneuver to the next step’s maneuver.
/// If the maneuver is a turning maneuver, the step’s names are the name of the road or path onto which the user turns. If you display a name to the user, you may need to abbreviate common words like “East” or “Boulevard” to ensure that it fits in the allotted space.
/// If the maneuver is a roundabout maneuver, the outlet to take is named in the <code>exitNames</code> property; the <code>names</code> property is only set for large roundabouts that have their own names.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable names;
/// A phonetic or phonemic transcription indicating how to pronounce the names in the <code>names</code> property.
/// The transcription is written in the <a href="https://en.wikipedia.org/wiki/International_Phonetic_Alphabet">International Phonetic Alphabet</a>.
/// If the maneuver traverses a large, named roundabout, the <code>exitPronunciationHints</code> property contains a hint about how to pronounce the names of the outlet to take.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable phoneticNames;
/// Any route reference codes assigned to the road or path leading from this step’s maneuver to the next step’s maneuver.
/// A route reference code commonly consists of an alphabetic network code, a space or hyphen, and a route number. You should not assume that the network code is globally unique: for example, a network code of “NH” may indicate a “National Highway” or “New Hampshire”. Moreover, a route number may not even uniquely identify a route within a given network.
/// If a highway ramp is part of a numbered route, its reference code is contained in this property. On the other hand, guide signage for a highway ramp usually indicates route reference codes of the adjoining road; use the <code>destinationCodes</code> property for those route reference codes.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable codes;
/// The mode of transportation used for the step.
/// This step may use a different mode of transportation than the overall route.
@property (nonatomic, readonly) enum NBTransportType transportType;
/// Any route reference codes that appear on guide signage for the road leading from this step’s maneuver to the next step’s maneuver.
/// This property is typically available in steps leading to or from a freeway or expressway. This property contains route reference codes associated with a road later in the route. If a highway ramp is itself part of a numbered route, its reference code is contained in the <code>codes</code> property. For the signposted exit numbers associated with a highway exit, use the <code>exitCodes</code> property.
/// A route reference code commonly consists of an alphabetic network code, a space or hyphen, and a route number. You should not assume that the network code is globally unique: for example, a network code of “NH” may indicate a “National Highway” or “New Hampshire”. Moreover, a route number may not even uniquely identify a route within a given network. A destination code for a divided road is often suffixed with the cardinal direction of travel, for example “I 80 East”.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable destinationCodes;
/// Destinations, such as <a href="https://en.wikipedia.org/wiki/Control_city">control cities</a>, that appear on guide signage for the road leading from this step’s maneuver to the next step’s maneuver.
/// This property is typically available in steps leading to or from a freeway or expressway.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable destinations;
/// An array of intersections along the step.
/// Each item in the array corresponds to a cross street, starting with the intersection at the maneuver location indicated by the coordinates property and continuing with each cross street along the step.
@property (nonatomic, readonly, copy) NSArray<NBIntersection *> * _Nullable intersections;
@property (nonatomic, readonly, copy) NSURL * _Nullable shiledImageUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable shiledLabel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// <code>RouteStepProgress</code> stores the user’s progress along a route step.
SWIFT_CLASS_NAMED("RouteStepProgress")
@interface NBRouteStepProgress : NSObject
/// Returns the current <code>RouteStep</code>.
@property (nonatomic, readonly, strong) NBRouteStep * _Nonnull step;
/// Returns distance user has traveled along current step.
@property (nonatomic) CLLocationDistance distanceTraveled;
/// Returns distance from user to end of step.
@property (nonatomic) CLLocationDistance userDistanceToManeuverLocation;
/// Total distance in meters remaining on current step.
@property (nonatomic, readonly) CLLocationDistance distanceRemaining;
/// Number between 0 and 1 representing fraction of current step traveled.
@property (nonatomic, readonly) double fractionTraveled;
/// Number of seconds remaining on current step.
@property (nonatomic, readonly) NSTimeInterval durationRemaining;
/// Intializes a new <code>RouteStepProgress</code>.
/// \param step Step on a <code>RouteLeg</code>.
///
- (nonnull instancetype)initWithStep:(NBRouteStep * _Nonnull)step spokenInstructionIndex:(NSInteger)spokenInstructionIndex OBJC_DESIGNATED_INITIALIZER;
/// All intersections on the current <code>RouteStep</code> and also the first intersection on the upcoming <code>RouteStep</code>.
/// The upcoming <code>RouteStep</code> first <code>Intersection</code> is added because it is omitted from the current step.
@property (nonatomic, copy) NSArray<NBIntersection *> * _Nullable intersectionsIncludingUpcomingManeuverIntersection;
/// The next intersection the user will travel through.
/// The step must contain <code>intersectionsIncludingUpcomingManeuverIntersection</code> otherwise this property will be <code>nil</code>.
@property (nonatomic, readonly, strong) NBIntersection * _Nullable upcomingIntersection;
/// Index representing the current intersection.
@property (nonatomic) NSInteger intersectionIndex;
/// The current intersection the user will travel through.
/// The step must contain <code>intersectionsIncludingUpcomingManeuverIntersection</code> otherwise this property will be <code>nil</code>.
@property (nonatomic, readonly, strong) NBIntersection * _Nullable currentIntersection;
/// Returns an array of the calculated distances from the current intersection to the next intersection on the current step.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable intersectionDistances;
/// Index into <code>step.instructionsDisplayedAlongStep</code> representing the current visual instruction for the step.
@property (nonatomic) NSInteger visualInstructionIndex;
/// An <code>Array</code> of remaining <code>VisualInstruction</code> for a step.
@property (nonatomic, readonly, copy) NSArray<NBVisualInstructionBanner *> * _Nullable remainingVisualInstructions;
/// Index into <code>step.instructionsSpokenAlongStep</code> representing the current spoken instruction.
@property (nonatomic) NSInteger spokenInstructionIndex;
/// An <code>Array</code> of remaining <code>SpokenInstruction</code> for a step.
@property (nonatomic, readonly, copy) NSArray<NBSpokenInstruction *> * _Nullable remainingSpokenInstructions;
/// Current spoken instruction for the user’s progress along a step.
@property (nonatomic, readonly, strong) NBSpokenInstruction * _Nullable currentSpokenInstruction;
/// Current visual instruction for the user’s progress along a step.
@property (nonatomic, readonly, strong) NBVisualInstructionBanner * _Nullable currentVisualInstruction;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>SimulatedLocationManager</code> class simulates location updates along a given route.
/// The route will be replaced upon a <code>RouteControllerDidReroute</code> notification.
/// The manager calls delegate methods on a background thread.
SWIFT_CLASS("_TtC19NbmapCoreNavigation24SimulatedLocationManager")
@interface SimulatedLocationManager : NBNavigationLocationManager
@property (nonatomic, strong) CLLocation * _Nullable location;
- (void)startUpdatingLocation;
- (void)stopUpdatingLocation;
- (id _Nonnull)copy SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The <code>SimulatedLocationModelManager</code> class simulates location updates along a given route. only for simulation navigation
/// The route will be replaced upon a <code>RouteControllerDidReroute</code> notification.
/// The manager calls delegate methods on a background thread.
SWIFT_CLASS("_TtC19NbmapCoreNavigation29SimulatedLocationModelManager")
@interface SimulatedLocationModelManager : NBNavigationLocationManager
@property (nonatomic, strong) CLLocation * _Nullable location;
- (void)startUpdatingLocation;
- (void)stopUpdatingLocation;
- (id _Nonnull)copy SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An instruction about an upcoming <code>RouteStep</code>’s maneuver, optimized for speech synthesis.
/// The instruction is provided in two formats: plain text and text marked up according to the <a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language">Speech Synthesis Markup Language</a> (SSML). Use a speech synthesizer such as <code>AVSpeechSynthesizer</code> or Amazon Polly to read aloud the instruction.
/// The <code>distanceAlongStep</code> property is measured from the beginning of the step associated with this object. By contrast, the <code>text</code> and <code>ssmlText</code> properties refer to the details in the following step. It is also possible for the instruction to refer to two following steps simultaneously when needed for safe navigation.
SWIFT_CLASS_NAMED("SpokenInstruction")
@interface NBSpokenInstruction : NSObject <NSSecureCoding>
/// A distance along the associated <code>RouteStep</code> at which to read the instruction aloud.
/// The distance is measured in meters from the beginning of the associated step.
@property (nonatomic, readonly) CLLocationDistance distanceAlongStep;
/// A plain-text representation of the speech-optimized instruction.
/// This representation is appropriate for speech synthesizers that lack support for the <a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language">Speech Synthesis Markup Language</a> (SSML), such as <code>AVSpeechSynthesizer</code>. For speech synthesizers that support SSML, use the <code>ssmlText</code> property instead.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// A formatted representation of the speech-optimized instruction.
/// This representation is appropriate for speech synthesizers that support the <a href="https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language">Speech Synthesis Markup Language</a> (SSML), such as <a href="https://aws.amazon.com/polly/">Amazon Polly</a>. Numbers and names are marked up to ensure correct pronunciation. For speech synthesizers that lack SSML support, use the <code>text</code> property instead.
@property (nonatomic, readonly, copy) NSString * _Nullable ssmlText;
/// A distance along the associated <code>RouteStep</code> at which to read the instruction aloud.
/// The distance is measured in meters from the beginning of the associated step.
@property (nonatomic, readonly, strong) NSUnitLength * _Nullable unit;
/// Initializes a new spoken instruction object based on the given JSON dictionary representation.
/// \param json A JSON object that conforms to the [voice instruction] format described in the Navigation API documentation.
///
- (nonnull instancetype)initWithJSON:(NSDictionary<NSString *, id> * _Nonnull)json;
/// Initialize a <code>SpokenInstruction</code>.
/// \param distanceAlongStep A distance along the associated <code>RouteStep</code> at which to read the instruction aloud.
///
/// \param text A plain-text representation of the speech-optimized instruction.
///
/// \param ssmlText A formatted representation of the speech-optimized instruction.
///
- (nonnull instancetype)initWithDistanceAlongStep:(CLLocationDistance)distanceAlongStep text:(NSString * _Nonnull)text ssmlText:(NSString * _Nullable)ssmlText unit:(NSUnitLength * _Nullable)unit OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>Waypoint</code> object indicates a location along a route. It may be the route’s origin or destination, or it may be another location that the route visits. A waypoint object indicates the location’s geographic location along with other optional information, such as a name or the user’s direction approaching the waypoint. You create a <code>RouteOptions</code> object using waypoint objects and also receive waypoint objects in the completion handler of the <code>Directions.calculate(_:completionHandler:)</code> method.
SWIFT_CLASS_NAMED("Waypoint")
@interface NBWaypoint : NSObject <NSCopying, NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// Initializes a new waypoint object with the given geographic coordinate and an optional accuracy and name.
/// \param coordinate The geographic coordinate of the waypoint.
///
/// \param coordinateAccuracy The maximum distance away from the waypoint that the route may come and still be considered viable. This parameter is measured in meters. A negative value means the route may be an indefinite number of meters away from the route and still be considered viable.
/// It is recommended that the value of this parameter be greater than the <code>horizontalAccuracy</code> property of a <code>CLLocation</code> object obtained from a <code>CLLocationManager</code> object. There is a high likelihood that the user may be located some distance away from a navigable road, for instance if the user is currently on a driveway or inside a building.
///
/// \param name The name of the waypoint. This parameter does not affect the route but may help you to distinguish one waypoint from another.
///
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate coordinateAccuracy:(CLLocationAccuracy)coordinateAccuracy name:(NSString * _Nullable)name OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new waypoint object with the given <code>CLLocation</code> object and an optional <code>CLHeading</code> object and name.
/// note:
/// This initializer is intended for <code>CLLocation</code> objects created using the <code>CLLocation.init(latitude:longitude:)</code> initializer. If you intend to use a <code>CLLocation</code> object obtained from a <code>CLLocationManager</code> object, consider increasing the <code>horizontalAccuracy</code> or set it to a negative value to avoid overfitting, since the <code>Waypoint</code> class’s <code>coordinateAccuracy</code> property represents the maximum allowed deviation from the waypoint. There is a high likelihood that the user may be located some distance away from a navigable road, for instance if the user is currently on a driveway of inside a building.
/// \param location A <code>CLLocation</code> object representing the waypoint’s location. This initializer respects the <code>CLLocation</code> class’s <code>coordinate</code> and <code>horizontalAccuracy</code> properties, converting them into the <code>coordinate</code> and <code>coordinateAccuracy</code> properties, respectively.
///
/// \param heading A <code>CLHeading</code> object representing the direction from which the route must approach the waypoint in order to be considered viable. This initializer respects the <code>CLHeading</code> class’s <code>trueHeading</code> property or <code>magneticHeading</code> property, converting it into the <code>headingAccuracy</code> property.
///
/// \param name The name of the waypoint. This parameter does not affect the route but may help you to distinguish one waypoint from another.
///
- (nonnull instancetype)initWithLocation:(CLLocation * _Nonnull)location heading:(CLHeading * _Nullable)heading name:(NSString * _Nullable)name OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// The geographic coordinate of the waypoint.
@property (nonatomic, readonly) CLLocationCoordinate2D coordinate;
/// The radius of uncertainty for the waypoint, measured in meters.
/// For a route to be considered viable, it must enter this waypoint’s circle of uncertainty. The <code>coordinate</code> property identifies the center of the circle, while this property indicates the circle’s radius. If the value of this property is negative, a route is considered viable regardless of whether it enters this waypoint’s circle of uncertainty, subject to an undefined maximum distance.
/// By default, the value of this property is a negative number.
@property (nonatomic) CLLocationAccuracy coordinateAccuracy;
/// The direction from which a route must approach this waypoint in order to be considered viable.
/// This property is measured in degrees clockwise from true north. A value of 0 degrees means due north, 90 degrees means due east, 180 degrees means due south, and so on. If the value of this property is negative, a route is considered viable regardless of the direction from which it approaches this waypoint.
/// If this waypoint is the first waypoint (the source waypoint), the route must start out by heading in the direction specified by this property. You should always set the <code>headingAccuracy</code> property in conjunction with this property. If the <code>headingAccuracy</code> property is set to a negative value, this property is ignored.
/// For driving directions, this property can be useful for avoiding a route that begins by going in the direction opposite the current direction of travel. For example, if you know the user is moving eastwardly and the first waypoint is the user’s current location, specifying a heading of 90 degrees and a heading accuracy of 90 degrees for the first waypoint avoids a route that begins with a “head west” instruction.
/// You should be certain that the user is in motion before specifying a heading and heading accuracy; otherwise, you may be unnecessarily filtering out the best route. For example, suppose the user is sitting in a car parked in a driveway, facing due north, with the garage in front and the street to the rear. In that case, specifying a heading of 0 degrees and a heading accuracy of 90 degrees may result in a route that begins on the back alley or, worse, no route at all. For this reason, it is recommended that you only specify a heading and heading accuracy when automatically recalculating directions due to the user deviating from the route.
/// By default, the value of this property is a negative number, meaning that a route is considered viable regardless of the direction of approach.
@property (nonatomic) CLLocationDirection heading;
/// The maximum amount, in degrees, by which a route’s approach to a waypoint may differ from <code>heading</code> in either direction in order to be considered viable.
/// A value of 0 degrees means that the approach must match the specified <code>heading</code> exactly – an unlikely scenario. A value of 180 degrees or more means that the approach may be as much as 180 degrees in either direction from the specified <code>heading</code>, effectively allowing a candidate route to approach the waypoint from any direction.
/// If you set the <code>heading</code> property, you should set this property to a value such as 90 degrees, to avoid filtering out routes whose approaches differ only slightly from the specified <code>heading</code>. Otherwise, if the <code>heading</code> property is set to a negative value, this property is ignored.
/// By default, the value of this property is a negative number, meaning that a route is considered viable regardless of the direction of approach.
@property (nonatomic) CLLocationDirection headingAccuracy;
/// The name of the waypoint.
/// This parameter does not affect the route, but you can set the name of a waypoint you pass into a <code>RouteOptions</code> object to help you distinguish one waypoint from another in the array of waypoints passed into the completion handler of the <code>Directions.calculate(_:completionHandler:)</code> method.
@property (nonatomic, copy) NSString * _Nullable name;
/// A boolean value indicating whether arriving on opposite side is allowed.
/// This property has no effect if <code>RouteOptions.includesSteps</code> is set to <code>false</code>.
@property (nonatomic) BOOL allowsArrivingOnOppositeSide;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull latLngString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <code>Tracepoint</code> represents a location matched to the road network.
SWIFT_CLASS_NAMED("Tracepoint")
@interface NBTracepoint : NBWaypoint
/// Number of probable alternative matchings for this tracepoint. A value of zero indicates that this point was matched unambiguously.
@property (nonatomic) NSInteger alternateCount;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate coordinateAccuracy:(CLLocationAccuracy)coordinateAccuracy name:(NSString * _Nullable)name SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithLocation:(CLLocation * _Nonnull)location heading:(CLHeading * _Nullable)heading name:(NSString * _Nullable)name SWIFT_UNAVAILABLE;
@end

/// A <code>TransportType</code> specifies the mode of transportation used for part of a route.
typedef SWIFT_ENUM_NAMED(NSInteger, NBTransportType, "TransportType", open) {
/// The step does not have a particular transport type associated with it.
/// This transport type is used as a workaround for bridging to Objective-C which does not support nullable enumeration-typed values.
  NBTransportTypeNone = 0,
/// The route requires the user to drive or ride a car, truck, or motorcycle.
/// This is the usual transport type when the <code>profileIdentifier</code> is <code>NBDirectionsProfileIdentifierAutomobile</code> or <code>NBDirectionsProfileIdentifierAutomobileAvoidingTraffic</code>.
  NBTransportTypeAutomobile = 1,
/// The route requires the user to board a ferry.
/// The user should verify that the ferry is in operation. For driving and cycling directions, the user should also verify that his or her vehicle is permitted onboard the ferry.
  NBTransportTypeFerry = 2,
/// The route requires the user to cross a movable bridge.
/// The user may need to wait for the movable bridge to become passable before continuing.
  NBTransportTypeMovableBridge = 3,
/// The route becomes impassable at this point.
/// You should not encounter this transport type under normal circumstances.
  NBTransportTypeInaccessible = 4,
/// The route requires the user to walk.
/// This is the usual transport type when the <code>profileIdentifier</code> is <code>NBDirectionsProfileIdentifierWalking</code>. For cycling directions, this value indicates that the user is expected to dismount.
  NBTransportTypeWalking = 5,
/// The route requires the user to ride a bicycle.
/// This is the usual transport type when the <code>profileIdentifier</code> is <code>NBDirectionsProfileIdentifierCycling</code>.
  NBTransportTypeCycling = 6,
/// The route requires the user to board a train.
/// The user should consult the train’s timetable. For cycling directions, the user should also verify that bicycles are permitted onboard the train.
  NBTransportTypeTrain = 7,
};


SWIFT_CLASS("_TtC19NbmapCoreNavigation20TravelledRawLocation")
@interface TravelledRawLocation : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol NBTunnelIntersectionManagerDelegate;

SWIFT_CLASS_NAMED("TunnelIntersectionManager")
@interface NBTunnelIntersectionManager : NSObject
/// The associated delegate for tunnel intersection manager.
@property (nonatomic, weak) id <NBTunnelIntersectionManagerDelegate> _Nullable delegate;
/// The simulated location manager dedicated to tunnel simulated navigation.
@property (nonatomic, strong) SimulatedLocationManager * _Nullable animatedLocationManager;
/// An array of bad location updates recorded upon exit of a tunnel.
@property (nonatomic, copy) NSArray<CLLocation *> * _Nonnull tunnelExitLocations;
/// Flag indicating whether the user is animated through tunnels.
@property (nonatomic) BOOL tunnelSimulationEnabled;
/// Given a user’s current location and the route progress,
/// detects whether the upcoming intersection contains a tunnel road class, and
/// returns a Boolean whether they are within the minimum radius of a tunnel entrance.
- (BOOL)userWithinTunnelEntranceRadiusAt:(CLLocation * _Nonnull)location routeProgress:(NBRouteProgress * _Nonnull)routeProgress SWIFT_WARN_UNUSED_RESULT;
- (void)enableTunnelAnimationWithRouteController:(RouteController * _Nonnull)routeController routeProgress:(NBRouteProgress * _Nonnull)routeProgress;
- (void)suspendTunnelAnimationAt:(CLLocation * _Nonnull)location routeController:(RouteController * _Nonnull)routeController;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>TunnelIntersectionManagerDelegate</code> protocol provides methods for responding to events where a user enters or exits a tunnel.
SWIFT_PROTOCOL_NAMED("TunnelIntersectionManagerDelegate")
@protocol NBTunnelIntersectionManagerDelegate
@optional
/// Called immediately when the location manager detects a user will enter a tunnel.
/// \param manager The <code>TunnelIntersectionManager</code> that currently sends the location updates.
///
/// \param location The user’s current location where the tunnel was detected.
///
- (void)tunnelIntersectionManager:(NBTunnelIntersectionManager * _Nonnull)manager willEnableAnimationAtLocation:(CLLocation * _Nonnull)location;
/// Called immediately when the location manager detects the user will exit a tunnel.
/// \param manager The <code>TunnelIntersectionManager</code> that currently sends the location updates.
///
/// \param location The user’s current location where the tunnel was detected.
///
- (void)tunnelIntersectionManager:(NBTunnelIntersectionManager * _Nonnull)manager willDisableAnimationAtLocation:(CLLocation * _Nonnull)location;
@end


@interface UIDevice (SWIFT_EXTENSION(NbmapCoreNavigation))
/// Returns a <code>Bool</code> whether the device is plugged in. Returns false if not an iOS device.
@property (nonatomic, readonly) BOOL isPluggedIn;
@end





/// The contents of a banner that should be displayed as added visual guidance for a route. The banner instructions are children of the steps during which they should be displayed, but they refer to the maneuver in the following step.
SWIFT_CLASS_NAMED("VisualInstruction")
@interface NBVisualInstruction : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
/// A plain text representation of the instruction.
@property (nonatomic, readonly, copy) NSString * _Nullable text;
/// A plain text representation of the instruction.
@property (nonatomic, readonly, copy) NSString * _Nullable instruction;
/// The type of maneuver required for beginning the step described by the visual instruction.
@property (nonatomic) enum NBManeuverType maneuverType;
/// Additional directional information to clarify the maneuver type.
@property (nonatomic) enum NBManeuverDirection maneuverDirection;
/// A structured representation of the instruction.
@property (nonatomic, readonly, copy) NSArray<id <NBComponentRepresentable>> * _Nonnull components;
/// The heading at which the user exits a roundabout (traffic circle or rotary).
/// This property is measured in degrees clockwise relative to the user’s initial heading. A value of 180° means continuing through the roundabout without changing course, whereas a value of 0° means traversing the entire roundabout back to the entry point.
/// This property is only relevant if the <code>maneuverType</code> is any of the following values: <code>ManeuverType.takeRoundabout</code>, <code>ManeuverType.takeRotary</code>, <code>ManeuverType.turnAtRoundabout</code>, <code>ManeuverType.exitRoundabout</code>, or <code>ManeuverType.exitRotary</code>.
@property (nonatomic) CLLocationDegrees finalHeading;
/// Initializes a new visual instruction banner object that displays the given information.
- (nonnull instancetype)initWithText:(NSString * _Nullable)text instruction:(NSString * _Nullable)instruction maneuverType:(enum NBManeuverType)maneuverType maneuverDirection:(enum NBManeuverDirection)maneuverDirection components:(NSArray<id <NBComponentRepresentable>> * _Nonnull)components degrees:(CLLocationDegrees)degrees OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new visual instruction object based on the given JSON dictionary representation.
/// \param json A JSON object that conforms to the [banner instruction] format described in the Directions API documentation.
///
- (nonnull instancetype)initWithJSON:(NSDictionary<NSString *, id> * _Nonnull)json;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A visual instruction banner contains all the information necessary for creating a visual cue about a given <code>RouteStep</code>.
SWIFT_CLASS_NAMED("VisualInstructionBanner")
@interface NBVisualInstructionBanner : NSObject <NSSecureCoding>
/// The distance at which the visual instruction should be shown, measured in meters from the beginning of the step.
@property (nonatomic, readonly) CLLocationDistance distanceAlongStep;
/// The most important information to convey to the user about the <code>RouteStep</code>.
@property (nonatomic, readonly, strong) NBVisualInstruction * _Nonnull primaryInstruction;
/// Less important details about the <code>RouteStep</code>.
@property (nonatomic, readonly, strong) NBVisualInstruction * _Nullable secondaryInstruction;
/// A visual instruction that is presented simultaneously to provide information about an additional maneuver that occurs in rapid succession.
/// This instruction could either contain the visual layout information or the lane information about the upcoming maneuver.
@property (nonatomic, readonly, strong) NBVisualInstruction * _Nullable tertiaryInstruction;
/// Which side of a bidirectional road the driver should drive on, also known as the rule of the road. By default it will set as <code>DrivingSide.right'</code>  if in the <code>RouteStep</code> not parse the driving side successfully
@property (nonatomic) enum NBDrivingSide drivingSide;
/// Initializes a new visual instruction banner object based on the given JSON dictionary representation and a driving side.
/// \param json A JSON object that conforms to the [primary or secondary banner] format described in the Directions API documentation.
///
/// \param drivingSide The side of the road the user should drive on. This value should be consistent with the containing route step.
///
- (nonnull instancetype)initWithJSON:(NSDictionary<NSString *, id> * _Nonnull)json drivingSide:(enum NBDrivingSide)drivingSide;
/// Initializes a new visual instruction banner object that displays the given information.
/// \param distanceAlongStep The distance at which the visual instruction should be shown, measured in meters from the beginning of the step.
///
/// \param primaryInstruction The most important information to convey to the user about the <code>RouteStep</code>.
///
/// \param secondaryInstruction Less important details about the <code>RouteStep</code>.
///
/// \param drivingSide Which side of a bidirectional road the driver should drive on.
///
- (nonnull instancetype)initWithDistanceAlongStep:(CLLocationDistance)distanceAlongStep primaryInstruction:(NBVisualInstruction * _Nonnull)primaryInstruction secondaryInstruction:(NBVisualInstruction * _Nullable)secondaryInstruction tertiaryInstruction:(NBVisualInstruction * _Nullable)tertiaryInstruction drivingSide:(enum NBDrivingSide)drivingSide OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum NBVisualInstructionComponentType : NSInteger;

/// A component of a <code>VisualInstruction</code> that represents a single run of similarly formatted text or an image with a textual fallback representation.
SWIFT_CLASS_NAMED("VisualInstructionComponent")
@interface NBVisualInstructionComponent : NSObject <NBComponentRepresentable>
/// The URL to an image representation of this component.
/// The URL refers to an image that uses the device’s native screen scale.
@property (nonatomic, copy) NSURL * _Nullable imageURL;
/// The lable to an image representation of this component.
/// The  string refers to an image that uses the device’s native screen scale.
@property (nonatomic, copy) NSString * _Nullable label;
/// An abbreviated representation of the <code>text</code> property.
@property (nonatomic, copy) NSString * _Nullable abbreviation;
/// The priority for which the component should be abbreviated.
/// A component with a lower abbreviation priority value should be abbreviated before a component with a higher abbreviation priority value.
@property (nonatomic) NSInteger abbreviationPriority;
/// The plain text representation of this component.
/// Use this property if <code>imageURL</code> is <code>nil</code> or if the URL contained in that property is not yet available.
@property (nonatomic, copy) NSString * _Nullable text;
/// The type of visual instruction component. You can display the component differently depending on its type.
@property (nonatomic) enum NBVisualInstructionComponentType type;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupportsSecureCoding:(BOOL)value;
/// Initializes a new visual instruction component object based on the given JSON dictionary representation.
/// \param json A JSON object that conforms to the [banner component] format described in the Directions API documentation.
///
- (nonnull instancetype)initWithJSON:(NSDictionary<NSString *, id> * _Nonnull)json;
/// Initializes a new visual instruction component object that displays the given information.
/// \param type The type of visual instruction component.
///
/// \param text The plain text representation of this component.
///
/// \param imageURL The URL to an image representation of this component.
///
/// \param label The label to an image representation of this component.
///
/// \param abbreviation An abbreviated representation of <code>text</code>.
///
/// \param abbreviationPriority The priority for which the component should be abbreviated.
///
- (nonnull instancetype)initWithType:(enum NBVisualInstructionComponentType)type text:(NSString * _Nullable)text imageURL:(NSURL * _Nullable)imageURL label:(NSString * _Nullable)label abbreviation:(NSString * _Nullable)abbreviation abbreviationPriority:(NSInteger)abbreviationPriority OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>VisualInstructionComponentType</code> describes the type of <code>VisualInstructionComponent</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, NBVisualInstructionComponentType, "VisualInstructionComponentType", open) {
/// The component separates two other destination components.
/// If the two adjacent components are both displayed as images, you can hide this delimiter component.
  NBVisualInstructionComponentTypeDelimiter = 0,
/// The component bears the name of a place or street.
  NBVisualInstructionComponentTypeText = 1,
/// Component contains an image that should be rendered.
  NBVisualInstructionComponentTypeImage = 2,
/// The compoment contains the localized word for “exit”.
/// This component may appear before or after an <code>.exitNumber</code> component, depending on the language.
  NBVisualInstructionComponentTypeExit = 3,
/// A component contains an exit number.
  NBVisualInstructionComponentTypeExitCode = 4,
};



#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
