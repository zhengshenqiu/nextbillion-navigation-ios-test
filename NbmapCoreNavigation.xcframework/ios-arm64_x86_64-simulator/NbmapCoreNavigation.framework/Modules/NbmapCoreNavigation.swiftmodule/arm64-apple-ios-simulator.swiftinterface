// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NbmapCoreNavigation
import AVFoundation
import CarPlay
import CommonCrypto
import CoreLocation
import CoreMotion
import Darwin
import Dispatch
import Foundation
import MapKit
import Nbmap
@_exported import NbmapCoreNavigation
import OSLog
import Swift
import Turf
import UIKit.UIDevice
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.activity
import os.log
import os
@objc(NBVisualInstructionComponentType) public enum VisualInstructionComponentType : Swift.Int, Swift.CustomStringConvertible {
  case delimiter
  case text
  case image
  case exit
  case exitCode
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class B3Propagator : NbmapCoreNavigation.TextMapPropagator {
  final public let fields: Swift.Set<Swift.String>
  public init()
  public init(_ singleHeaderInjection: Swift.Bool)
  public func inject<S>(spanContext: NbmapCoreNavigation.SpanContext, carrier: inout [Swift.String : Swift.String], setter: S) where S : NbmapCoreNavigation.Setter
  public func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> NbmapCoreNavigation.SpanContext? where G : NbmapCoreNavigation.Getter
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultLogger : NbmapCoreNavigation.Logger {
  public func eventBuilder(name: Swift.String) -> any NbmapCoreNavigation.EventBuilder
  public func logRecordBuilder() -> any NbmapCoreNavigation.LogRecordBuilder
  @objc deinit
}
@_hasMissingDesignatedInitializers open class ConfigurationApiFetcher {
  public func fetchNBConfiguration(completionHandler: @escaping (_ configurationResponse: NbmapCoreNavigation.ConfigurationResponse) -> Swift.Void, errorHandler: @escaping (_ configurationResponse: NbmapCoreNavigation.ConfigurationResponse, _ error: Foundation.NSError) -> Swift.Void, apiNotInvokedHandler: @escaping (_ configurationResponse: NbmapCoreNavigation.ConfigurationResponse) -> Swift.Void)
  @objc deinit
}
public class SimpleLogRecordProcessor : NbmapCoreNavigation.LogRecordProcessor {
  public init(logRecordExporter: any NbmapCoreNavigation.LogRecordExporter)
  public func onEmit(logRecord: NbmapCoreNavigation.ReadableLogRecord)
  public func forceFlush() -> NbmapCoreNavigation.ExportResult
  public func shutdown() -> NbmapCoreNavigation.ExportResult
  @objc deinit
}
public protocol IntObserverMetric {
  func observe(value: Swift.Int, labelset: NbmapCoreNavigation.LabelSet)
  func observe(value: Swift.Int, labels: [Swift.String : Swift.String])
}
public struct NoopIntObserverMetric : NbmapCoreNavigation.IntObserverMetric {
  public init()
  public func observe(value: Swift.Int, labelset: NbmapCoreNavigation.LabelSet)
  public func observe(value: Swift.Int, labels: [Swift.String : Swift.String])
}
@_hasMissingDesignatedInitializers public class LoggerSdk : NbmapCoreNavigation.Logger {
  public func eventBuilder(name: Swift.String) -> any NbmapCoreNavigation.EventBuilder
  public func logRecordBuilder() -> any NbmapCoreNavigation.LogRecordBuilder
  @objc deinit
}
public enum AttributeValue : Swift.Equatable, Swift.CustomStringConvertible, Swift.Hashable {
  case string(Swift.String)
  case bool(Swift.Bool)
  case int(Swift.Int)
  case double(Swift.Double)
  case stringArray([Swift.String])
  case boolArray([Swift.Bool])
  case intArray([Swift.Int])
  case doubleArray([Swift.Double])
  public var description: Swift.String {
    get
  }
  public init?(_ value: Any)
  public static func == (a: NbmapCoreNavigation.AttributeValue, b: NbmapCoreNavigation.AttributeValue) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.AttributeValue : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension NbmapCoreNavigation.Google_Protobuf_ListValue : Swift.ExpressibleByArrayLiteral {
  public typealias Element = NbmapCoreNavigation.Google_Protobuf_Value
  public init(arrayLiteral elements: NbmapCoreNavigation.Google_Protobuf_ListValue.Element...)
  public typealias ArrayLiteralElement = NbmapCoreNavigation.Google_Protobuf_ListValue.Element
}
extension NbmapCoreNavigation.Google_Protobuf_ListValue {
  public init(values: [NbmapCoreNavigation.Google_Protobuf_Value])
  public subscript(index: Swift.Int) -> NbmapCoreNavigation.Google_Protobuf_Value {
    get
    set(newValue)
  }
}
public protocol TextMapPropagator {
  var fields: Swift.Set<Swift.String> { get }
  func inject<S>(spanContext: NbmapCoreNavigation.SpanContext, carrier: inout [Swift.String : Swift.String], setter: S) where S : NbmapCoreNavigation.Setter
  @discardableResult
  func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> NbmapCoreNavigation.SpanContext? where G : NbmapCoreNavigation.Getter
}
public protocol Setter {
  func set(carrier: inout [Swift.String : Swift.String], key: Swift.String, value: Swift.String)
}
public protocol Getter {
  func get(carrier: [Swift.String : Swift.String], key: Swift.String) -> [Swift.String]?
}
@_hasMissingDesignatedInitializers public class RouteAlongUtils {
  public static func splitRouteAlong(previousLocation: CoreLocation.CLLocationCoordinate2D, currentLocation: CoreLocation.CLLocationCoordinate2D, routePoints: [CoreLocation.CLLocationCoordinate2D]) -> Turf.LineString?
  public static func splitLocationAlongRoutes(previousLocation: CoreLocation.CLLocation, currentLocation: CoreLocation.CLLocation, routePoints: [CoreLocation.CLLocationCoordinate2D]) -> [CoreLocation.CLLocationCoordinate2D]?
  @objc deinit
}
@objc(NBVisualInstructionBanner) open class VisualInstructionBanner : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc final public let distanceAlongStep: CoreLocation.CLLocationDistance
  @objc final public let primaryInstruction: NbmapCoreNavigation.VisualInstruction
  @objc final public let secondaryInstruction: NbmapCoreNavigation.VisualInstruction?
  @objc final public let tertiaryInstruction: NbmapCoreNavigation.VisualInstruction?
  @objc public var drivingSide: NbmapCoreNavigation.DrivingSide
  @objc(initWithJSON:drivingSide:) convenience public init(json: [Swift.String : Any], drivingSide: NbmapCoreNavigation.DrivingSide)
  @objc public init(distanceAlongStep: CoreLocation.CLLocationDistance, primaryInstruction: NbmapCoreNavigation.VisualInstruction, secondaryInstruction: NbmapCoreNavigation.VisualInstruction?, tertiaryInstruction: NbmapCoreNavigation.VisualInstruction?, drivingSide: NbmapCoreNavigation.DrivingSide)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(NBTracepoint) public class Tracepoint : NbmapCoreNavigation.Waypoint {
  @objc open var alternateCount: Swift.Int
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc override public func encode(with coder: Foundation.NSCoder)
  @objc override public class var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc deinit
}
public protocol ReadableSpan : NbmapCoreNavigation.Span {
  var name: Swift.String { get set }
  var instrumentationScopeInfo: NbmapCoreNavigation.InstrumentationScopeInfo { get }
  func toSpanData() -> NbmapCoreNavigation.SpanData
  var hasEnded: Swift.Bool { get }
  var latency: Foundation.TimeInterval { get }
}
extension UIKit.UIDevice {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var isPluggedIn: Swift.Bool {
    @objc get
  }
}
@objc open class RerouteController : ObjectiveC.NSObject {
  weak public var delegate: (any NbmapCoreNavigation.RerouteDelegate)?
  public var routeTask: (any NbmapCoreNavigation.NavigationProviderRequest)? {
    get
  }
  public var routeProgress: NbmapCoreNavigation.RouteProgress?
  public var lastRerouteLocation: CoreLocation.CLLocation?
  public init(navConfig: NbmapCoreNavigation.NavigationEngineConfig, routingProvider: (any NbmapCoreNavigation.RoutingProvider)? = nil)
  @objc deinit
  public func getTravelledLocationList(travelledLocations: NbmapCoreNavigation.RingBuffer<NbmapCoreNavigation.TravelledRawLocation>) -> [NbmapCoreNavigation.TravelledRawLocation]
}
public protocol Sampler : AnyObject, Swift.CustomStringConvertible {
  func shouldSample(parentContext: NbmapCoreNavigation.SpanContext?, traceId: NbmapCoreNavigation.TraceId, name: Swift.String, kind: NbmapCoreNavigation.SpanKind, attributes: [Swift.String : NbmapCoreNavigation.AttributeValue], parentLinks: [NbmapCoreNavigation.SpanData.Link]) -> any NbmapCoreNavigation.Decision
}
public protocol Decision {
  var isSampled: Swift.Bool { get }
  var attributes: [Swift.String : NbmapCoreNavigation.AttributeValue] { get }
}
public struct Google_Protobuf_FieldMask {
  public var paths: [Swift.String]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
extension NbmapCoreNavigation.Google_Protobuf_FieldMask : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_FieldMask : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_FieldMask, rhs: NbmapCoreNavigation.Google_Protobuf_FieldMask) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Tracer : AnyObject {
  func spanBuilder(spanName: Swift.String) -> any NbmapCoreNavigation.SpanBuilder
}
@objc(NBLaneIndicationComponent) open class LaneIndicationComponent : ObjectiveC.NSObject, NbmapCoreNavigation.ComponentRepresentable {
  @objc public var indications: NbmapCoreNavigation.LaneIndication
  @objc public var isUsable: Swift.Bool
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public init(indications: NbmapCoreNavigation.LaneIndication, isUsable: Swift.Bool)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
public class JaegerPropagator : NbmapCoreNavigation.TextMapPropagator {
  public var fields: Swift.Set<Swift.String>
  public init()
  public func inject<S>(spanContext: NbmapCoreNavigation.SpanContext, carrier: inout [Swift.String : Swift.String], setter: S) where S : NbmapCoreNavigation.Setter
  public func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> NbmapCoreNavigation.SpanContext? where G : NbmapCoreNavigation.Getter
  @objc deinit
}
public struct ReadableLogRecord {
  public init(resource: NbmapCoreNavigation.Resource, instrumentationScopeInfo: NbmapCoreNavigation.InstrumentationScopeInfo, timestamp: Foundation.Date, observedTimestamp: Foundation.Date? = nil, spanContext: NbmapCoreNavigation.SpanContext? = nil, severity: NbmapCoreNavigation.Severity? = nil, body: Swift.String? = nil, attributes: [Swift.String : NbmapCoreNavigation.AttributeValue])
  public var resource: NbmapCoreNavigation.Resource {
    get
  }
  public var instrumentationScopeInfo: NbmapCoreNavigation.InstrumentationScopeInfo {
    get
  }
  public var timestamp: Foundation.Date {
    get
  }
  public var observedTimestamp: Foundation.Date? {
    get
  }
  public var spanContext: NbmapCoreNavigation.SpanContext? {
    get
  }
  public var severity: NbmapCoreNavigation.Severity? {
    get
  }
  public var body: Swift.String? {
    get
  }
  public var attributes: [Swift.String : NbmapCoreNavigation.AttributeValue] {
    get
  }
}
public struct BatchSpanProcessor : NbmapCoreNavigation.SpanProcessor {
  public init(spanExporter: any NbmapCoreNavigation.SpanExporter, scheduleDelay: Foundation.TimeInterval = 5, exportTimeout: Foundation.TimeInterval = 30, maxQueueSize: Swift.Int = 2048, maxExportBatchSize: Swift.Int = 512, willExportCallback: ((inout [NbmapCoreNavigation.SpanData]) -> Swift.Void)? = nil)
  public let isStartRequired: Swift.Bool
  public let isEndRequired: Swift.Bool
  public func onStart(parentContext: NbmapCoreNavigation.SpanContext?, span: any NbmapCoreNavigation.ReadableSpan)
  public func onEnd(span: any NbmapCoreNavigation.ReadableSpan)
  public func shutdown()
  public func forceFlush(timeout: Foundation.TimeInterval? = nil)
}
@_inheritsConvenienceInitializers @objc(NBRouteOptionss) open class RouteOptions : NbmapCoreNavigation.DirectionsOptions {
  @objc convenience public init(origin: CoreLocation.CLLocation, destination: CoreLocation.CLLocation, with locations: [CoreLocation.CLLocation]? = nil, mode: NbmapCoreNavigation.NBNavigationMode? = nil)
  @objc convenience public init(from origin: CoreLocation.CLLocationCoordinate2D, to destination: CoreLocation.CLLocationCoordinate2D, with coordinates: [CoreLocation.CLLocationCoordinate2D]? = nil, mode: NbmapCoreNavigation.NBNavigationMode? = nil)
  @objc convenience public init(origin: NbmapCoreNavigation.Waypoint, destination: NbmapCoreNavigation.Waypoint, waypoints: [NbmapCoreNavigation.Waypoint]? = nil, mode: NbmapCoreNavigation.NBNavigationMode? = nil)
  @objc required public init(waypoints: [NbmapCoreNavigation.Waypoint], profile: NbmapCoreNavigation.NBNavigationMode)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc override public func encode(with coder: Foundation.NSCoder)
  open var path: Swift.String {
    get
  }
  open var apiEndpoint: Foundation.URL {
    get
  }
  open var accessToken: Swift.String {
    get
  }
  open var apiKeyHeaderName: Swift.String? {
    get
  }
  @objc open var includesAlternativeRoutes: Swift.Bool
  @objc open var alternativeCount: Swift.Int
  @available(*, deprecated, message: "Use `avoid` instead.")
  @objc open var roadClassesToAvoid: NbmapCoreNavigation.RoadClasses
  @objc open var avoid: [Swift.String]
  @objc open var mapOption: NbmapCoreNavigation.NBMapOption
  @objc open var truckSize: [Swift.Int]
  @objc open var truckWeight: Swift.Int
  @objc open var routeType: NbmapCoreNavigation.NBNavigationRouteType?
  @objc open var crossBorder: Swift.Bool
  open var hazmatTypes: NbmapCoreNavigation.NavigationHazmatTypes
  @objc open var truckAxleLoad: Swift.Double
  @objc open var allow: Swift.String
  public func response(from json: NbmapCoreNavigation.JSONDictionary) -> [NbmapCoreNavigation.Route]?
  @objc override public class var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc override open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc(isEqualToRouteOptions:) open func isEqual(to routeOptions: NbmapCoreNavigation.RouteOptions?) -> Swift.Bool
  @objc deinit
}
extension NbmapCoreNavigation.Message {
  public func jsonString(options: NbmapCoreNavigation.JSONEncodingOptions = JSONEncodingOptions()) throws -> Swift.String
  public func jsonUTF8Data(options: NbmapCoreNavigation.JSONEncodingOptions = JSONEncodingOptions()) throws -> Foundation.Data
  public init(jsonString: Swift.String, options: NbmapCoreNavigation.JSONDecodingOptions = JSONDecodingOptions()) throws
  public init(jsonString: Swift.String, extensions: (any NbmapCoreNavigation.ExtensionMap)? = nil, options: NbmapCoreNavigation.JSONDecodingOptions = JSONDecodingOptions()) throws
  public init(jsonUTF8Data: Foundation.Data, options: NbmapCoreNavigation.JSONDecodingOptions = JSONDecodingOptions()) throws
  public init(jsonUTF8Data: Foundation.Data, extensions: (any NbmapCoreNavigation.ExtensionMap)? = nil, options: NbmapCoreNavigation.JSONDecodingOptions = JSONDecodingOptions()) throws
}
public protocol RoutingProvider {
  func calculateRoutes(options: NbmapCoreNavigation.RouteOptions, completionHandler: @escaping NbmapCoreNavigation.Directions.RouteCompletionHandler) -> (any NbmapCoreNavigation.NavigationProviderRequest)?
}
public protocol NavigationProviderRequest {
  func cancel()
}
@objc public protocol NavigationEventTracking {
  @objc func trackingRouteData(route: [Swift.String : Any])
  @objc func trackingRawLocation(rawLocation: [Swift.String : Any])
  @objc func trackingSnapLocation(snapLocation: [Swift.String : Any])
  @objc func trackingSpoken(sponken: [Swift.String : Any])
  @objc func trackingBannerInfo(bannerInfo: [Swift.String : Any])
  @objc func trackingSummary(summary: [Swift.String : Any])
  @objc func trackingStartReroute(reroute: [Swift.String : Any])
  @objc func trackingRerouteError(reRouteError: [Swift.String : Any])
  @objc func trackingRerouteResponse(rerouteResponse: [Swift.String : Any])
  @objc func trackingNavigationFinish()
}
@_hasMissingDesignatedInitializers public class ResourceProvider {
  public var attributes: [Swift.String : NbmapCoreNavigation.AttributeValue] {
    get
  }
  public func create() -> NbmapCoreNavigation.Resource
  @objc deinit
}
extension UIKit.UIApplication.State : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class StepLink {
  @objc deinit
}
open class BoundRawCounterMetric<T> {
  public init()
  open func record(sum: T, startDate: Foundation.Date, endDate: Foundation.Date)
  @objc deinit
}
@objc(NBComponentRepresentable) public protocol ComponentRepresentable : Foundation.NSSecureCoding {
}
public struct Google_Protobuf_SourceContext {
  public var fileName: Swift.String
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
extension NbmapCoreNavigation.Google_Protobuf_SourceContext : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_SourceContext : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_SourceContext, rhs: NbmapCoreNavigation.Google_Protobuf_SourceContext) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SpanProcessor {
  var isStartRequired: Swift.Bool { get }
  var isEndRequired: Swift.Bool { get }
  func onStart(parentContext: NbmapCoreNavigation.SpanContext?, span: any NbmapCoreNavigation.ReadableSpan)
  mutating func onEnd(span: any NbmapCoreNavigation.ReadableSpan)
  mutating func shutdown()
  func forceFlush(timeout: Foundation.TimeInterval?)
}
public protocol Telemetry {
  func setup(withAccessToken: Swift.String, userAgentBase: Swift.String, hostSDKVersion: Swift.String)
  func track(spanName: Swift.String, with attributes: [Swift.String : Any]?, end: Swift.Bool?) -> any NbmapCoreNavigation.Span
  func track(spanName: Swift.String, with attributes: [Swift.String : Any]?, event: Swift.String?, end: Swift.Bool?) -> any NbmapCoreNavigation.Span
  func track(spanName: Swift.String, with attributes: [Swift.String : Any]?, event: Swift.String?, eventAttributes: [Swift.String : Any]?, end: Swift.Bool?) -> any NbmapCoreNavigation.Span
  func track(spanName: Swift.String, with attributes: [Swift.String : Any]?, eventWithAttributes: [Swift.String : [Swift.String : Any]?]?, end: Swift.Bool?) -> any NbmapCoreNavigation.Span
  func enqueueEvent(withName: Swift.String, attributes: [Swift.String : Any])
  func flush()
}
public let NBDirectionsErrorDomain: Swift.String
@_inheritsConvenienceInitializers @objc(NBDirections) open class Directions : ObjectiveC.NSObject {
  public typealias RouteCompletionHandler = (_ routes: [NbmapCoreNavigation.Route]?, _ error: Foundation.NSError?) -> Swift.Void
  @objc(sharedDirections) public static let shared: NbmapCoreNavigation.Directions
  final public let nbId: Swift.String
  public var crossInfo: Swift.String
  @discardableResult
  @objc(calculateNavigationWithOptions:completionHandler:) open func calculate(_ options: NbmapCoreNavigation.RouteOptions, completionHandler: @escaping NbmapCoreNavigation.Directions.RouteCompletionHandler) -> Foundation.URLSessionDataTask
  @objc(URLForCalculatingDirectionsWithOptions:) open func url(forCalculating options: NbmapCoreNavigation.DirectionsOptions) -> Foundation.URL
  open func requestBody(forCalculating options: NbmapCoreNavigation.DirectionsOptions) -> Foundation.Data?
  @objc override dynamic public init()
  @objc deinit
}
extension NbmapCoreNavigation.Google_Protobuf_Timestamp {
  public init(seconds: Swift.Int64 = 0, nanos: Swift.Int32 = 0)
}
extension NbmapCoreNavigation.Google_Protobuf_Timestamp {
  public init(timeIntervalSince1970: Foundation.TimeInterval)
  public init(timeIntervalSinceReferenceDate: Foundation.TimeInterval)
  public init(date: Foundation.Date)
  public var timeIntervalSince1970: Foundation.TimeInterval {
    get
  }
  public var timeIntervalSinceReferenceDate: Foundation.TimeInterval {
    get
  }
  public var date: Foundation.Date {
    get
  }
}
public func + (lhs: NbmapCoreNavigation.Google_Protobuf_Timestamp, rhs: NbmapCoreNavigation.Google_Protobuf_Duration) -> NbmapCoreNavigation.Google_Protobuf_Timestamp
public func + (lhs: NbmapCoreNavigation.Google_Protobuf_Duration, rhs: NbmapCoreNavigation.Google_Protobuf_Timestamp) -> NbmapCoreNavigation.Google_Protobuf_Timestamp
public func - (lhs: NbmapCoreNavigation.Google_Protobuf_Timestamp, rhs: NbmapCoreNavigation.Google_Protobuf_Duration) -> NbmapCoreNavigation.Google_Protobuf_Timestamp
public enum TextFormatDecodingError : Swift.Error {
  case malformedText
  case malformedNumber
  case trailingGarbage
  case truncated
  case invalidUTF8
  case schemaMismatch
  case missingFieldNames
  case unknownField
  case unrecognizedEnumValue
  case conflictingOneOf
  case internalExtensionError
  case messageDepthLimit
  public static func == (a: NbmapCoreNavigation.TextFormatDecodingError, b: NbmapCoreNavigation.TextFormatDecodingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol BaggageBuilder : AnyObject {
  @discardableResult
  func setParent(_ parent: (any NbmapCoreNavigation.Baggage)?) -> Self
  @discardableResult
  func setNoParent() -> Self
  @discardableResult
  func put(key: NbmapCoreNavigation.EntryKey, value: NbmapCoreNavigation.EntryValue, metadata: NbmapCoreNavigation.EntryMetadata?) -> Self
  @discardableResult
  func remove(key: NbmapCoreNavigation.EntryKey) -> Self
  func build() -> any NbmapCoreNavigation.Baggage
}
public class MillisClock : NbmapCoreNavigation.Clock {
  public init()
  public var now: Foundation.Date {
    get
  }
  @objc deinit
}
public struct Opentelemetry_Proto_Common_V1_AnyValue {
  public var value: NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_AnyValue.OneOf_Value?
  public var stringValue: Swift.String {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
  public var intValue: Swift.Int64 {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var arrayValue: NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_ArrayValue {
    get
    set
  }
  public var kvlistValue: NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_KeyValueList {
    get
    set
  }
  public var bytesValue: Foundation.Data {
    get
    set
  }
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public enum OneOf_Value : Swift.Equatable {
    case stringValue(Swift.String)
    case boolValue(Swift.Bool)
    case intValue(Swift.Int64)
    case doubleValue(Swift.Double)
    case arrayValue(NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_ArrayValue)
    case kvlistValue(NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_KeyValueList)
    case bytesValue(Foundation.Data)
    public static func == (a: NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_AnyValue.OneOf_Value, b: NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_AnyValue.OneOf_Value) -> Swift.Bool
  }
  public init()
}
public struct Opentelemetry_Proto_Common_V1_ArrayValue {
  public var values: [NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_AnyValue]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Common_V1_KeyValueList {
  public var values: [NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_KeyValue]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Common_V1_KeyValue {
  public var key: Swift.String
  public var value: NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_AnyValue {
    get
    set
  }
  public var hasValue: Swift.Bool {
    get
  }
  public mutating func clearValue()
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Common_V1_InstrumentationScope {
  public var name: Swift.String
  public var version: Swift.String
  public var attributes: [NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_KeyValue]
  public var droppedAttributesCount: Swift.UInt32
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_AnyValue : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_AnyValue.OneOf_Value : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_ArrayValue : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_KeyValueList : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_KeyValue : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_InstrumentationScope : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_AnyValue : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_AnyValue, rhs: NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_AnyValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_ArrayValue : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_ArrayValue, rhs: NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_ArrayValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_KeyValueList : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_KeyValueList, rhs: NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_KeyValueList) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_KeyValue : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_KeyValue, rhs: NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_KeyValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_InstrumentationScope : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_InstrumentationScope, rhs: NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_InstrumentationScope) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
open class BoundCounterMetric<T> {
  public init()
  open func add(value: T)
  @objc deinit
}
@objc(NBRouteShapeResolution) public enum RouteShapeResolution : Swift.UInt, Swift.CustomStringConvertible {
  case none
  case low
  case full
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_DoubleValue : Swift.ExpressibleByFloatLiteral {
  public typealias WrappedType = NbmapCoreNavigation.ProtobufDouble
  public typealias FloatLiteralType = NbmapCoreNavigation.Google_Protobuf_DoubleValue.WrappedType.BaseType
  public init(_ value: NbmapCoreNavigation.Google_Protobuf_DoubleValue.WrappedType.BaseType)
  public init(floatLiteral: NbmapCoreNavigation.Google_Protobuf_DoubleValue.FloatLiteralType)
}
extension NbmapCoreNavigation.Google_Protobuf_FloatValue : Swift.ExpressibleByFloatLiteral {
  public typealias WrappedType = NbmapCoreNavigation.ProtobufFloat
  public typealias FloatLiteralType = Swift.Float
  public init(_ value: NbmapCoreNavigation.Google_Protobuf_FloatValue.WrappedType.BaseType)
  public init(floatLiteral: NbmapCoreNavigation.Google_Protobuf_FloatValue.FloatLiteralType)
}
extension NbmapCoreNavigation.Google_Protobuf_Int64Value : Swift.ExpressibleByIntegerLiteral {
  public typealias WrappedType = NbmapCoreNavigation.ProtobufInt64
  public typealias IntegerLiteralType = NbmapCoreNavigation.Google_Protobuf_Int64Value.WrappedType.BaseType
  public init(_ value: NbmapCoreNavigation.Google_Protobuf_Int64Value.WrappedType.BaseType)
  public init(integerLiteral: NbmapCoreNavigation.Google_Protobuf_Int64Value.IntegerLiteralType)
}
extension NbmapCoreNavigation.Google_Protobuf_UInt64Value : Swift.ExpressibleByIntegerLiteral {
  public typealias WrappedType = NbmapCoreNavigation.ProtobufUInt64
  public typealias IntegerLiteralType = NbmapCoreNavigation.Google_Protobuf_UInt64Value.WrappedType.BaseType
  public init(_ value: NbmapCoreNavigation.Google_Protobuf_UInt64Value.WrappedType.BaseType)
  public init(integerLiteral: NbmapCoreNavigation.Google_Protobuf_UInt64Value.IntegerLiteralType)
}
extension NbmapCoreNavigation.Google_Protobuf_Int32Value : Swift.ExpressibleByIntegerLiteral {
  public typealias WrappedType = NbmapCoreNavigation.ProtobufInt32
  public typealias IntegerLiteralType = NbmapCoreNavigation.Google_Protobuf_Int32Value.WrappedType.BaseType
  public init(_ value: NbmapCoreNavigation.Google_Protobuf_Int32Value.WrappedType.BaseType)
  public init(integerLiteral: NbmapCoreNavigation.Google_Protobuf_Int32Value.IntegerLiteralType)
}
extension NbmapCoreNavigation.Google_Protobuf_UInt32Value : Swift.ExpressibleByIntegerLiteral {
  public typealias WrappedType = NbmapCoreNavigation.ProtobufUInt32
  public typealias IntegerLiteralType = NbmapCoreNavigation.Google_Protobuf_UInt32Value.WrappedType.BaseType
  public init(_ value: NbmapCoreNavigation.Google_Protobuf_UInt32Value.WrappedType.BaseType)
  public init(integerLiteral: NbmapCoreNavigation.Google_Protobuf_UInt32Value.IntegerLiteralType)
}
extension NbmapCoreNavigation.Google_Protobuf_BoolValue : Swift.ExpressibleByBooleanLiteral {
  public typealias WrappedType = NbmapCoreNavigation.ProtobufBool
  public typealias BooleanLiteralType = Swift.Bool
  public init(_ value: NbmapCoreNavigation.Google_Protobuf_BoolValue.WrappedType.BaseType)
  public init(booleanLiteral: Swift.Bool)
}
extension NbmapCoreNavigation.Google_Protobuf_StringValue : Swift.ExpressibleByStringLiteral {
  public typealias WrappedType = NbmapCoreNavigation.ProtobufString
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
  public init(_ value: NbmapCoreNavigation.Google_Protobuf_StringValue.WrappedType.BaseType)
  public init(stringLiteral: Swift.String)
  public init(extendedGraphemeClusterLiteral: Swift.String)
  public init(unicodeScalarLiteral: Swift.String)
}
extension NbmapCoreNavigation.Google_Protobuf_BytesValue {
  public typealias WrappedType = NbmapCoreNavigation.ProtobufBytes
  public init(_ value: NbmapCoreNavigation.Google_Protobuf_BytesValue.WrappedType.BaseType)
}
@objc @_hasMissingDesignatedInitializers open class ConfigurationResponse : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public static var supportsSecureCoding: Swift.Bool
  convenience public init?(json: NbmapCoreNavigation.JSONDictionary)
  @objc required public init?(coder: Foundation.NSCoder)
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc final public let id: Swift.Int
  @objc final public let sdkVersion: Swift.String
  @objc final public let platform: [Swift.Int]
  @objc final public let value: NbmapCoreNavigation.ConfigurationValue
  @objc final public let orgId: Swift.Int
  @objc final public let createdAt: Swift.Int64
  @objc final public let updatedAt: Swift.Int64
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NBConfigurationService {
  public typealias ConfigurationServiceCompletionHandler = (_ configurationResponse: NbmapCoreNavigation.ConfigurationResponse?, _ responseCode: Swift.Int, _ error: Foundation.NSError?) -> Swift.Void
  @objc(URLForRequestingNBConfigurations:) open func url(forLookUp configurationRequestParams: NbmapCoreNavigation.ConfigurationRequestParams) -> Foundation.URL
  public func getConfigurationFromLocal() -> NbmapCoreNavigation.ConfigurationResponse?
  @discardableResult
  @objc(lookUpNBConifgurationWithOption:configurationServiceCompletionHandler:) open func lookUp(_ configurationRequestParams: NbmapCoreNavigation.ConfigurationRequestParams, configurationServiceCompletionHandler: @escaping NbmapCoreNavigation.NBConfigurationService.ConfigurationServiceCompletionHandler) -> Foundation.URLSessionDataTask
  @objc deinit
}
public enum SignStandard {
  case mutcd
  case viennaConvention
  case speedOnly
  public static func == (a: NbmapCoreNavigation.SignStandard, b: NbmapCoreNavigation.SignStandard) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.RouteStep {
  public var isMotorway: Swift.Bool {
    get
  }
  public var lastInstruction: NbmapCoreNavigation.SpokenInstruction? {
    get
  }
  public var shape: Turf.LineString? {
    get
  }
  public var isEnterRoundabout: Swift.Bool {
    get
  }
  public var isExitoundabout: Swift.Bool {
    get
  }
  public var isUturn: Swift.Bool {
    get
  }
}
extension NbmapCoreNavigation.RouteStep {
  public func modifyInstructionsDisplayStep(previousStep: NbmapCoreNavigation.RouteStep?, upcomingStep: NbmapCoreNavigation.RouteStep?, followUpStep: NbmapCoreNavigation.RouteStep?, finalStepInLeg: Swift.Bool)
  public func modifyVoiceInstructionsInStep(upcomingStep: NbmapCoreNavigation.RouteStep?, finalStepInLeg: Swift.Bool)
  public func getPrimaryText(step: NbmapCoreNavigation.RouteStep, finalStep: Swift.Bool) -> Swift.String
  public func getInstruction(step: NbmapCoreNavigation.RouteStep?) -> Swift.String
  public func isOnArrivalVoiceInstruction(distanceAlongGeometry: Swift.Double, currentStepDistance: Swift.Double) -> Swift.Bool
}
public protocol AnyExtensionField : Swift.CustomDebugStringConvertible {
  func hash(into hasher: inout Swift.Hasher)
  var protobufExtension: any NbmapCoreNavigation.AnyMessageExtension { get }
  func isEqual(other: any NbmapCoreNavigation.AnyExtensionField) -> Swift.Bool
  mutating func decodeExtensionField<T>(decoder: inout T) throws where T : NbmapCoreNavigation.NDecoder
  func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  var isInitialized: Swift.Bool { get }
}
extension NbmapCoreNavigation.AnyExtensionField {
  public var isInitialized: Swift.Bool {
    get
  }
}
public protocol ExtensionField : NbmapCoreNavigation.AnyExtensionField, Swift.Hashable {
  associatedtype ValueType
  var value: Self.ValueType { get set }
  init(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, value: Self.ValueType)
  init?<D>(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
}
public struct OptionalExtensionField<T> : NbmapCoreNavigation.ExtensionField where T : NbmapCoreNavigation.FieldType {
  public typealias BaseType = T.BaseType
  public typealias ValueType = NbmapCoreNavigation.OptionalExtensionField<T>.BaseType
  public var value: NbmapCoreNavigation.OptionalExtensionField<T>.ValueType
  public var protobufExtension: any NbmapCoreNavigation.AnyMessageExtension
  public static func == (lhs: NbmapCoreNavigation.OptionalExtensionField<T>, rhs: NbmapCoreNavigation.OptionalExtensionField<T>) -> Swift.Bool
  public init(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, value: NbmapCoreNavigation.OptionalExtensionField<T>.ValueType)
  public var debugDescription: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public func isEqual(other: any NbmapCoreNavigation.AnyExtensionField) -> Swift.Bool
  public mutating func decodeExtensionField<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public init?<D>(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public var hashValue: Swift.Int {
    get
  }
}
public struct RepeatedExtensionField<T> : NbmapCoreNavigation.ExtensionField where T : NbmapCoreNavigation.FieldType {
  public typealias BaseType = T.BaseType
  public typealias ValueType = [NbmapCoreNavigation.RepeatedExtensionField<T>.BaseType]
  public var value: NbmapCoreNavigation.RepeatedExtensionField<T>.ValueType
  public var protobufExtension: any NbmapCoreNavigation.AnyMessageExtension
  public static func == (lhs: NbmapCoreNavigation.RepeatedExtensionField<T>, rhs: NbmapCoreNavigation.RepeatedExtensionField<T>) -> Swift.Bool
  public init(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, value: NbmapCoreNavigation.RepeatedExtensionField<T>.ValueType)
  public func hash(into hasher: inout Swift.Hasher)
  public func isEqual(other: any NbmapCoreNavigation.AnyExtensionField) -> Swift.Bool
  public var debugDescription: Swift.String {
    get
  }
  public mutating func decodeExtensionField<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public init?<D>(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public var hashValue: Swift.Int {
    get
  }
}
public struct PackedExtensionField<T> : NbmapCoreNavigation.ExtensionField where T : NbmapCoreNavigation.FieldType {
  public typealias BaseType = T.BaseType
  public typealias ValueType = [NbmapCoreNavigation.PackedExtensionField<T>.BaseType]
  public var value: NbmapCoreNavigation.PackedExtensionField<T>.ValueType
  public var protobufExtension: any NbmapCoreNavigation.AnyMessageExtension
  public static func == (lhs: NbmapCoreNavigation.PackedExtensionField<T>, rhs: NbmapCoreNavigation.PackedExtensionField<T>) -> Swift.Bool
  public init(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, value: NbmapCoreNavigation.PackedExtensionField<T>.ValueType)
  public func hash(into hasher: inout Swift.Hasher)
  public func isEqual(other: any NbmapCoreNavigation.AnyExtensionField) -> Swift.Bool
  public var debugDescription: Swift.String {
    get
  }
  public mutating func decodeExtensionField<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public init?<D>(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public var hashValue: Swift.Int {
    get
  }
}
public struct OptionalEnumExtensionField<E> : NbmapCoreNavigation.ExtensionField where E : NbmapCoreNavigation.Enum, E.RawValue == Swift.Int {
  public typealias BaseType = E
  public typealias ValueType = E
  public var value: NbmapCoreNavigation.OptionalEnumExtensionField<E>.ValueType
  public var protobufExtension: any NbmapCoreNavigation.AnyMessageExtension
  public static func == (lhs: NbmapCoreNavigation.OptionalEnumExtensionField<E>, rhs: NbmapCoreNavigation.OptionalEnumExtensionField<E>) -> Swift.Bool
  public init(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, value: NbmapCoreNavigation.OptionalEnumExtensionField<E>.ValueType)
  public var debugDescription: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public func isEqual(other: any NbmapCoreNavigation.AnyExtensionField) -> Swift.Bool
  public mutating func decodeExtensionField<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public init?<D>(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public var hashValue: Swift.Int {
    get
  }
}
public struct RepeatedEnumExtensionField<E> : NbmapCoreNavigation.ExtensionField where E : NbmapCoreNavigation.Enum, E.RawValue == Swift.Int {
  public typealias BaseType = E
  public typealias ValueType = [E]
  public var value: NbmapCoreNavigation.RepeatedEnumExtensionField<E>.ValueType
  public var protobufExtension: any NbmapCoreNavigation.AnyMessageExtension
  public static func == (lhs: NbmapCoreNavigation.RepeatedEnumExtensionField<E>, rhs: NbmapCoreNavigation.RepeatedEnumExtensionField<E>) -> Swift.Bool
  public init(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, value: NbmapCoreNavigation.RepeatedEnumExtensionField<E>.ValueType)
  public func hash(into hasher: inout Swift.Hasher)
  public func isEqual(other: any NbmapCoreNavigation.AnyExtensionField) -> Swift.Bool
  public var debugDescription: Swift.String {
    get
  }
  public mutating func decodeExtensionField<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public init?<D>(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public var hashValue: Swift.Int {
    get
  }
}
public struct PackedEnumExtensionField<E> : NbmapCoreNavigation.ExtensionField where E : NbmapCoreNavigation.Enum, E.RawValue == Swift.Int {
  public typealias BaseType = E
  public typealias ValueType = [E]
  public var value: NbmapCoreNavigation.PackedEnumExtensionField<E>.ValueType
  public var protobufExtension: any NbmapCoreNavigation.AnyMessageExtension
  public static func == (lhs: NbmapCoreNavigation.PackedEnumExtensionField<E>, rhs: NbmapCoreNavigation.PackedEnumExtensionField<E>) -> Swift.Bool
  public init(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, value: NbmapCoreNavigation.PackedEnumExtensionField<E>.ValueType)
  public func hash(into hasher: inout Swift.Hasher)
  public func isEqual(other: any NbmapCoreNavigation.AnyExtensionField) -> Swift.Bool
  public var debugDescription: Swift.String {
    get
  }
  public mutating func decodeExtensionField<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public init?<D>(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public var hashValue: Swift.Int {
    get
  }
}
public struct OptionalMessageExtensionField<M> : NbmapCoreNavigation.ExtensionField where M : NbmapCoreNavigation.Message, M : Swift.Equatable {
  public typealias BaseType = M
  public typealias ValueType = NbmapCoreNavigation.OptionalMessageExtensionField<M>.BaseType
  public var value: NbmapCoreNavigation.OptionalMessageExtensionField<M>.ValueType
  public var protobufExtension: any NbmapCoreNavigation.AnyMessageExtension
  public static func == (lhs: NbmapCoreNavigation.OptionalMessageExtensionField<M>, rhs: NbmapCoreNavigation.OptionalMessageExtensionField<M>) -> Swift.Bool
  public init(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, value: NbmapCoreNavigation.OptionalMessageExtensionField<M>.ValueType)
  public var debugDescription: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public func isEqual(other: any NbmapCoreNavigation.AnyExtensionField) -> Swift.Bool
  public mutating func decodeExtensionField<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public init?<D>(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public var isInitialized: Swift.Bool {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct RepeatedMessageExtensionField<M> : NbmapCoreNavigation.ExtensionField where M : NbmapCoreNavigation.Message, M : Swift.Equatable {
  public typealias BaseType = M
  public typealias ValueType = [NbmapCoreNavigation.RepeatedMessageExtensionField<M>.BaseType]
  public var value: NbmapCoreNavigation.RepeatedMessageExtensionField<M>.ValueType
  public var protobufExtension: any NbmapCoreNavigation.AnyMessageExtension
  public static func == (lhs: NbmapCoreNavigation.RepeatedMessageExtensionField<M>, rhs: NbmapCoreNavigation.RepeatedMessageExtensionField<M>) -> Swift.Bool
  public init(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, value: NbmapCoreNavigation.RepeatedMessageExtensionField<M>.ValueType)
  public func hash(into hasher: inout Swift.Hasher)
  public func isEqual(other: any NbmapCoreNavigation.AnyExtensionField) -> Swift.Bool
  public var debugDescription: Swift.String {
    get
  }
  public mutating func decodeExtensionField<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public init?<D>(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public var isInitialized: Swift.Bool {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct OptionalGroupExtensionField<G> : NbmapCoreNavigation.ExtensionField where G : NbmapCoreNavigation.Message, G : Swift.Hashable {
  public typealias BaseType = G
  public typealias ValueType = NbmapCoreNavigation.OptionalGroupExtensionField<G>.BaseType
  public var value: G
  public var protobufExtension: any NbmapCoreNavigation.AnyMessageExtension
  public static func == (lhs: NbmapCoreNavigation.OptionalGroupExtensionField<G>, rhs: NbmapCoreNavigation.OptionalGroupExtensionField<G>) -> Swift.Bool
  public init(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, value: NbmapCoreNavigation.OptionalGroupExtensionField<G>.ValueType)
  public func hash(into hasher: inout Swift.Hasher)
  public var debugDescription: Swift.String {
    get
  }
  public func isEqual(other: any NbmapCoreNavigation.AnyExtensionField) -> Swift.Bool
  public mutating func decodeExtensionField<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public init?<D>(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public var isInitialized: Swift.Bool {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct RepeatedGroupExtensionField<G> : NbmapCoreNavigation.ExtensionField where G : NbmapCoreNavigation.Message, G : Swift.Hashable {
  public typealias BaseType = G
  public typealias ValueType = [NbmapCoreNavigation.RepeatedGroupExtensionField<G>.BaseType]
  public var value: NbmapCoreNavigation.RepeatedGroupExtensionField<G>.ValueType
  public var protobufExtension: any NbmapCoreNavigation.AnyMessageExtension
  public static func == (lhs: NbmapCoreNavigation.RepeatedGroupExtensionField<G>, rhs: NbmapCoreNavigation.RepeatedGroupExtensionField<G>) -> Swift.Bool
  public init(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, value: NbmapCoreNavigation.RepeatedGroupExtensionField<G>.ValueType)
  public func hash(into hasher: inout Swift.Hasher)
  public var debugDescription: Swift.String {
    get
  }
  public func isEqual(other: any NbmapCoreNavigation.AnyExtensionField) -> Swift.Bool
  public mutating func decodeExtensionField<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public init?<D>(protobufExtension: any NbmapCoreNavigation.AnyMessageExtension, decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public var isInitialized: Swift.Bool {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ITelemetryDataSource {
  var version: Swift.String? { get }
  var name: Swift.String { get }
  var language: Swift.String { get }
}
public struct W3CBaggagePropagator : NbmapCoreNavigation.TextMapBaggagePropagator {
  public init()
  public let fields: Swift.Set<Swift.String>
  public func inject<S>(baggage: any NbmapCoreNavigation.Baggage, carrier: inout [Swift.String : Swift.String], setter: S) where S : NbmapCoreNavigation.Setter
  public func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> (any NbmapCoreNavigation.Baggage)? where G : NbmapCoreNavigation.Getter
}
@_hasMissingDesignatedInitializers open class NBFeatureFlag {
  public static func getIsConfigurationServiceEnabled() -> Swift.Bool
  public static func getIsInstrumentationEnabled() -> Swift.Bool
  public static func getIsTravelledLocationEnabled() -> Swift.Bool
  @objc deinit
}
public struct SessionState {
  public mutating func reportChange(to orientation: UIKit.UIDeviceOrientation)
  public mutating func reportChange(to applicationState: UIKit.UIApplication.State)
}
public protocol Logger {
  func eventBuilder(name: Swift.String) -> any NbmapCoreNavigation.EventBuilder
  func logRecordBuilder() -> any NbmapCoreNavigation.LogRecordBuilder
}
public protocol IOperatingSystemDataSource {
  var type: Swift.String { get }
  var description: Swift.String { get }
  var name: Swift.String { get }
  var version: Swift.String { get }
}
public struct AttributesDictionary {
  public init(capacity: Swift.Int, valueLengthLimit: Swift.Int = Int.max)
  public subscript(key: Swift.String) -> NbmapCoreNavigation.AttributeValue? {
    get
    set
  }
  @discardableResult
  public mutating func updateValue(value: NbmapCoreNavigation.AttributeValue, forKey key: Swift.String) -> NbmapCoreNavigation.AttributeValue?
  public mutating func updateValues(attributes: [Swift.String : NbmapCoreNavigation.AttributeValue])
  public mutating func updateValues(attributes: NbmapCoreNavigation.AttributesDictionary)
  public mutating func removeValueForKey(key: Swift.String)
  public mutating func removeAll(keepCapacity: Swift.Int)
  public var count: Swift.Int {
    get
  }
  public var numberOfDroppedAttributes: Swift.Int {
    get
  }
  public var values: [NbmapCoreNavigation.AttributeValue] {
    get
  }
}
extension NbmapCoreNavigation.AttributesDictionary : Swift.Sequence {
  public func makeIterator() -> NbmapCoreNavigation.AttributesWithCapacityIterator
  public typealias Element = (Swift.String, NbmapCoreNavigation.AttributeValue)
  public typealias Iterator = NbmapCoreNavigation.AttributesWithCapacityIterator
}
public struct AttributesWithCapacityIterator : Swift.IteratorProtocol {
  public mutating func next() -> (Swift.String, NbmapCoreNavigation.AttributeValue)?
  public typealias Element = (Swift.String, NbmapCoreNavigation.AttributeValue)
}
@_hasMissingDesignatedInitializers public class DefaultTracer : NbmapCoreNavigation.Tracer {
  public static var instance: NbmapCoreNavigation.DefaultTracer
  public func spanBuilder(spanName: Swift.String) -> any NbmapCoreNavigation.SpanBuilder
  @objc deinit
}
public protocol NavigationEventsManagerDataSource : AnyObject {
  var routeProgress: NbmapCoreNavigation.RouteProgress { get }
  var router: any NbmapCoreNavigation.Router { get }
  var desiredAccuracy: CoreLocation.CLLocationAccuracy { get }
  var locationManagerType: NbmapCoreNavigation.NavigationLocationManager.Type { get }
}
public class NbRoutingProvider : NbmapCoreNavigation.RoutingProvider {
  public var settings: NbmapCoreNavigation.NavigationSettings {
    get
  }
  public struct Request : NbmapCoreNavigation.NavigationProviderRequest {
    public func cancel()
  }
  public init(settings: NbmapCoreNavigation.NavigationSettings = .shared)
  public func calculateRoutes(options: NbmapCoreNavigation.RouteOptions, completionHandler: @escaping NbmapCoreNavigation.Directions.RouteCompletionHandler) -> (any NbmapCoreNavigation.NavigationProviderRequest)?
  @objc deinit
}
extension Swift.Double {
  public func shortestRotation(angle: CoreLocation.CLLocationDirection) -> CoreLocation.CLLocationDirection
}
public protocol LogRecordBuilder {
  func setObservedTimestamp(_ observed: Foundation.Date) -> Self
  func setSpanContext(_ context: NbmapCoreNavigation.SpanContext) -> Self
  func setSeverity(_ severity: NbmapCoreNavigation.Severity) -> Self
  func setBody(_ body: Swift.String) -> Self
  func setAttributes(_ attributes: [Swift.String : NbmapCoreNavigation.AttributeValue]) -> Self
  func emit()
}
extension Swift.Array {
  public static func locations(from filePath: Swift.String) -> [CoreLocation.CLLocation]!
}
extension Swift.Array where Element == CoreLocation.CLLocationCoordinate2D {
  public func sliced(from: CoreLocation.CLLocationCoordinate2D? = nil, to: CoreLocation.CLLocationCoordinate2D? = nil) -> [CoreLocation.CLLocationCoordinate2D]
  public func distance(from: CoreLocation.CLLocationCoordinate2D? = nil, to: CoreLocation.CLLocationCoordinate2D? = nil) -> CoreLocation.CLLocationDistance?
  public func trimmed(from: CoreLocation.CLLocationCoordinate2D? = nil, distance: CoreLocation.CLLocationDistance) -> [CoreLocation.CLLocationCoordinate2D]
  public var centerCoordinate: CoreLocation.CLLocationCoordinate2D {
    get
  }
}
public typealias AttributeOptions = NbmapCoreNavigation.NBAttributeOptions
extension NbmapCoreNavigation.NBAttributeOptions : Swift.CustomStringConvertible {
  public init?(descriptions: [Swift.String])
  public var description: Swift.String {
    get
  }
}
public struct ExtensionFieldValueSet : Swift.Hashable {
  public static func == (lhs: NbmapCoreNavigation.ExtensionFieldValueSet, rhs: NbmapCoreNavigation.ExtensionFieldValueSet) -> Swift.Bool
  public init()
  public func hash(into hasher: inout Swift.Hasher)
  public func traverse<V>(visitor: inout V, start: Swift.Int, end: Swift.Int) throws where V : NbmapCoreNavigation.Visitor
  public subscript(index: Swift.Int) -> (any NbmapCoreNavigation.AnyExtensionField)? {
    get
    set
  }
  public var isInitialized: Swift.Bool {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RouterDelegate : AnyObject, NbmapCoreNavigation.UnimplementedLogging {
  func routeController(_ routeController: NbmapCoreNavigation.RouteController, shouldRerouteFrom location: CoreLocation.CLLocation) -> Swift.Bool
  func routeController(_ routeController: NbmapCoreNavigation.RouteController, willRerouteFrom location: CoreLocation.CLLocation)
  func routeController(_ routeController: NbmapCoreNavigation.RouteController, shouldDiscard location: CoreLocation.CLLocation) -> Swift.Bool
  func routeController(_ routeController: NbmapCoreNavigation.RouteController, didRerouteAlong route: NbmapCoreNavigation.Route, at location: CoreLocation.CLLocation?, proactive: Swift.Bool)
  func routeController(_ routeController: NbmapCoreNavigation.RouteController, didFailToRerouteWith error: any Swift.Error)
  func routeController(_ router: NbmapCoreNavigation.RouteController, didUpdate progress: NbmapCoreNavigation.RouteProgress, with location: CoreLocation.CLLocation, rawLocation: CoreLocation.CLLocation)
  func routeController(_ routeController: NbmapCoreNavigation.RouteController, didArriveAt waypoint: NbmapCoreNavigation.Waypoint)
  func routeController(_ routeController: NbmapCoreNavigation.RouteController, shouldPreventReroutesWhenArrivingAt waypoint: NbmapCoreNavigation.Waypoint) -> Swift.Bool
  func routeControllerShouldDisableBatteryMonitoring(_ routeController: NbmapCoreNavigation.RouteController) -> Swift.Bool
  func routeController(_ router: NbmapCoreNavigation.RouteController, didPassVisualInstructionPoint instruction: NbmapCoreNavigation.VisualInstructionBanner, routeProgress: NbmapCoreNavigation.RouteProgress)
  func routeController(_ router: NbmapCoreNavigation.RouteController, didPassSpokenInstructionPoint instruction: NbmapCoreNavigation.SpokenInstruction, routeProgress: NbmapCoreNavigation.RouteProgress)
  func routeController(_ router: NbmapCoreNavigation.RouteController, didRefresh progress: NbmapCoreNavigation.RouteProgress)
}
extension NbmapCoreNavigation.RouterDelegate {
  public func routeController(_ routeController: NbmapCoreNavigation.RouteController, shouldRerouteFrom location: CoreLocation.CLLocation) -> Swift.Bool
  public func routeController(_ routeController: NbmapCoreNavigation.RouteController, willRerouteFrom location: CoreLocation.CLLocation)
  public func routeController(_ routeController: NbmapCoreNavigation.RouteController, shouldDiscard location: CoreLocation.CLLocation) -> Swift.Bool
  public func routeController(_ routeController: NbmapCoreNavigation.RouteController, didRerouteAlong route: NbmapCoreNavigation.Route, at location: CoreLocation.CLLocation?, proactive: Swift.Bool)
  public func routeController(_ routeController: NbmapCoreNavigation.RouteController, didFailToRerouteWith error: any Swift.Error)
  public func routeController(_ router: NbmapCoreNavigation.RouteController, didUpdate progress: NbmapCoreNavigation.RouteProgress, with location: CoreLocation.CLLocation, rawLocation: CoreLocation.CLLocation)
  public func routeController(_ routeController: NbmapCoreNavigation.RouteController, didArriveAt waypoint: NbmapCoreNavigation.Waypoint)
  public func routeController(_ routeController: NbmapCoreNavigation.RouteController, shouldPreventReroutesWhenArrivingAt waypoint: NbmapCoreNavigation.Waypoint) -> Swift.Bool
  public func routeControllerShouldDisableBatteryMonitoring(_ routeController: NbmapCoreNavigation.RouteController) -> Swift.Bool
  public func routeController(_ router: NbmapCoreNavigation.RouteController, didPassVisualInstructionPoint instruction: NbmapCoreNavigation.VisualInstructionBanner, routeProgress: NbmapCoreNavigation.RouteProgress)
  public func routeController(_ router: NbmapCoreNavigation.RouteController, didPassSpokenInstructionPoint instruction: NbmapCoreNavigation.SpokenInstruction, routeProgress: NbmapCoreNavigation.RouteProgress)
  public func routeController(_ router: NbmapCoreNavigation.RouteController, didRefresh progress: NbmapCoreNavigation.RouteProgress)
}
extension NbmapCoreNavigation.Route {
  public var shape: Turf.LineString? {
    get
  }
  public func polylineAroundManeuver(legIndex: Swift.Int, stepIndex: Swift.Int, distance: CoreLocation.CLLocationDistance) -> Turf.LineString
  public func modifyRoute()
}
public enum AnyUnpackError : Swift.Error {
  case typeMismatch
  case malformedWellKnownTypeJSON
  case malformedAnyField
  public static func == (a: NbmapCoreNavigation.AnyUnpackError, b: NbmapCoreNavigation.AnyUnpackError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Enum : Swift.Hashable, Swift.RawRepresentable {
  init()
  init?(rawValue: Swift.Int)
  var rawValue: Swift.Int { get }
}
extension NbmapCoreNavigation.Enum {
  public func hash(into hasher: inout Swift.Hasher)
}
@_inheritsConvenienceInitializers @objc(NBNavigationLocationManager) open class NavigationLocationManager : CoreLocation.CLLocationManager, Foundation.NSCopying {
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public init()
  public var simulatesLocation: Swift.Bool
  @objc deinit
}
extension Foundation.Bundle {
  public var backgroundModes: Swift.Set<Swift.String> {
    get
  }
  public class func string(forNbNavigationInfoDictionaryKey key: Swift.String) -> Swift.String?
  public class func string(forNbCoreNavigationInfoDictionaryKey key: Swift.String) -> Swift.String?
}
public protocol LoggerBuilder {
  func setEventDomain(_ eventDomain: Swift.String) -> Self
  func setSchemaUrl(_ schemaUrl: Swift.String) -> Self
  func setInstrumentationVersion(_ instrumentationVersion: Swift.String) -> Self
  func setIncludeTraceContext(_ includeTraceContext: Swift.Bool) -> Self
  func setAttributes(_ attributes: [Swift.String : NbmapCoreNavigation.AttributeValue]) -> Self
  func build() -> any NbmapCoreNavigation.Logger
}
public struct Google_Protobuf_Timestamp {
  public var seconds: Swift.Int64
  public var nanos: Swift.Int32
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
extension NbmapCoreNavigation.Google_Protobuf_Timestamp : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_Timestamp : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_Timestamp, rhs: NbmapCoreNavigation.Google_Protobuf_Timestamp) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_Value : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int64
  public init(integerLiteral value: Swift.Int64)
}
extension NbmapCoreNavigation.Google_Protobuf_Value : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
  public init(floatLiteral value: Swift.Double)
}
extension NbmapCoreNavigation.Google_Protobuf_Value : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
  public init(booleanLiteral value: Swift.Bool)
}
extension NbmapCoreNavigation.Google_Protobuf_Value : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
  public init(stringLiteral value: Swift.String)
  public init(unicodeScalarLiteral value: Swift.String)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
}
extension NbmapCoreNavigation.Google_Protobuf_Value : Swift.ExpressibleByNilLiteral {
  public init(nilLiteral: ())
}
extension NbmapCoreNavigation.Google_Protobuf_Value {
  public init(numberValue: Swift.Double)
  public init(stringValue: Swift.String)
  public init(boolValue: Swift.Bool)
  public init(structValue: NbmapCoreNavigation.Google_Protobuf_Struct)
  public init(listValue: NbmapCoreNavigation.Google_Protobuf_ListValue)
}
public protocol _ProtoNameProviding {
  static var _protobuf_nameMap: NbmapCoreNavigation._NameMap { get }
}
public enum SemanticAttributes : Swift.String {
  case awsLambdaInvokedArn
  case dbSystem
  case dbConnectionString
  case dbUser
  case dbJdbcDriverClassname
  case dbName
  case dbStatement
  case dbOperation
  case netPeerName
  case netPeerIp
  case netPeerPort
  case netTransport
  case dbMssqlInstanceName
  case dbCassandraKeyspace
  case dbCassandraPageSize
  case dbCassandraConsistencyLevel
  case dbCassandraTable
  case dbCassandraIdempotence
  case dbCassandraSpeculativeExecutionCount
  case dbCassandraCoordinatorId
  case dbCassandraCoordinatorDc
  case dbHbaseNamespace
  case dbRedisDatabaseIndex
  case dbMongodbCollection
  case dbSqlTable
  case exceptionType
  case exceptionMessage
  case exceptionStacktrace
  case exceptionEscaped
  case faasTrigger
  case faasExecution
  case faasDocumentCollection
  case faasDocumentOperation
  case faasDocumentTime
  case faasDocumentName
  case httpMethod
  case httpUrl
  case httpTarget
  case httpHost
  case httpScheme
  case httpStatusCode
  case httpFlavor
  case httpUserAgent
  case httpRequestContentLength
  case httpRequestContentLengthUncompressed
  case httpResponseContentLength
  case httpResponseContentLengthUncompressed
  case httpServerName
  case httpRoute
  case httpClientIp
  case netHostIp
  case netHostPort
  case netHostName
  case netHostConnectionType
  case netHostConnectionSubtype
  case netHostCarrierName
  case netHostCarrierMcc
  case netHostCarrierMnc
  case netHostCarrierIcc
  case messagingSystem
  case messagingDestination
  case messagingDestinationKind
  case messagingTempDestination
  case messagingProtocol
  case messagingProtocolVersion
  case messagingUrl
  case messagingMessageId
  case messagingConversationId
  case messagingMessagePayloadSizeBytes
  case messagingMessagePayloadCompressedSizeBytes
  case faasTime
  case faasCron
  case faasColdstart
  case faasInvokedName
  case faasInvokedProvider
  case faasInvokedRegion
  case peerService
  case enduserId
  case enduserRole
  case enduserScope
  case threadId
  case threadName
  case codeFunction
  case codeNamespace
  case codeFilepath
  case codeLineno
  case rpcSystem
  case rpcService
  case rpcMethod
  case awsDynamodbTableNames
  case awsDynamodbConsumedCapacity
  case awsDynamodbItemCollectionMetrics
  case awsDynamodbProvisionedReadCapacity
  case awsDynamodbProvisionedWriteCapacity
  case awsDynamodbConsistentRead
  case awsDynamodbProjection
  case awsDynamodbLimit
  case awsDynamodbAttributesToGet
  case awsDynamodbIndexName
  case awsDynamodbSelect
  case awsDynamodbGlobalSecondaryIndexes
  case awsDynamodbLocalSecondaryIndexes
  case awsDynamodbExclusiveStartTable
  case awsDynamodbTableCount
  case awsDynamodbScanForward
  case awsDynamodbSegment
  case awsDynamodbTotalSegments
  case awsDynamodbCount
  case awsDynamodbScannedCount
  case awsDynamodbAttributeDefinitions
  case awsDynamodbGlobalSecondaryIndexUpdates
  case messagingOperation
  case messagingConsumerId
  case messagingRabbitmqRoutingKey
  case messagingKafkaMessageKey
  case messagingKafkaConsumerGroup
  case messagingKafkaClientId
  case messagingKafkaPartition
  case messagingKafkaTombstone
  case rpcGrpcStatusCode
  case rpcJsonrpcVersion
  case rpcJsonrpcRequestId
  case rpcJsonrpcErrorCode
  case rpcJsonrpcErrorMessage
  case messageType
  case messageId
  case messageCompressedSize
  case messageUncompressedSize
  case exception
  public struct DbSystemValues : Swift.CustomStringConvertible {
    public static let otherSql: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let mssql: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let mysql: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let oracle: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let db2: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let postgresql: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let redshift: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let hive: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let cloudscape: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let hsqldb: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let progress: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let maxdb: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let hanadb: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let ingres: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let firstsql: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let edb: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let cache: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let adabas: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let firebird: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let derby: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let filemaker: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let informix: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let instantdb: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let interbase: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let mariadb: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let netezza: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let pervasive: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let pointbase: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let sqlite: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let sybase: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let teradata: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let vertica: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let h2: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let coldfusion: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let cassandra: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let hbase: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let mongodb: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let redis: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let couchbase: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let couchdb: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let cosmosdb: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let dynamodb: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let neo4j: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let geode: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let elasticsearch: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let memcached: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public static let cockroachdb: NbmapCoreNavigation.SemanticAttributes.DbSystemValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public enum NetTransportValues : Swift.String {
    case ip_tcp
    case ip_udp
    case ip
    case unix
    case pipe
    case inproc
    case other
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DbCassandraConsistencyLevelValues : Swift.String {
    case all
    case each_quorum
    case quorum
    case local_quorum
    case one
    case two
    case three
    case local_one
    case any
    case serial
    case local_serial
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum FaasTriggerValues : Swift.String {
    case datasource
    case http
    case pubsub
    case timer
    case other
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct FaasDocumentOperationValues : Swift.CustomStringConvertible {
    public static let insert: NbmapCoreNavigation.SemanticAttributes.FaasDocumentOperationValues
    public static let edit: NbmapCoreNavigation.SemanticAttributes.FaasDocumentOperationValues
    public static let delete: NbmapCoreNavigation.SemanticAttributes.FaasDocumentOperationValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct HttpFlavorValues : Swift.CustomStringConvertible {
    public static let http10: NbmapCoreNavigation.SemanticAttributes.HttpFlavorValues
    public static let http11: NbmapCoreNavigation.SemanticAttributes.HttpFlavorValues
    public static let http20: NbmapCoreNavigation.SemanticAttributes.HttpFlavorValues
    public static let spdy: NbmapCoreNavigation.SemanticAttributes.HttpFlavorValues
    public static let quic: NbmapCoreNavigation.SemanticAttributes.HttpFlavorValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct NetHostConnectionTypeValues : Swift.CustomStringConvertible {
    public static let wifi: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionTypeValues
    public static let wired: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionTypeValues
    public static let cell: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionTypeValues
    public static let unavailable: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionTypeValues
    public static let unknown: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionTypeValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct NetHostConnectionSubtypeValues : Swift.CustomStringConvertible {
    public static let gprs: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let edge: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let umts: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let cdma: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let evdo0: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let evdoA: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let cdma20001xrtt: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let hsdpa: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let hsupa: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let hspa: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let iden: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let evdoB: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let lte: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let ehrpd: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let hspap: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let gsm: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let tdScdma: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let iwlan: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let nr: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let nrnsa: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let lteCa: NbmapCoreNavigation.SemanticAttributes.NetHostConnectionSubtypeValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public enum MessagingDestinationKindValues : Swift.String {
    case queue
    case topic
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct FaasInvokedProviderValues : Swift.CustomStringConvertible {
    public static let alibabaCloud: NbmapCoreNavigation.SemanticAttributes.FaasInvokedProviderValues
    public static let aws: NbmapCoreNavigation.SemanticAttributes.FaasInvokedProviderValues
    public static let azure: NbmapCoreNavigation.SemanticAttributes.FaasInvokedProviderValues
    public static let gcp: NbmapCoreNavigation.SemanticAttributes.FaasInvokedProviderValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public enum MessagingOperationValues : Swift.String {
    case receive
    case process
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum RpcGrpcStatusCodeValues : Swift.Int {
    case ok
    case cancelled
    case unknown
    case invalid_argument
    case deadline_exceeded
    case not_found
    case already_exists
    case permission_denied
    case resource_exhausted
    case failed_precondition
    case aborted
    case out_of_range
    case unimplemented
    case `internal`
    case unavailable
    case data_loss
    case unauthenticated
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum MessageTypeValues : Swift.String {
    case sent
    case received
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension NbmapCoreNavigation.Message {
  public init(unpackingAny: NbmapCoreNavigation.Google_Protobuf_Any, extensions: (any NbmapCoreNavigation.ExtensionMap)? = nil, options: NbmapCoreNavigation.BinaryDecodingOptions = BinaryDecodingOptions()) throws
}
public protocol LogRecordProcessor {
  func onEmit(logRecord: NbmapCoreNavigation.ReadableLogRecord)
  func forceFlush() -> NbmapCoreNavigation.ExportResult
  func shutdown() -> NbmapCoreNavigation.ExportResult
}
public protocol IDeviceDataSource {
  var identifier: Swift.String? { get }
  var model: Swift.String? { get }
}
public enum OffRouteStatus {
  case OFF_ROUTE
  case ON_TRACK
  case GUIDANCE
  public static func == (a: NbmapCoreNavigation.OffRouteStatus, b: NbmapCoreNavigation.OffRouteStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Google_Protobuf_Duration {
  public var seconds: Swift.Int64
  public var nanos: Swift.Int32
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
extension NbmapCoreNavigation.Google_Protobuf_Duration : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_Duration : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_Duration, rhs: NbmapCoreNavigation.Google_Protobuf_Duration) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Opentelemetry_Proto_Resource_V1_Resource {
  public var attributes: [NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_KeyValue]
  public var droppedAttributesCount: Swift.UInt32
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Resource_V1_Resource : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Resource_V1_Resource : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Opentelemetry_Proto_Resource_V1_Resource, rhs: NbmapCoreNavigation.Opentelemetry_Proto_Resource_V1_Resource) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol CounterMetric {
  associatedtype T
  func add(value: Self.T, labelset: NbmapCoreNavigation.LabelSet)
  func add(value: Self.T, labels: [Swift.String : Swift.String])
  func bind(labelset: NbmapCoreNavigation.LabelSet) -> NbmapCoreNavigation.BoundCounterMetric<Self.T>
  func bind(labels: [Swift.String : Swift.String]) -> NbmapCoreNavigation.BoundCounterMetric<Self.T>
}
public struct AnyCounterMetric<T> : NbmapCoreNavigation.CounterMetric {
  public init<U>(_ countable: U) where T == U.T, U : NbmapCoreNavigation.CounterMetric
  public func add(value: T, labelset: NbmapCoreNavigation.LabelSet)
  public func add(value: T, labels: [Swift.String : Swift.String])
  public func bind(labelset: NbmapCoreNavigation.LabelSet) -> NbmapCoreNavigation.BoundCounterMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> NbmapCoreNavigation.BoundCounterMetric<T>
}
public struct NoopCounterMetric<T> : NbmapCoreNavigation.CounterMetric {
  public init()
  public func add(value: T, labelset: NbmapCoreNavigation.LabelSet)
  public func add(value: T, labels: [Swift.String : Swift.String])
  public func bind(labelset: NbmapCoreNavigation.LabelSet) -> NbmapCoreNavigation.BoundCounterMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> NbmapCoreNavigation.BoundCounterMetric<T>
}
@_hasMissingDesignatedInitializers public class TracerSdk : NbmapCoreNavigation.Tracer {
  final public let instrumentationScopeInfo: NbmapCoreNavigation.InstrumentationScopeInfo
  public func spanBuilder(spanName: Swift.String) -> any NbmapCoreNavigation.SpanBuilder
  @objc deinit
}
public struct TraceFlags : Swift.Equatable, Swift.CustomStringConvertible, Swift.Codable {
  public var byte: Swift.UInt8 {
    get
  }
  public var hexString: Swift.String {
    get
  }
  public init()
  public init(fromByte src: Swift.UInt8)
  public init(fromHexString hex: Swift.String, withOffset offset: Swift.Int = 0)
  public var sampled: Swift.Bool {
    get
  }
  public mutating func setIsSampled(_ isSampled: Swift.Bool)
  public func settingIsSampled(_ isSampled: Swift.Bool) -> NbmapCoreNavigation.TraceFlags
  public var description: Swift.String {
    get
  }
  public static func == (a: NbmapCoreNavigation.TraceFlags, b: NbmapCoreNavigation.TraceFlags) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias LocationCoordinate2D = CoreLocation.CLLocationCoordinate2D
public protocol Router : CoreLocation.CLLocationManagerDelegate, NbmapCoreNavigation.AlternativeRouteDelegate {
  var routeProgress: NbmapCoreNavigation.RouteProgress { get }
  var location: CoreLocation.CLLocation? { get }
  var rawLocation: CoreLocation.CLLocation? { get }
  var route: NbmapCoreNavigation.Route { get }
  var routes: [NbmapCoreNavigation.Route] { get }
  var delegate: (any NbmapCoreNavigation.RouterDelegate)? { get set }
  var simulationModel: Swift.Bool { get set }
  var routingProvider: any NbmapCoreNavigation.RoutingProvider { get }
  func onStationaryStatusUpdate(isMoving: Swift.Bool)
  func onLegRemoved(legIndex: Swift.Int)
}
public struct ArrayWithCapacity<T> {
  public let capacity: Swift.Int
  public init(capacity: Swift.Int)
  public mutating func append(_ item: T)
}
extension NbmapCoreNavigation.ArrayWithCapacity : Swift.MutableCollection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> T {
    get
    set
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public typealias Element = T
  public typealias Index = Swift.Int
  public typealias Indices = Swift.DefaultIndices<NbmapCoreNavigation.ArrayWithCapacity<T>>
  public typealias Iterator = Swift.IndexingIterator<NbmapCoreNavigation.ArrayWithCapacity<T>>
  public typealias SubSequence = Swift.Slice<NbmapCoreNavigation.ArrayWithCapacity<T>>
}
public class OtlpHttpExporterBase {
  public init(endpoint: Foundation.URL, useSession: Foundation.URLSession? = nil, token: Swift.String? = nil)
  public func createRequest(body: any NbmapCoreNavigation.Message, endpoint: Foundation.URL) -> Foundation.URLRequest
  public func shutdown()
  @objc deinit
}
public protocol Clock : AnyObject {
  var now: Foundation.Date { get }
}
extension NbmapCoreNavigation.Clock {
  public var nanoTime: Swift.UInt64 {
    get
  }
}
public func == (lhs: any NbmapCoreNavigation.Clock, rhs: any NbmapCoreNavigation.Clock) -> Swift.Bool
@objc(NBTransportType) public enum TransportType : Swift.Int, Swift.CustomStringConvertible {
  case none
  case automobile
  case ferry
  case movableBridge
  case inaccessible
  case walking
  case cycling
  case train
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(NBManeuverType) public enum ManeuverType : Swift.Int, Swift.CustomStringConvertible {
  case none
  case depart
  case turn
  case `continue`
  case passNameChange
  case merge
  case takeOnRamp
  case takeOffRamp
  case reachFork
  case reachEnd
  case useLane
  case takeRoundabout
  case takeRotary
  case turnAtRoundabout
  case exitRoundabout
  case exitRotary
  case heedWarning
  case arrive
  case passWaypoint
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(NBManeuverDirection) public enum ManeuverDirection : Swift.Int, Swift.CustomStringConvertible {
  case none
  case sharpRight
  case right
  case slightRight
  case straightAhead
  case slightLeft
  case left
  case sharpLeft
  case uTurn
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(NBDrivingSide) public enum DrivingSide : Swift.Int, Swift.CustomStringConvertible {
  case left
  case right
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(NBRouteStep) open class RouteStep : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  public init(transportType: NbmapCoreNavigation.TransportType, maneuverType: NbmapCoreNavigation.ManeuverType, maneuverDirection: NbmapCoreNavigation.ManeuverDirection, maneuverLocation: CoreLocation.CLLocationCoordinate2D, exitIndex: Swift.Int?, instructions: Swift.String, stepCoordinates: [CoreLocation.CLLocationCoordinate2D]?, initialHeading: CoreLocation.CLLocationDirection?, finalHeading: CoreLocation.CLLocationDirection?, startLocation: CoreLocation.CLLocationCoordinate2D?, endLocation: CoreLocation.CLLocationCoordinate2D?, drivingSide: NbmapCoreNavigation.DrivingSide, exitCodes: [Swift.String]?, exitNames: [Swift.String]?, phoneticExitNames: [Swift.String]?, distance: CoreLocation.CLLocationDistance, expectedTravelTime: Foundation.TimeInterval, names: [Swift.String]?, phoneticNames: [Swift.String]?, codes: [Swift.String]?, destinationCodes: [Swift.String]?, destinations: [Swift.String]?, shiledImageUrl: Foundation.URL?, shiledLabel: Swift.String?, intersections: [NbmapCoreNavigation.Intersection]?, instructionsSpokenAlongStep: [NbmapCoreNavigation.SpokenInstruction]?, instructionsDisplayedAlongStep: [NbmapCoreNavigation.VisualInstructionBanner]?, muted: Swift.Bool?, bearing: CoreLocation.CLLocationDirection? = nil, displayInstruction: Swift.String?)
  @objc(initWithJSON:options:) convenience public init(json: [Swift.String : Any], options: NbmapCoreNavigation.DirectionsOptions)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc final public let coordinates: [CoreLocation.CLLocationCoordinate2D]?
  @objc open var coordinateCount: Swift.UInt {
    @objc get
  }
  @objc open func getCoordinates(_ coordinates: Swift.UnsafeMutablePointer<CoreLocation.CLLocationCoordinate2D>) -> Swift.Bool
  @objc final public let instructions: Swift.String
  @objc final public let displayInstruction: Swift.String?
  @objc public var instructionsSpokenAlongStep: [NbmapCoreNavigation.SpokenInstruction]?
  @objc public var instructionsDisplayedAlongStep: [NbmapCoreNavigation.VisualInstructionBanner]?
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  final public let startLocation: CoreLocation.CLLocationCoordinate2D?
  final public let endLocation: CoreLocation.CLLocationCoordinate2D?
  final public let initialHeading: CoreLocation.CLLocationDirection?
  final public let finalHeading: CoreLocation.CLLocationDirection?
  final public let bearing: CoreLocation.CLLocationDirection?
  @objc final public let maneuverType: NbmapCoreNavigation.ManeuverType
  @objc final public let maneuverDirection: NbmapCoreNavigation.ManeuverDirection
  final public let muted: Swift.Bool?
  final public let drivingSide: NbmapCoreNavigation.DrivingSide
  @objc final public let maneuverLocation: CoreLocation.CLLocationCoordinate2D
  final public let exitIndex: Swift.Int?
  @objc final public let exitCodes: [Swift.String]?
  @objc final public let exitNames: [Swift.String]?
  @objc final public let phoneticExitNames: [Swift.String]?
  @objc final public let distance: CoreLocation.CLLocationDistance
  @objc final public let expectedTravelTime: Foundation.TimeInterval
  @objc final public let names: [Swift.String]?
  @objc final public let phoneticNames: [Swift.String]?
  @objc final public let codes: [Swift.String]?
  @objc final public let transportType: NbmapCoreNavigation.TransportType
  @objc final public let destinationCodes: [Swift.String]?
  @objc final public let destinations: [Swift.String]?
  @objc final public let intersections: [NbmapCoreNavigation.Intersection]?
  @objc final public let shiledImageUrl: Foundation.URL?
  @objc final public let shiledLabel: Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NBNavigationRouteOptions) open class NavigationRouteOptions : NbmapCoreNavigation.RouteOptions {
  @objc required public init(waypoints: [NbmapCoreNavigation.Waypoint], profile: NbmapCoreNavigation.NBNavigationMode)
  @objc convenience public init(locations: [CoreLocation.CLLocation], profileIdentifier: NbmapCoreNavigation.NBNavigationMode? = .car)
  @objc convenience public init(coordinates: [CoreLocation.CLLocationCoordinate2D], profileIdentifier: NbmapCoreNavigation.NBNavigationMode? = .car)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  override open var apiEndpoint: Foundation.URL {
    get
  }
  @objc deinit
}
public struct EntryMetadata : Swift.Equatable {
  public var metadata: Swift.String
  public init?(metadata: Swift.String?)
  public static func == (a: NbmapCoreNavigation.EntryMetadata, b: NbmapCoreNavigation.EntryMetadata) -> Swift.Bool
}
public struct _NameMap : Swift.ExpressibleByDictionaryLiteral {
  public enum NameDescription {
    case same(proto: Swift.StaticString)
    case standard(proto: Swift.StaticString)
    case unique(proto: Swift.StaticString, json: Swift.StaticString)
    case aliased(proto: Swift.StaticString, aliases: [Swift.StaticString])
  }
  public init()
  public init(dictionaryLiteral elements: (Swift.Int, NbmapCoreNavigation._NameMap.NameDescription)...)
  public typealias Key = Swift.Int
  public typealias Value = NbmapCoreNavigation._NameMap.NameDescription
}
public typealias JSONDictionary = [Swift.String : Any]
public struct EnvVarHeaders {
  public static let attributes: [(Swift.String, Swift.String)]?
  public static func attributes(for rawEnvAttributes: Swift.String? = ProcessInfo.processInfo.environment["OTEL_EXPORTER_OTLP_HEADERS"]) -> [(Swift.String, Swift.String)]?
}
public enum Google_Protobuf_Syntax : NbmapCoreNavigation.Enum {
  public typealias RawValue = Swift.Int
  case proto2
  case proto3
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_Syntax : Swift.CaseIterable {
  public static var allCases: [NbmapCoreNavigation.Google_Protobuf_Syntax]
  public typealias AllCases = [NbmapCoreNavigation.Google_Protobuf_Syntax]
}
public struct Google_Protobuf_Type {
  public var name: Swift.String
  public var fields: [NbmapCoreNavigation.Google_Protobuf_Field]
  public var oneofs: [Swift.String]
  public var options: [NbmapCoreNavigation.Google_Protobuf_Option]
  public var sourceContext: NbmapCoreNavigation.Google_Protobuf_SourceContext {
    get
    set
  }
  public var hasSourceContext: Swift.Bool {
    get
  }
  public mutating func clearSourceContext()
  public var syntax: NbmapCoreNavigation.Google_Protobuf_Syntax
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Google_Protobuf_Field {
  public var kind: NbmapCoreNavigation.Google_Protobuf_Field.Kind
  public var cardinality: NbmapCoreNavigation.Google_Protobuf_Field.Cardinality
  public var number: Swift.Int32
  public var name: Swift.String
  public var typeURL: Swift.String
  public var oneofIndex: Swift.Int32
  public var packed: Swift.Bool
  public var options: [NbmapCoreNavigation.Google_Protobuf_Option]
  public var jsonName: Swift.String
  public var defaultValue: Swift.String
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public enum Kind : NbmapCoreNavigation.Enum {
    public typealias RawValue = Swift.Int
    case typeUnknown
    case typeDouble
    case typeFloat
    case typeInt64
    case typeUint64
    case typeInt32
    case typeFixed64
    case typeFixed32
    case typeBool
    case typeString
    case typeGroup
    case typeMessage
    case typeBytes
    case typeUint32
    case typeEnum
    case typeSfixed32
    case typeSfixed64
    case typeSint32
    case typeSint64
    case UNRECOGNIZED(Swift.Int)
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Cardinality : NbmapCoreNavigation.Enum {
    public typealias RawValue = Swift.Int
    case unknown
    case optional
    case required
    case repeated
    case UNRECOGNIZED(Swift.Int)
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
}
extension NbmapCoreNavigation.Google_Protobuf_Field.Kind : Swift.CaseIterable {
  public static var allCases: [NbmapCoreNavigation.Google_Protobuf_Field.Kind]
  public typealias AllCases = [NbmapCoreNavigation.Google_Protobuf_Field.Kind]
}
extension NbmapCoreNavigation.Google_Protobuf_Field.Cardinality : Swift.CaseIterable {
  public static var allCases: [NbmapCoreNavigation.Google_Protobuf_Field.Cardinality]
  public typealias AllCases = [NbmapCoreNavigation.Google_Protobuf_Field.Cardinality]
}
public struct Google_Protobuf_Enum {
  public var name: Swift.String
  public var enumvalue: [NbmapCoreNavigation.Google_Protobuf_EnumValue]
  public var options: [NbmapCoreNavigation.Google_Protobuf_Option]
  public var sourceContext: NbmapCoreNavigation.Google_Protobuf_SourceContext {
    get
    set
  }
  public var hasSourceContext: Swift.Bool {
    get
  }
  public mutating func clearSourceContext()
  public var syntax: NbmapCoreNavigation.Google_Protobuf_Syntax
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Google_Protobuf_EnumValue {
  public var name: Swift.String
  public var number: Swift.Int32
  public var options: [NbmapCoreNavigation.Google_Protobuf_Option]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Google_Protobuf_Option {
  public var name: Swift.String
  public var value: NbmapCoreNavigation.Google_Protobuf_Any {
    get
    set
  }
  public var hasValue: Swift.Bool {
    get
  }
  public mutating func clearValue()
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
extension NbmapCoreNavigation.Google_Protobuf_Syntax : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_Type : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_Field : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_Field.Kind : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_Field.Cardinality : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_Enum : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_EnumValue : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_Option : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_Syntax : NbmapCoreNavigation._ProtoNameProviding {
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
}
extension NbmapCoreNavigation.Google_Protobuf_Type : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_Type, rhs: NbmapCoreNavigation.Google_Protobuf_Type) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_Field : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_Field, rhs: NbmapCoreNavigation.Google_Protobuf_Field) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_Field.Kind : NbmapCoreNavigation._ProtoNameProviding {
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
}
extension NbmapCoreNavigation.Google_Protobuf_Field.Cardinality : NbmapCoreNavigation._ProtoNameProviding {
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
}
extension NbmapCoreNavigation.Google_Protobuf_Enum : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_Enum, rhs: NbmapCoreNavigation.Google_Protobuf_Enum) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_EnumValue : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_EnumValue, rhs: NbmapCoreNavigation.Google_Protobuf_EnumValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_Option : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_Option, rhs: NbmapCoreNavigation.Google_Protobuf_Option) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Attribute : Swift.Codable {
  public struct Value : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(NBVisualInstruction) open class VisualInstruction : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc final public let text: Swift.String?
  @objc final public let instruction: Swift.String?
  @objc public var maneuverType: NbmapCoreNavigation.ManeuverType
  @objc public var maneuverDirection: NbmapCoreNavigation.ManeuverDirection
  @objc final public let components: [any NbmapCoreNavigation.ComponentRepresentable]
  @objc public var finalHeading: Swift.Double
  @objc public init(text: Swift.String?, instruction: Swift.String?, maneuverType: NbmapCoreNavigation.ManeuverType, maneuverDirection: NbmapCoreNavigation.ManeuverDirection, components: [any NbmapCoreNavigation.ComponentRepresentable], degrees: CoreLocation.CLLocationDegrees = 180)
  @objc(initWithJSON:) convenience public init(json: [Swift.String : Any])
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
public protocol ExtensionMap {
  subscript(messageType: any NbmapCoreNavigation.Message.Type, fieldNumber: Swift.Int) -> (any NbmapCoreNavigation.AnyMessageExtension)? { get }
  func fieldNumberForProto(messageType: any NbmapCoreNavigation.Message.Type, protoFieldName: Swift.String) -> Swift.Int?
}
@_hasMissingDesignatedInitializers public class LogRecordBuilderSdk : NbmapCoreNavigation.EventBuilder {
  public func setObservedTimestamp(_ observed: Foundation.Date) -> Self
  public func setSpanContext(_ context: NbmapCoreNavigation.SpanContext) -> Self
  public func setSeverity(_ severity: NbmapCoreNavigation.Severity) -> Self
  public func setBody(_ body: Swift.String) -> Self
  public func setAttributes(_ attributes: [Swift.String : NbmapCoreNavigation.AttributeValue]) -> Self
  public func emit()
  @objc deinit
}
public protocol ProtobufAPIVersion_2 {
}
public protocol ProtobufAPIVersionCheck {
  associatedtype Version : NbmapCoreNavigation.ProtobufAPIVersion_2
}
public class ZipkinBaggagePropagator : NbmapCoreNavigation.TextMapBaggagePropagator {
  public static let baggagePrefix: Swift.String
  final public let fields: Swift.Set<Swift.String>
  public init()
  public func inject<S>(baggage: any NbmapCoreNavigation.Baggage, carrier: inout [Swift.String : Swift.String], setter: S) where S : NbmapCoreNavigation.Setter
  public func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> (any NbmapCoreNavigation.Baggage)? where G : NbmapCoreNavigation.Getter
  @objc deinit
}
public struct BinaryDecodingOptions {
  public var messageDepthLimit: Swift.Int
  public var discardUnknownFields: Swift.Bool
  public init()
}
@_hasMissingDesignatedInitializers open class NBDrivingSideUtils {
  @objc deinit
}
public struct Google_Protobuf_DoubleValue {
  public var value: Swift.Double
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Google_Protobuf_FloatValue {
  public var value: Swift.Float
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Google_Protobuf_Int64Value {
  public var value: Swift.Int64
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Google_Protobuf_UInt64Value {
  public var value: Swift.UInt64
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Google_Protobuf_Int32Value {
  public var value: Swift.Int32
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Google_Protobuf_UInt32Value {
  public var value: Swift.UInt32
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Google_Protobuf_BoolValue {
  public var value: Swift.Bool
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Google_Protobuf_StringValue {
  public var value: Swift.String
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Google_Protobuf_BytesValue {
  public var value: Foundation.Data
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
extension NbmapCoreNavigation.Google_Protobuf_DoubleValue : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_FloatValue : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_Int64Value : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_UInt64Value : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_Int32Value : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_UInt32Value : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_BoolValue : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_StringValue : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_BytesValue : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_DoubleValue : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_DoubleValue, rhs: NbmapCoreNavigation.Google_Protobuf_DoubleValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_FloatValue : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_FloatValue, rhs: NbmapCoreNavigation.Google_Protobuf_FloatValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_Int64Value : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_Int64Value, rhs: NbmapCoreNavigation.Google_Protobuf_Int64Value) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_UInt64Value : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_UInt64Value, rhs: NbmapCoreNavigation.Google_Protobuf_UInt64Value) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_Int32Value : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_Int32Value, rhs: NbmapCoreNavigation.Google_Protobuf_Int32Value) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_UInt32Value : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_UInt32Value, rhs: NbmapCoreNavigation.Google_Protobuf_UInt32Value) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_BoolValue : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_BoolValue, rhs: NbmapCoreNavigation.Google_Protobuf_BoolValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_StringValue : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_StringValue, rhs: NbmapCoreNavigation.Google_Protobuf_StringValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_BytesValue : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_BytesValue, rhs: NbmapCoreNavigation.Google_Protobuf_BytesValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Resource : Swift.Equatable, Swift.Hashable, Swift.Codable {
  public var attributes: [Swift.String : NbmapCoreNavigation.AttributeValue]
  public init()
  public init(attributes: [Swift.String : NbmapCoreNavigation.AttributeValue])
  public mutating func merge(other: NbmapCoreNavigation.Resource)
  public func merging(other: NbmapCoreNavigation.Resource) -> NbmapCoreNavigation.Resource
  public static func == (a: NbmapCoreNavigation.Resource, b: NbmapCoreNavigation.Resource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@objc(NBMeasurementSystem) public enum MeasurementSystem : Swift.UInt, Swift.CustomStringConvertible {
  case imperial
  case metric
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
extension Foundation.DateComponentsFormatter {
  public static let fullDateComponentsFormatter: Foundation.DateComponentsFormatter
  public static let shortDateComponentsFormatter: Foundation.DateComponentsFormatter
  public static let briefDateComponentsFormatter: Foundation.DateComponentsFormatter
  public static func travelDurationUnitStyle(interval: Foundation.TimeInterval) -> Foundation.DateComponentsFormatter.UnitsStyle
  public static func travelTimeString(_ interval: Foundation.TimeInterval, signed: Swift.Bool, unitStyle: Foundation.DateComponentsFormatter.UnitsStyle?) -> Swift.String
}
public enum Internal {
  public static let emptyData: Foundation.Data
  public static func areAllInitialized(_ listOfMessages: [any NbmapCoreNavigation.Message]) -> Swift.Bool
  public static func areAllInitialized<K>(_ mapToMessages: [K : any NbmapCoreNavigation.Message]) -> Swift.Bool where K : Swift.Hashable
}
public struct EnvironmentContextPropagator : NbmapCoreNavigation.TextMapPropagator {
  public let fields: Swift.Set<Swift.String>
  public init()
  public func inject<S>(spanContext: NbmapCoreNavigation.SpanContext, carrier: inout [Swift.String : Swift.String], setter: S) where S : NbmapCoreNavigation.Setter
  public func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> NbmapCoreNavigation.SpanContext? where G : NbmapCoreNavigation.Getter
}
public protocol OffRouteDetectorDelegate : ObjectiveC.NSObjectProtocol {
  func offRouteDetactor(_ detactor: any NbmapCoreNavigation.OffRouteDetector, shouldPreventReroutesWhenArrivingAt waypoint: NbmapCoreNavigation.Waypoint) -> Swift.Bool
  func offRouteDetactor(_ detactor: any NbmapCoreNavigation.OffRouteDetector, shouldRerouteFrom location: CoreLocation.CLLocation) -> Swift.Bool
  func offRouteDetactor(_ detactor: any NbmapCoreNavigation.OffRouteDetector, shouldAdvanceStepIndex to: Swift.Array<NbmapCoreNavigation.RouteStep>.Index?)
  func offRouteDetactor(_ detactor: any NbmapCoreNavigation.OffRouteDetector, shouldForwardStepIndex to: Swift.Array<NbmapCoreNavigation.RouteStep>.Index?)
  func offRouteDetactorIsMoving() -> Swift.Bool
}
public protocol OffRouteDetector {
  func userOffRouteStatus(_ location: CoreLocation.CLLocation, routeProgress: NbmapCoreNavigation.RouteProgress) -> NbmapCoreNavigation.OffRouteStatus
  var delegate: (any NbmapCoreNavigation.OffRouteDetectorDelegate)? { get set }
  func newRouteHasBeenSet()
  func updateLastReroutePoint(location: CoreLocation.CLLocation)
}
public class NBOffRouteDetector : NbmapCoreNavigation.OffRouteDetector {
  weak public var delegate: (any NbmapCoreNavigation.OffRouteDetectorDelegate)?
  public var validOffRouteCheckOfTrip: Swift.Bool {
    get
  }
  public init(navigationEngConfig: NbmapCoreNavigation.NavigationEngineConfig, snapDistanceTracker: NbmapCoreNavigation.SnapDistanceTracker? = nil, delegate: (any NbmapCoreNavigation.OffRouteDetectorDelegate)? = nil, toleranceCalculator: (any NbmapCoreNavigation.ThresholdCalculator)? = nil, movingAwayHelper: NbmapCoreNavigation.MovingAwayHelper? = nil)
  public func userOffRouteStatus(_ location: CoreLocation.CLLocation, routeProgress: NbmapCoreNavigation.RouteProgress) -> NbmapCoreNavigation.OffRouteStatus
  public func updateLastReroutePoint(location: CoreLocation.CLLocation)
  public func newRouteHasBeenSet()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultBaggageManagerProvider : NbmapCoreNavigation.BaggageManagerProvider {
  public static var instance: NbmapCoreNavigation.DefaultBaggageManagerProvider
  public func create() -> any NbmapCoreNavigation.BaggageManager
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ConfigurationMapStyle : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public init(styleId: Swift.Int, styleBright: Swift.String, styleDark: Swift.String, styleSatellite: Swift.String)
  @objc convenience override dynamic public init()
  convenience public init(json: NbmapCoreNavigation.JSONDictionary)
  @objc required public init?(coder: Foundation.NSCoder)
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc final public let styleId: Swift.Int
  @objc final public let styleBright: Swift.String
  @objc final public let styleDark: Swift.String
  @objc final public let styleSatellite: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DeviceResourceProvider : NbmapCoreNavigation.ResourceProvider {
  public init(source: any NbmapCoreNavigation.IDeviceDataSource)
  override public var attributes: [Swift.String : NbmapCoreNavigation.AttributeValue] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NextBillionConfig {
  public static func initialize(completionHandler: @escaping (_ configurationResponse: NbmapCoreNavigation.ConfigurationResponse) -> Swift.Void, errorHandler: @escaping (_ configurationResponse: NbmapCoreNavigation.ConfigurationResponse, _ error: Foundation.NSError) -> Swift.Void, apiNotInvokedHandler: @escaping (_ configurationResponse: NbmapCoreNavigation.ConfigurationResponse) -> Swift.Void)
  @objc deinit
}
public class TelemetryDataSource : NbmapCoreNavigation.ITelemetryDataSource {
  public init()
  public var language: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var version: Swift.String? {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class AlternativeRouteManager : ObjectiveC.NSObject {
  weak public var delegate: (any NbmapCoreNavigation.AlternativeRouteDelegate)?
  public func getFirstToForkManeuverPoint(routes: [NbmapCoreNavigation.Route], currentRoute: NbmapCoreNavigation.Route, routeProgress: NbmapCoreNavigation.RouteProgress) -> CoreLocation.CLLocationCoordinate2D?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(NBIntersection) public class Intersection : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc final public let location: CoreLocation.CLLocationCoordinate2D
  @objc final public let headings: [CoreLocation.CLLocationDirection]
  @objc final public let outletIndexes: Foundation.IndexSet
  @objc final public let approachIndex: Swift.Int
  @objc final public let outletIndex: Swift.Int
  @objc final public let approachLanes: [NbmapCoreNavigation.Lane]?
  @objc final public let usableApproachLanes: Foundation.IndexSet?
  final public let outletRoadClasses: [Swift.String]?
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
public protocol IntObserverMetricHandle {
  func observe(value: Swift.Int)
}
public struct TextFormatDecodingOptions {
  public var messageDepthLimit: Swift.Int
  public init()
}
@available(macOS 10.14, iOS 12.0, tvOS 12.0, *)
public class SignPostIntegration : NbmapCoreNavigation.SpanProcessor {
  final public let isStartRequired: Swift.Bool
  final public let isEndRequired: Swift.Bool
  final public let osLog: os.OSLog
  public init()
  public func onStart(parentContext: NbmapCoreNavigation.SpanContext?, span: any NbmapCoreNavigation.ReadableSpan)
  public func onEnd(span: any NbmapCoreNavigation.ReadableSpan)
  public func shutdown()
  public func forceFlush(timeout: Foundation.TimeInterval? = nil)
  @objc deinit
}
public struct Opentelemetry_Proto_Trace_V1_TraceConfig {
  public var sampler: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_TraceConfig.OneOf_Sampler?
  public var constantSampler: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ConstantSampler {
    get
    set
  }
  public var traceIDRatioBased: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_TraceIdRatioBased {
    get
    set
  }
  public var rateLimitingSampler: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_RateLimitingSampler {
    get
    set
  }
  public var maxNumberOfAttributes: Swift.Int64
  public var maxNumberOfTimedEvents: Swift.Int64
  public var maxNumberOfAttributesPerTimedEvent: Swift.Int64
  public var maxNumberOfLinks: Swift.Int64
  public var maxNumberOfAttributesPerLink: Swift.Int64
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public enum OneOf_Sampler : Swift.Equatable {
    case constantSampler(NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ConstantSampler)
    case traceIDRatioBased(NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_TraceIdRatioBased)
    case rateLimitingSampler(NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_RateLimitingSampler)
    public static func == (a: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_TraceConfig.OneOf_Sampler, b: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_TraceConfig.OneOf_Sampler) -> Swift.Bool
  }
  public init()
}
public struct Opentelemetry_Proto_Trace_V1_ConstantSampler {
  public var decision: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ConstantSampler.ConstantDecision
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public enum ConstantDecision : NbmapCoreNavigation.Enum {
    public typealias RawValue = Swift.Int
    case alwaysOff
    case alwaysOn
    case alwaysParent
    case UNRECOGNIZED(Swift.Int)
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ConstantSampler.ConstantDecision : Swift.CaseIterable {
  public static var allCases: [NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ConstantSampler.ConstantDecision]
  public typealias AllCases = [NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ConstantSampler.ConstantDecision]
}
public struct Opentelemetry_Proto_Trace_V1_TraceIdRatioBased {
  public var samplingRatio: Swift.Double
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Trace_V1_RateLimitingSampler {
  public var qps: Swift.Int64
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_TraceConfig : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_TraceConfig.OneOf_Sampler : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ConstantSampler : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ConstantSampler.ConstantDecision : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_TraceIdRatioBased : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_RateLimitingSampler : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_TraceConfig : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_TraceConfig, rhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_TraceConfig) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ConstantSampler : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ConstantSampler, rhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ConstantSampler) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ConstantSampler.ConstantDecision : NbmapCoreNavigation._ProtoNameProviding {
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_TraceIdRatioBased : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_TraceIdRatioBased, rhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_TraceIdRatioBased) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_RateLimitingSampler : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_RateLimitingSampler, rhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_RateLimitingSampler) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct NavigationEngineConfig : Swift.Equatable {
  public init()
  public var maxTurnCompletionOffset: Swift.Double
  public var maneuverZoneRadius: CoreLocation.CLLocationDistance
  public var deadReckoningTimeInterval: Swift.Double
  public var maxManipulatedCourseAngle: Swift.Double
  public var minManipulatedCourseAngle: Swift.Double
  public var minBearingDistance: Swift.Double
  public var minBearingAccuracy: Swift.Double
  public var userLocationSnapDistance: Swift.Double
  public var secondsBeforeReroute: Swift.Int
  public var snapToRoute: Swift.Bool
  public var enableOffRouteDetection: Swift.Bool
  public var enableFasterRouteDetection: Swift.Bool
  public var navigationCheckFasterRouteInterval: Foundation.TimeInterval
  public var navigationRerouteRequestResponseInterval: Foundation.TimeInterval
  public var manuallyEndNavigationUponCompletion: Swift.Bool
  public var minimumDistanceBeforeRerouting: CoreLocation.CLLocationDistance
  public var minimumDistanceTravelAway: CoreLocation.CLLocationDistance
  public var maximumDistanceBeforeRerouting: CoreLocation.CLLocationDistance
  public var maximumDistanceOfIntersectionArea: CoreLocation.CLLocationDistance
  public var minimumDurationBeforeRerouting: Swift.Int
  public var isDebugLoggingEnabled: Swift.Bool
  public var dynamicReroutingTolerance: Swift.Bool
  public var intermediateToleranceNumber: Swift.Int
  public var maxForceIncreaseIndicesDistance: Swift.Double
  public var minNavigationCameraZoom: Swift.Double
  public var maxNavigationCameraZoom: Swift.Double
  public var defaultNavigationCameraPitch: Swift.Double
  public var enableRoadNetworkDetector: Swift.Bool
  public var enableStationaryDetector: Swift.Bool
  public static func == (a: NbmapCoreNavigation.NavigationEngineConfig, b: NbmapCoreNavigation.NavigationEngineConfig) -> Swift.Bool
}
public struct PolylineEncoder {
  public let coordinates: [NbmapCoreNavigation.LocationCoordinate2D]?
  public let encodedPolyline: Swift.String
  public let levels: [Swift.UInt32]?
  public let encodedLevels: Swift.String?
  public var locations: [CoreLocation.CLLocation]? {
    get
  }
  @available(tvOS 9.2, *)
  public var mkPolyline: MapKit.MKPolyline? {
    get
  }
  public init(coordinates: [NbmapCoreNavigation.LocationCoordinate2D], levels: [Swift.UInt32]? = nil, precision: Swift.Double = 1e5)
  public init(encodedPolyline: Swift.String, encodedLevels: Swift.String? = nil, precision: Swift.Double = 1e5)
  public init(locations: [CoreLocation.CLLocation], levels: [Swift.UInt32]? = nil, precision: Swift.Double = 1e5)
}
public func encodeCoordinates(_ coordinates: [NbmapCoreNavigation.LocationCoordinate2D], precision: Swift.Double = 1e5) -> Swift.String
public func encodeLocations(_ locations: [CoreLocation.CLLocation], precision: Swift.Double = 1e5) -> Swift.String
public func encodeLevels(_ levels: [Swift.UInt32]) -> Swift.String
public func decodePolyline(_ encodedPolyline: Swift.String, precision: Swift.Double = 1e5) -> [NbmapCoreNavigation.LocationCoordinate2D]?
public func decodePolyline(_ encodedPolyline: Swift.String, precision: Swift.Double = 1e5) -> [CoreLocation.CLLocation]?
public func decodeLevels(_ encodedLevels: Swift.String) -> [Swift.UInt32]?
public struct EntryValue : Swift.Equatable {
  public var string: Swift.String {
    get
  }
  public init?(string: Swift.String)
  public static func == (a: NbmapCoreNavigation.EntryValue, b: NbmapCoreNavigation.EntryValue) -> Swift.Bool
}
@objc(NBEventsManager) open class DataTracking : ObjectiveC.NSObject {
  public var sessionState: NbmapCoreNavigation.SessionState {
    get
  }
  public var userInfo: [Swift.String : Swift.String?]?
  required public init(dataSource: (any NbmapCoreNavigation.NavigationEventsManagerDataSource)? = nil, accessToken possibleToken: Swift.String? = nil, telemetry: any NbmapCoreNavigation.Telemetry = NBTelemetryManager.init())
  @objc deinit
  @objc public var delaysEventFlushing: Swift.Bool
}
extension NbmapCoreNavigation.DataTracking {
  public func sendCarPlayConnectEvent()
  public func sendCarPlayDisconnectEvent()
  public func sendCancelEvent(rating: Swift.Int? = nil, comment: Swift.String? = nil)
  public func recordFeedback(type: NbmapCoreNavigation.FeedbackType = .general, description: Swift.String? = nil) -> Foundation.UUID?
  @objc dynamic public func updateFeedback(uuid: Foundation.UUID, type: NbmapCoreNavigation.FeedbackType, source: NbmapCoreNavigation.FeedbackSource, description: Swift.String?)
  @objc dynamic public func cancelFeedback(uuid: Foundation.UUID)
}
public typealias SpanProcessorCallback = ((Swift.String, NbmapCoreNavigation.SpanExporterResultCode) -> Swift.Void)
public struct SimpleSpanProcessor : NbmapCoreNavigation.SpanProcessor {
  public let isStartRequired: Swift.Bool
  public let isEndRequired: Swift.Bool
  public var processorCallback: NbmapCoreNavigation.SpanProcessorCallback?
  public func onStart(parentContext: NbmapCoreNavigation.SpanContext?, span: any NbmapCoreNavigation.ReadableSpan)
  public mutating func onEnd(span: any NbmapCoreNavigation.ReadableSpan)
  public func shutdown()
  public func forceFlush(timeout: Foundation.TimeInterval? = nil)
  public init(spanExporter: any NbmapCoreNavigation.SpanExporter)
  public func reportingOnlySampled(sampled: Swift.Bool) -> NbmapCoreNavigation.SimpleSpanProcessor
}
@objc(NBRouteShapeFormat) public enum RouteShapeFormat : Swift.UInt, Swift.CustomStringConvertible {
  case geoJSON
  case polyline
  case polyline6
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc(NBInstructionFormat) public enum InstructionFormat : Swift.UInt, Swift.CustomStringConvertible {
  case text
  case html
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
public struct Entry : Swift.Equatable, Swift.Comparable {
  public var key: NbmapCoreNavigation.EntryKey {
    get
  }
  public var value: NbmapCoreNavigation.EntryValue {
    get
  }
  public var metadata: NbmapCoreNavigation.EntryMetadata? {
    get
  }
  public init(key: NbmapCoreNavigation.EntryKey, value: NbmapCoreNavigation.EntryValue, metadata: NbmapCoreNavigation.EntryMetadata?)
  public static func < (lhs: NbmapCoreNavigation.Entry, rhs: NbmapCoreNavigation.Entry) -> Swift.Bool
  public static func == (a: NbmapCoreNavigation.Entry, b: NbmapCoreNavigation.Entry) -> Swift.Bool
}
public protocol LoggerProvider : AnyObject {
  func get(instrumentationScopeName: Swift.String) -> any NbmapCoreNavigation.Logger
  func loggerBuilder(instrumentationScopeName: Swift.String) -> any NbmapCoreNavigation.LoggerBuilder
}
public protocol ContextManager : AnyObject {
  func getCurrentContextValue(forKey: NbmapCoreNavigation.OpenTelemetryContextKeys) -> Swift.AnyObject?
  func setCurrentContextValue(forKey: NbmapCoreNavigation.OpenTelemetryContextKeys, value: Swift.AnyObject)
  func removeContextValue(forKey: NbmapCoreNavigation.OpenTelemetryContextKeys, value: Swift.AnyObject)
}
@objc(NBReplayLocationManager) open class ReplayLocationManager : NbmapCoreNavigation.NavigationLocationManager {
  @objc public var speedMultiplier: Swift.Double
  @objc public var locations: [CoreLocation.CLLocation]! {
    @objc get
    @objc set
  }
  @objc override dynamic open var location: CoreLocation.CLLocation? {
    @objc get
  }
  public init(locations: [CoreLocation.CLLocation])
  @objc deinit
  @objc override dynamic open func startUpdatingLocation()
  @objc override dynamic open func stopUpdatingLocation()
}
public class NBTripSession : NbmapCoreNavigation.TripSession {
  public static let minDurationOfLegStart: Swift.Int
  public static let halfDayDurationOfLegStart: Swift.Int
  weak public var delegate: (any NbmapCoreNavigation.NBTripSessionDelegate)?
  public init(routes: [NbmapCoreNavigation.Route], delegate: (any NbmapCoreNavigation.NBTripSessionDelegate)? = nil)
  public func getFiredEvents() -> [Swift.String : Swift.Bool]
  public func getEventKey(forLegIndex legIndex: Swift.Int, isFirstEvent: Swift.Bool) -> Swift.String
  public func onTripSession(didUpdate progress: NbmapCoreNavigation.RouteProgress)
  public func onTripSession(didSet routes: [NbmapCoreNavigation.Route])
  @objc deinit
}
extension NbmapCoreNavigation.Google_Protobuf_Duration {
  public init(seconds: Swift.Int64 = 0, nanos: Swift.Int32 = 0)
}
extension NbmapCoreNavigation.Google_Protobuf_Duration : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
  public init(floatLiteral value: Swift.Double)
}
extension NbmapCoreNavigation.Google_Protobuf_Duration {
  public init(timeInterval: Foundation.TimeInterval)
  public var timeInterval: Foundation.TimeInterval {
    get
  }
}
prefix public func - (operand: NbmapCoreNavigation.Google_Protobuf_Duration) -> NbmapCoreNavigation.Google_Protobuf_Duration
public func + (lhs: NbmapCoreNavigation.Google_Protobuf_Duration, rhs: NbmapCoreNavigation.Google_Protobuf_Duration) -> NbmapCoreNavigation.Google_Protobuf_Duration
public func - (lhs: NbmapCoreNavigation.Google_Protobuf_Duration, rhs: NbmapCoreNavigation.Google_Protobuf_Duration) -> NbmapCoreNavigation.Google_Protobuf_Duration
public func - (lhs: NbmapCoreNavigation.Google_Protobuf_Timestamp, rhs: NbmapCoreNavigation.Google_Protobuf_Timestamp) -> NbmapCoreNavigation.Google_Protobuf_Duration
public struct Google_Protobuf_Any {
  public var typeURL: Swift.String {
    get
    set
  }
  public var value: Foundation.Data {
    get
    set
  }
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
extension NbmapCoreNavigation.Google_Protobuf_Any : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_Any : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_Any, rhs: NbmapCoreNavigation.Google_Protobuf_Any) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum ExportResult {
  case success
  case failure
  public static func == (a: NbmapCoreNavigation.ExportResult, b: NbmapCoreNavigation.ExportResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Google_Protobuf_FileDescriptorSet {
  public var file: [NbmapCoreNavigation.Google_Protobuf_FileDescriptorProto]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Google_Protobuf_FileDescriptorProto {
  public var name: Swift.String {
    get
    set
  }
  public var hasName: Swift.Bool {
    get
  }
  public mutating func clearName()
  public var package: Swift.String {
    get
    set
  }
  public var hasPackage: Swift.Bool {
    get
  }
  public mutating func clearPackage()
  public var dependency: [Swift.String]
  public var publicDependency: [Swift.Int32]
  public var weakDependency: [Swift.Int32]
  public var messageType: [NbmapCoreNavigation.Google_Protobuf_DescriptorProto]
  public var enumType: [NbmapCoreNavigation.Google_Protobuf_EnumDescriptorProto]
  public var service: [NbmapCoreNavigation.Google_Protobuf_ServiceDescriptorProto]
  public var `extension`: [NbmapCoreNavigation.Google_Protobuf_FieldDescriptorProto]
  public var options: NbmapCoreNavigation.Google_Protobuf_FileOptions {
    get
    set
  }
  public var hasOptions: Swift.Bool {
    get
  }
  public mutating func clearOptions()
  public var sourceCodeInfo: NbmapCoreNavigation.Google_Protobuf_SourceCodeInfo {
    get
    set
  }
  public var hasSourceCodeInfo: Swift.Bool {
    get
  }
  public mutating func clearSourceCodeInfo()
  public var syntax: Swift.String {
    get
    set
  }
  public var hasSyntax: Swift.Bool {
    get
  }
  public mutating func clearSyntax()
  public var edition: Swift.String {
    get
    set
  }
  public var hasEdition: Swift.Bool {
    get
  }
  public mutating func clearEdition()
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Google_Protobuf_DescriptorProto {
  public var name: Swift.String {
    get
    set
  }
  public var hasName: Swift.Bool {
    get
  }
  public mutating func clearName()
  public var field: [NbmapCoreNavigation.Google_Protobuf_FieldDescriptorProto]
  public var `extension`: [NbmapCoreNavigation.Google_Protobuf_FieldDescriptorProto]
  public var nestedType: [NbmapCoreNavigation.Google_Protobuf_DescriptorProto]
  public var enumType: [NbmapCoreNavigation.Google_Protobuf_EnumDescriptorProto]
  public var extensionRange: [NbmapCoreNavigation.Google_Protobuf_DescriptorProto.ExtensionRange]
  public var oneofDecl: [NbmapCoreNavigation.Google_Protobuf_OneofDescriptorProto]
  public var options: NbmapCoreNavigation.Google_Protobuf_MessageOptions {
    get
    set
  }
  public var hasOptions: Swift.Bool {
    get
  }
  public mutating func clearOptions()
  public var reservedRange: [NbmapCoreNavigation.Google_Protobuf_DescriptorProto.ReservedRange]
  public var reservedName: [Swift.String]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public struct ExtensionRange {
    public var start: Swift.Int32 {
      get
      set
    }
    public var hasStart: Swift.Bool {
      get
    }
    public mutating func clearStart()
    public var end: Swift.Int32 {
      get
      set
    }
    public var hasEnd: Swift.Bool {
      get
    }
    public mutating func clearEnd()
    public var options: NbmapCoreNavigation.Google_Protobuf_ExtensionRangeOptions {
      get
      set
    }
    public var hasOptions: Swift.Bool {
      get
    }
    public mutating func clearOptions()
    public var unknownFields: NbmapCoreNavigation.UnknownStorage
    public init()
  }
  public struct ReservedRange {
    public var start: Swift.Int32 {
      get
      set
    }
    public var hasStart: Swift.Bool {
      get
    }
    public mutating func clearStart()
    public var end: Swift.Int32 {
      get
      set
    }
    public var hasEnd: Swift.Bool {
      get
    }
    public mutating func clearEnd()
    public var unknownFields: NbmapCoreNavigation.UnknownStorage
    public init()
  }
  public init()
}
public struct Google_Protobuf_ExtensionRangeOptions : NbmapCoreNavigation.ExtensibleMessage {
  public var uninterpretedOption: [NbmapCoreNavigation.Google_Protobuf_UninterpretedOption]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
  public var _protobuf_extensionFieldValues: NbmapCoreNavigation.ExtensionFieldValueSet
}
public struct Google_Protobuf_FieldDescriptorProto {
  public var name: Swift.String {
    get
    set
  }
  public var hasName: Swift.Bool {
    get
  }
  public mutating func clearName()
  public var number: Swift.Int32 {
    get
    set
  }
  public var hasNumber: Swift.Bool {
    get
  }
  public mutating func clearNumber()
  public var label: NbmapCoreNavigation.Google_Protobuf_FieldDescriptorProto.Label {
    get
    set
  }
  public var hasLabel: Swift.Bool {
    get
  }
  public mutating func clearLabel()
  public var type: NbmapCoreNavigation.Google_Protobuf_FieldDescriptorProto.TypeEnum {
    get
    set
  }
  public var hasType: Swift.Bool {
    get
  }
  public mutating func clearType()
  public var typeName: Swift.String {
    get
    set
  }
  public var hasTypeName: Swift.Bool {
    get
  }
  public mutating func clearTypeName()
  public var extendee: Swift.String {
    get
    set
  }
  public var hasExtendee: Swift.Bool {
    get
  }
  public mutating func clearExtendee()
  public var defaultValue: Swift.String {
    get
    set
  }
  public var hasDefaultValue: Swift.Bool {
    get
  }
  public mutating func clearDefaultValue()
  public var oneofIndex: Swift.Int32 {
    get
    set
  }
  public var hasOneofIndex: Swift.Bool {
    get
  }
  public mutating func clearOneofIndex()
  public var jsonName: Swift.String {
    get
    set
  }
  public var hasJsonName: Swift.Bool {
    get
  }
  public mutating func clearJsonName()
  public var options: NbmapCoreNavigation.Google_Protobuf_FieldOptions {
    get
    set
  }
  public var hasOptions: Swift.Bool {
    get
  }
  public mutating func clearOptions()
  public var proto3Optional: Swift.Bool {
    get
    set
  }
  public var hasProto3Optional: Swift.Bool {
    get
  }
  public mutating func clearProto3Optional()
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public enum TypeEnum : NbmapCoreNavigation.Enum {
    public typealias RawValue = Swift.Int
    case double
    case float
    case int64
    case uint64
    case int32
    case fixed64
    case fixed32
    case bool
    case string
    case group
    case message
    case bytes
    case uint32
    case `enum`
    case sfixed32
    case sfixed64
    case sint32
    case sint64
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Label : NbmapCoreNavigation.Enum {
    public typealias RawValue = Swift.Int
    case optional
    case required
    case repeated
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
}
extension NbmapCoreNavigation.Google_Protobuf_FieldDescriptorProto.TypeEnum : Swift.CaseIterable {
  public typealias AllCases = [NbmapCoreNavigation.Google_Protobuf_FieldDescriptorProto.TypeEnum]
  public static var allCases: [NbmapCoreNavigation.Google_Protobuf_FieldDescriptorProto.TypeEnum] {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_FieldDescriptorProto.Label : Swift.CaseIterable {
  public typealias AllCases = [NbmapCoreNavigation.Google_Protobuf_FieldDescriptorProto.Label]
  public static var allCases: [NbmapCoreNavigation.Google_Protobuf_FieldDescriptorProto.Label] {
    get
  }
}
public struct Google_Protobuf_OneofDescriptorProto {
  public var name: Swift.String {
    get
    set
  }
  public var hasName: Swift.Bool {
    get
  }
  public mutating func clearName()
  public var options: NbmapCoreNavigation.Google_Protobuf_OneofOptions {
    get
    set
  }
  public var hasOptions: Swift.Bool {
    get
  }
  public mutating func clearOptions()
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Google_Protobuf_EnumDescriptorProto {
  public var name: Swift.String {
    get
    set
  }
  public var hasName: Swift.Bool {
    get
  }
  public mutating func clearName()
  public var value: [NbmapCoreNavigation.Google_Protobuf_EnumValueDescriptorProto]
  public var options: NbmapCoreNavigation.Google_Protobuf_EnumOptions {
    get
    set
  }
  public var hasOptions: Swift.Bool {
    get
  }
  public mutating func clearOptions()
  public var reservedRange: [NbmapCoreNavigation.Google_Protobuf_EnumDescriptorProto.EnumReservedRange]
  public var reservedName: [Swift.String]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public struct EnumReservedRange {
    public var start: Swift.Int32 {
      get
      set
    }
    public var hasStart: Swift.Bool {
      get
    }
    public mutating func clearStart()
    public var end: Swift.Int32 {
      get
      set
    }
    public var hasEnd: Swift.Bool {
      get
    }
    public mutating func clearEnd()
    public var unknownFields: NbmapCoreNavigation.UnknownStorage
    public init()
  }
  public init()
}
public struct Google_Protobuf_EnumValueDescriptorProto {
  public var name: Swift.String {
    get
    set
  }
  public var hasName: Swift.Bool {
    get
  }
  public mutating func clearName()
  public var number: Swift.Int32 {
    get
    set
  }
  public var hasNumber: Swift.Bool {
    get
  }
  public mutating func clearNumber()
  public var options: NbmapCoreNavigation.Google_Protobuf_EnumValueOptions {
    get
    set
  }
  public var hasOptions: Swift.Bool {
    get
  }
  public mutating func clearOptions()
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Google_Protobuf_ServiceDescriptorProto {
  public var name: Swift.String {
    get
    set
  }
  public var hasName: Swift.Bool {
    get
  }
  public mutating func clearName()
  public var method: [NbmapCoreNavigation.Google_Protobuf_MethodDescriptorProto]
  public var options: NbmapCoreNavigation.Google_Protobuf_ServiceOptions {
    get
    set
  }
  public var hasOptions: Swift.Bool {
    get
  }
  public mutating func clearOptions()
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Google_Protobuf_MethodDescriptorProto {
  public var name: Swift.String {
    get
    set
  }
  public var hasName: Swift.Bool {
    get
  }
  public mutating func clearName()
  public var inputType: Swift.String {
    get
    set
  }
  public var hasInputType: Swift.Bool {
    get
  }
  public mutating func clearInputType()
  public var outputType: Swift.String {
    get
    set
  }
  public var hasOutputType: Swift.Bool {
    get
  }
  public mutating func clearOutputType()
  public var options: NbmapCoreNavigation.Google_Protobuf_MethodOptions {
    get
    set
  }
  public var hasOptions: Swift.Bool {
    get
  }
  public mutating func clearOptions()
  public var clientStreaming: Swift.Bool {
    get
    set
  }
  public var hasClientStreaming: Swift.Bool {
    get
  }
  public mutating func clearClientStreaming()
  public var serverStreaming: Swift.Bool {
    get
    set
  }
  public var hasServerStreaming: Swift.Bool {
    get
  }
  public mutating func clearServerStreaming()
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Google_Protobuf_FileOptions : NbmapCoreNavigation.ExtensibleMessage {
  public var javaPackage: Swift.String {
    get
    set
  }
  public var hasJavaPackage: Swift.Bool {
    get
  }
  public mutating func clearJavaPackage()
  public var javaOuterClassname: Swift.String {
    get
    set
  }
  public var hasJavaOuterClassname: Swift.Bool {
    get
  }
  public mutating func clearJavaOuterClassname()
  public var javaMultipleFiles: Swift.Bool {
    get
    set
  }
  public var hasJavaMultipleFiles: Swift.Bool {
    get
  }
  public mutating func clearJavaMultipleFiles()
  public var javaGenerateEqualsAndHash: Swift.Bool {
    get
    set
  }
  public var hasJavaGenerateEqualsAndHash: Swift.Bool {
    get
  }
  public mutating func clearJavaGenerateEqualsAndHash()
  public var javaStringCheckUtf8: Swift.Bool {
    get
    set
  }
  public var hasJavaStringCheckUtf8: Swift.Bool {
    get
  }
  public mutating func clearJavaStringCheckUtf8()
  public var optimizeFor: NbmapCoreNavigation.Google_Protobuf_FileOptions.OptimizeMode {
    get
    set
  }
  public var hasOptimizeFor: Swift.Bool {
    get
  }
  public mutating func clearOptimizeFor()
  public var goPackage: Swift.String {
    get
    set
  }
  public var hasGoPackage: Swift.Bool {
    get
  }
  public mutating func clearGoPackage()
  public var ccGenericServices: Swift.Bool {
    get
    set
  }
  public var hasCcGenericServices: Swift.Bool {
    get
  }
  public mutating func clearCcGenericServices()
  public var javaGenericServices: Swift.Bool {
    get
    set
  }
  public var hasJavaGenericServices: Swift.Bool {
    get
  }
  public mutating func clearJavaGenericServices()
  public var pyGenericServices: Swift.Bool {
    get
    set
  }
  public var hasPyGenericServices: Swift.Bool {
    get
  }
  public mutating func clearPyGenericServices()
  public var phpGenericServices: Swift.Bool {
    get
    set
  }
  public var hasPhpGenericServices: Swift.Bool {
    get
  }
  public mutating func clearPhpGenericServices()
  public var deprecated: Swift.Bool {
    get
    set
  }
  public var hasDeprecated: Swift.Bool {
    get
  }
  public mutating func clearDeprecated()
  public var ccEnableArenas: Swift.Bool {
    get
    set
  }
  public var hasCcEnableArenas: Swift.Bool {
    get
  }
  public mutating func clearCcEnableArenas()
  public var objcClassPrefix: Swift.String {
    get
    set
  }
  public var hasObjcClassPrefix: Swift.Bool {
    get
  }
  public mutating func clearObjcClassPrefix()
  public var csharpNamespace: Swift.String {
    get
    set
  }
  public var hasCsharpNamespace: Swift.Bool {
    get
  }
  public mutating func clearCsharpNamespace()
  public var swiftPrefix: Swift.String {
    get
    set
  }
  public var hasSwiftPrefix: Swift.Bool {
    get
  }
  public mutating func clearSwiftPrefix()
  public var phpClassPrefix: Swift.String {
    get
    set
  }
  public var hasPhpClassPrefix: Swift.Bool {
    get
  }
  public mutating func clearPhpClassPrefix()
  public var phpNamespace: Swift.String {
    get
    set
  }
  public var hasPhpNamespace: Swift.Bool {
    get
  }
  public mutating func clearPhpNamespace()
  public var phpMetadataNamespace: Swift.String {
    get
    set
  }
  public var hasPhpMetadataNamespace: Swift.Bool {
    get
  }
  public mutating func clearPhpMetadataNamespace()
  public var rubyPackage: Swift.String {
    get
    set
  }
  public var hasRubyPackage: Swift.Bool {
    get
  }
  public mutating func clearRubyPackage()
  public var uninterpretedOption: [NbmapCoreNavigation.Google_Protobuf_UninterpretedOption] {
    get
    set
  }
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public enum OptimizeMode : NbmapCoreNavigation.Enum {
    public typealias RawValue = Swift.Int
    case speed
    case codeSize
    case liteRuntime
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
  public var _protobuf_extensionFieldValues: NbmapCoreNavigation.ExtensionFieldValueSet
}
extension NbmapCoreNavigation.Google_Protobuf_FileOptions.OptimizeMode : Swift.CaseIterable {
  public typealias AllCases = [NbmapCoreNavigation.Google_Protobuf_FileOptions.OptimizeMode]
  public static var allCases: [NbmapCoreNavigation.Google_Protobuf_FileOptions.OptimizeMode] {
    get
  }
}
public struct Google_Protobuf_MessageOptions : NbmapCoreNavigation.ExtensibleMessage {
  public var messageSetWireFormat: Swift.Bool {
    get
    set
  }
  public var hasMessageSetWireFormat: Swift.Bool {
    get
  }
  public mutating func clearMessageSetWireFormat()
  public var noStandardDescriptorAccessor: Swift.Bool {
    get
    set
  }
  public var hasNoStandardDescriptorAccessor: Swift.Bool {
    get
  }
  public mutating func clearNoStandardDescriptorAccessor()
  public var deprecated: Swift.Bool {
    get
    set
  }
  public var hasDeprecated: Swift.Bool {
    get
  }
  public mutating func clearDeprecated()
  public var mapEntry: Swift.Bool {
    get
    set
  }
  public var hasMapEntry: Swift.Bool {
    get
  }
  public mutating func clearMapEntry()
  public var deprecatedLegacyJsonFieldConflicts: Swift.Bool {
    get
    set
  }
  public var hasDeprecatedLegacyJsonFieldConflicts: Swift.Bool {
    get
  }
  public mutating func clearDeprecatedLegacyJsonFieldConflicts()
  public var uninterpretedOption: [NbmapCoreNavigation.Google_Protobuf_UninterpretedOption]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
  public var _protobuf_extensionFieldValues: NbmapCoreNavigation.ExtensionFieldValueSet
}
public struct Google_Protobuf_FieldOptions : NbmapCoreNavigation.ExtensibleMessage {
  public var ctype: NbmapCoreNavigation.Google_Protobuf_FieldOptions.CType {
    get
    set
  }
  public var hasCtype: Swift.Bool {
    get
  }
  public mutating func clearCtype()
  public var packed: Swift.Bool {
    get
    set
  }
  public var hasPacked: Swift.Bool {
    get
  }
  public mutating func clearPacked()
  public var jstype: NbmapCoreNavigation.Google_Protobuf_FieldOptions.JSType {
    get
    set
  }
  public var hasJstype: Swift.Bool {
    get
  }
  public mutating func clearJstype()
  public var lazy: Swift.Bool {
    get
    set
  }
  public var hasLazy: Swift.Bool {
    get
  }
  public mutating func clearLazy()
  public var unverifiedLazy: Swift.Bool {
    get
    set
  }
  public var hasUnverifiedLazy: Swift.Bool {
    get
  }
  public mutating func clearUnverifiedLazy()
  public var deprecated: Swift.Bool {
    get
    set
  }
  public var hasDeprecated: Swift.Bool {
    get
  }
  public mutating func clearDeprecated()
  public var weak: Swift.Bool {
    get
    set
  }
  public var hasWeak: Swift.Bool {
    get
  }
  public mutating func clearWeak()
  public var debugRedact: Swift.Bool {
    get
    set
  }
  public var hasDebugRedact: Swift.Bool {
    get
  }
  public mutating func clearDebugRedact()
  public var uninterpretedOption: [NbmapCoreNavigation.Google_Protobuf_UninterpretedOption]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public enum CType : NbmapCoreNavigation.Enum {
    public typealias RawValue = Swift.Int
    case string
    case cord
    case stringPiece
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum JSType : NbmapCoreNavigation.Enum {
    public typealias RawValue = Swift.Int
    case jsNormal
    case jsString
    case jsNumber
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum OptionRetention : NbmapCoreNavigation.Enum {
    public typealias RawValue = Swift.Int
    case retentionUnknown
    case retentionRuntime
    case retentionSource
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum OptionTargetType : NbmapCoreNavigation.Enum {
    public typealias RawValue = Swift.Int
    case targetTypeUnknown
    case targetTypeFile
    case targetTypeExtensionRange
    case targetTypeMessage
    case targetTypeField
    case targetTypeOneof
    case targetTypeEnum
    case targetTypeEnumEntry
    case targetTypeService
    case targetTypeMethod
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
  public var _protobuf_extensionFieldValues: NbmapCoreNavigation.ExtensionFieldValueSet
}
extension NbmapCoreNavigation.Google_Protobuf_FieldOptions.CType : Swift.CaseIterable {
  public typealias AllCases = [NbmapCoreNavigation.Google_Protobuf_FieldOptions.CType]
  public static var allCases: [NbmapCoreNavigation.Google_Protobuf_FieldOptions.CType] {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_FieldOptions.JSType : Swift.CaseIterable {
  public typealias AllCases = [NbmapCoreNavigation.Google_Protobuf_FieldOptions.JSType]
  public static var allCases: [NbmapCoreNavigation.Google_Protobuf_FieldOptions.JSType] {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_FieldOptions.OptionRetention : Swift.CaseIterable {
  public typealias AllCases = [NbmapCoreNavigation.Google_Protobuf_FieldOptions.OptionRetention]
  public static var allCases: [NbmapCoreNavigation.Google_Protobuf_FieldOptions.OptionRetention] {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_FieldOptions.OptionTargetType : Swift.CaseIterable {
  public typealias AllCases = [NbmapCoreNavigation.Google_Protobuf_FieldOptions.OptionTargetType]
  public static var allCases: [NbmapCoreNavigation.Google_Protobuf_FieldOptions.OptionTargetType] {
    get
  }
}
public struct Google_Protobuf_OneofOptions : NbmapCoreNavigation.ExtensibleMessage {
  public var uninterpretedOption: [NbmapCoreNavigation.Google_Protobuf_UninterpretedOption]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
  public var _protobuf_extensionFieldValues: NbmapCoreNavigation.ExtensionFieldValueSet
}
public struct Google_Protobuf_EnumOptions : NbmapCoreNavigation.ExtensibleMessage {
  public var allowAlias: Swift.Bool {
    get
    set
  }
  public var hasAllowAlias: Swift.Bool {
    get
  }
  public mutating func clearAllowAlias()
  public var deprecated: Swift.Bool {
    get
    set
  }
  public var hasDeprecated: Swift.Bool {
    get
  }
  public mutating func clearDeprecated()
  public var deprecatedLegacyJsonFieldConflicts: Swift.Bool {
    get
    set
  }
  public var hasDeprecatedLegacyJsonFieldConflicts: Swift.Bool {
    get
  }
  public mutating func clearDeprecatedLegacyJsonFieldConflicts()
  public var uninterpretedOption: [NbmapCoreNavigation.Google_Protobuf_UninterpretedOption]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
  public var _protobuf_extensionFieldValues: NbmapCoreNavigation.ExtensionFieldValueSet
}
public struct Google_Protobuf_EnumValueOptions : NbmapCoreNavigation.ExtensibleMessage {
  public var deprecated: Swift.Bool {
    get
    set
  }
  public var hasDeprecated: Swift.Bool {
    get
  }
  public mutating func clearDeprecated()
  public var uninterpretedOption: [NbmapCoreNavigation.Google_Protobuf_UninterpretedOption]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
  public var _protobuf_extensionFieldValues: NbmapCoreNavigation.ExtensionFieldValueSet
}
public struct Google_Protobuf_ServiceOptions : NbmapCoreNavigation.ExtensibleMessage {
  public var deprecated: Swift.Bool {
    get
    set
  }
  public var hasDeprecated: Swift.Bool {
    get
  }
  public mutating func clearDeprecated()
  public var uninterpretedOption: [NbmapCoreNavigation.Google_Protobuf_UninterpretedOption]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
  public var _protobuf_extensionFieldValues: NbmapCoreNavigation.ExtensionFieldValueSet
}
public struct Google_Protobuf_MethodOptions : NbmapCoreNavigation.ExtensibleMessage {
  public var deprecated: Swift.Bool {
    get
    set
  }
  public var hasDeprecated: Swift.Bool {
    get
  }
  public mutating func clearDeprecated()
  public var idempotencyLevel: NbmapCoreNavigation.Google_Protobuf_MethodOptions.IdempotencyLevel {
    get
    set
  }
  public var hasIdempotencyLevel: Swift.Bool {
    get
  }
  public mutating func clearIdempotencyLevel()
  public var uninterpretedOption: [NbmapCoreNavigation.Google_Protobuf_UninterpretedOption]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public enum IdempotencyLevel : NbmapCoreNavigation.Enum {
    public typealias RawValue = Swift.Int
    case idempotencyUnknown
    case noSideEffects
    case idempotent
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
  public var _protobuf_extensionFieldValues: NbmapCoreNavigation.ExtensionFieldValueSet
}
extension NbmapCoreNavigation.Google_Protobuf_MethodOptions.IdempotencyLevel : Swift.CaseIterable {
  public typealias AllCases = [NbmapCoreNavigation.Google_Protobuf_MethodOptions.IdempotencyLevel]
  public static var allCases: [NbmapCoreNavigation.Google_Protobuf_MethodOptions.IdempotencyLevel] {
    get
  }
}
public struct Google_Protobuf_UninterpretedOption {
  public var name: [NbmapCoreNavigation.Google_Protobuf_UninterpretedOption.NamePart]
  public var identifierValue: Swift.String {
    get
    set
  }
  public var hasIdentifierValue: Swift.Bool {
    get
  }
  public mutating func clearIdentifierValue()
  public var positiveIntValue: Swift.UInt64 {
    get
    set
  }
  public var hasPositiveIntValue: Swift.Bool {
    get
  }
  public mutating func clearPositiveIntValue()
  public var negativeIntValue: Swift.Int64 {
    get
    set
  }
  public var hasNegativeIntValue: Swift.Bool {
    get
  }
  public mutating func clearNegativeIntValue()
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var hasDoubleValue: Swift.Bool {
    get
  }
  public mutating func clearDoubleValue()
  public var stringValue: Foundation.Data {
    get
    set
  }
  public var hasStringValue: Swift.Bool {
    get
  }
  public mutating func clearStringValue()
  public var aggregateValue: Swift.String {
    get
    set
  }
  public var hasAggregateValue: Swift.Bool {
    get
  }
  public mutating func clearAggregateValue()
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public struct NamePart {
    public var namePart: Swift.String {
      get
      set
    }
    public var hasNamePart: Swift.Bool {
      get
    }
    public mutating func clearNamePart()
    public var isExtension: Swift.Bool {
      get
      set
    }
    public var hasIsExtension: Swift.Bool {
      get
    }
    public mutating func clearIsExtension()
    public var unknownFields: NbmapCoreNavigation.UnknownStorage
    public init()
  }
  public init()
}
public struct Google_Protobuf_SourceCodeInfo {
  public var location: [NbmapCoreNavigation.Google_Protobuf_SourceCodeInfo.Location]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public struct Location {
    public var path: [Swift.Int32]
    public var span: [Swift.Int32]
    public var leadingComments: Swift.String {
      get
      set
    }
    public var hasLeadingComments: Swift.Bool {
      get
    }
    public mutating func clearLeadingComments()
    public var trailingComments: Swift.String {
      get
      set
    }
    public var hasTrailingComments: Swift.Bool {
      get
    }
    public mutating func clearTrailingComments()
    public var leadingDetachedComments: [Swift.String]
    public var unknownFields: NbmapCoreNavigation.UnknownStorage
    public init()
  }
  public init()
}
public struct Google_Protobuf_GeneratedCodeInfo {
  public var annotation: [NbmapCoreNavigation.Google_Protobuf_GeneratedCodeInfo.Annotation]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public struct Annotation {
    public var path: [Swift.Int32]
    public var sourceFile: Swift.String {
      get
      set
    }
    public var hasSourceFile: Swift.Bool {
      get
    }
    public mutating func clearSourceFile()
    public var begin: Swift.Int32 {
      get
      set
    }
    public var hasBegin: Swift.Bool {
      get
    }
    public mutating func clearBegin()
    public var end: Swift.Int32 {
      get
      set
    }
    public var hasEnd: Swift.Bool {
      get
    }
    public mutating func clearEnd()
    public var semantic: NbmapCoreNavigation.Google_Protobuf_GeneratedCodeInfo.Annotation.Semantic {
      get
      set
    }
    public var hasSemantic: Swift.Bool {
      get
    }
    public mutating func clearSemantic()
    public var unknownFields: NbmapCoreNavigation.UnknownStorage
    public enum Semantic : NbmapCoreNavigation.Enum {
      public typealias RawValue = Swift.Int
      case none
      case set
      case alias
      public init()
      public init?(rawValue: Swift.Int)
      public var rawValue: Swift.Int {
        get
      }
    }
    public init()
  }
  public init()
}
extension NbmapCoreNavigation.Google_Protobuf_GeneratedCodeInfo.Annotation.Semantic : Swift.CaseIterable {
  public typealias AllCases = [NbmapCoreNavigation.Google_Protobuf_GeneratedCodeInfo.Annotation.Semantic]
  public static var allCases: [NbmapCoreNavigation.Google_Protobuf_GeneratedCodeInfo.Annotation.Semantic] {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_FileDescriptorSet : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_FileDescriptorProto : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_DescriptorProto : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_DescriptorProto.ExtensionRange : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_DescriptorProto.ReservedRange : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_ExtensionRangeOptions : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_FieldDescriptorProto : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_FieldDescriptorProto.TypeEnum : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_FieldDescriptorProto.Label : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_OneofDescriptorProto : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_EnumDescriptorProto : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_EnumDescriptorProto.EnumReservedRange : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_EnumValueDescriptorProto : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_ServiceDescriptorProto : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_MethodDescriptorProto : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_FileOptions : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_FileOptions.OptimizeMode : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_MessageOptions : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_FieldOptions : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_FieldOptions.CType : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_FieldOptions.JSType : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_FieldOptions.OptionRetention : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_FieldOptions.OptionTargetType : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_OneofOptions : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_EnumOptions : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_EnumValueOptions : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_ServiceOptions : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_MethodOptions : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_MethodOptions.IdempotencyLevel : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_UninterpretedOption : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_UninterpretedOption.NamePart : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_SourceCodeInfo : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_SourceCodeInfo.Location : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_GeneratedCodeInfo : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_GeneratedCodeInfo.Annotation : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_GeneratedCodeInfo.Annotation.Semantic : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_FileDescriptorSet : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_FileDescriptorSet, rhs: NbmapCoreNavigation.Google_Protobuf_FileDescriptorSet) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_FileDescriptorProto : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_FileDescriptorProto, rhs: NbmapCoreNavigation.Google_Protobuf_FileDescriptorProto) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_DescriptorProto : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_DescriptorProto, rhs: NbmapCoreNavigation.Google_Protobuf_DescriptorProto) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_DescriptorProto.ExtensionRange : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_DescriptorProto.ExtensionRange, rhs: NbmapCoreNavigation.Google_Protobuf_DescriptorProto.ExtensionRange) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_DescriptorProto.ReservedRange : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_DescriptorProto.ReservedRange, rhs: NbmapCoreNavigation.Google_Protobuf_DescriptorProto.ReservedRange) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_ExtensionRangeOptions : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_ExtensionRangeOptions, rhs: NbmapCoreNavigation.Google_Protobuf_ExtensionRangeOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_FieldDescriptorProto : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_FieldDescriptorProto, rhs: NbmapCoreNavigation.Google_Protobuf_FieldDescriptorProto) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_FieldDescriptorProto.TypeEnum : NbmapCoreNavigation._ProtoNameProviding {
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
}
extension NbmapCoreNavigation.Google_Protobuf_FieldDescriptorProto.Label : NbmapCoreNavigation._ProtoNameProviding {
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
}
extension NbmapCoreNavigation.Google_Protobuf_OneofDescriptorProto : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_OneofDescriptorProto, rhs: NbmapCoreNavigation.Google_Protobuf_OneofDescriptorProto) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_EnumDescriptorProto : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_EnumDescriptorProto, rhs: NbmapCoreNavigation.Google_Protobuf_EnumDescriptorProto) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_EnumDescriptorProto.EnumReservedRange : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_EnumDescriptorProto.EnumReservedRange, rhs: NbmapCoreNavigation.Google_Protobuf_EnumDescriptorProto.EnumReservedRange) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_EnumValueDescriptorProto : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_EnumValueDescriptorProto, rhs: NbmapCoreNavigation.Google_Protobuf_EnumValueDescriptorProto) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_ServiceDescriptorProto : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_ServiceDescriptorProto, rhs: NbmapCoreNavigation.Google_Protobuf_ServiceDescriptorProto) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_MethodDescriptorProto : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_MethodDescriptorProto, rhs: NbmapCoreNavigation.Google_Protobuf_MethodDescriptorProto) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_FileOptions : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_FileOptions, rhs: NbmapCoreNavigation.Google_Protobuf_FileOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_FileOptions.OptimizeMode : NbmapCoreNavigation._ProtoNameProviding {
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
}
extension NbmapCoreNavigation.Google_Protobuf_MessageOptions : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_MessageOptions, rhs: NbmapCoreNavigation.Google_Protobuf_MessageOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_FieldOptions : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_FieldOptions, rhs: NbmapCoreNavigation.Google_Protobuf_FieldOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_FieldOptions.CType : NbmapCoreNavigation._ProtoNameProviding {
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
}
extension NbmapCoreNavigation.Google_Protobuf_FieldOptions.JSType : NbmapCoreNavigation._ProtoNameProviding {
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
}
extension NbmapCoreNavigation.Google_Protobuf_FieldOptions.OptionRetention : NbmapCoreNavigation._ProtoNameProviding {
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
}
extension NbmapCoreNavigation.Google_Protobuf_FieldOptions.OptionTargetType : NbmapCoreNavigation._ProtoNameProviding {
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
}
extension NbmapCoreNavigation.Google_Protobuf_OneofOptions : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_OneofOptions, rhs: NbmapCoreNavigation.Google_Protobuf_OneofOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_EnumOptions : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_EnumOptions, rhs: NbmapCoreNavigation.Google_Protobuf_EnumOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_EnumValueOptions : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_EnumValueOptions, rhs: NbmapCoreNavigation.Google_Protobuf_EnumValueOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_ServiceOptions : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_ServiceOptions, rhs: NbmapCoreNavigation.Google_Protobuf_ServiceOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_MethodOptions : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_MethodOptions, rhs: NbmapCoreNavigation.Google_Protobuf_MethodOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_MethodOptions.IdempotencyLevel : NbmapCoreNavigation._ProtoNameProviding {
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
}
extension NbmapCoreNavigation.Google_Protobuf_UninterpretedOption : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_UninterpretedOption, rhs: NbmapCoreNavigation.Google_Protobuf_UninterpretedOption) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_UninterpretedOption.NamePart : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_UninterpretedOption.NamePart, rhs: NbmapCoreNavigation.Google_Protobuf_UninterpretedOption.NamePart) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_SourceCodeInfo : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_SourceCodeInfo, rhs: NbmapCoreNavigation.Google_Protobuf_SourceCodeInfo) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_SourceCodeInfo.Location : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_SourceCodeInfo.Location, rhs: NbmapCoreNavigation.Google_Protobuf_SourceCodeInfo.Location) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_GeneratedCodeInfo : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_GeneratedCodeInfo, rhs: NbmapCoreNavigation.Google_Protobuf_GeneratedCodeInfo) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_GeneratedCodeInfo.Annotation : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_GeneratedCodeInfo.Annotation, rhs: NbmapCoreNavigation.Google_Protobuf_GeneratedCodeInfo.Annotation) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_GeneratedCodeInfo.Annotation.Semantic : NbmapCoreNavigation._ProtoNameProviding {
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
}
@_inheritsConvenienceInitializers @objc(NBNavRoute) open class Route : NbmapCoreNavigation.DirectionsResult {
  @objc(initWithJson:legs:distance:expectedTravelTime:coordinates:speechLocale:options:) public init(json: [Swift.String : Any], legs: [NbmapCoreNavigation.RouteLeg], distance: CoreLocation.CLLocationDistance, expectedTravelTime: Foundation.TimeInterval, coordinates: [CoreLocation.CLLocationCoordinate2D]?, speechLocale: Foundation.Locale?, options: NbmapCoreNavigation.DirectionsOptions)
  @objc(initWithJSON:waypoints:routeOptions:) public init(json: [Swift.String : Any], waypoints: [NbmapCoreNavigation.Waypoint], options: NbmapCoreNavigation.DirectionsOptions)
  public var routeOptions: NbmapCoreNavigation.RouteOptions {
    get
  }
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultBaggageManager : NbmapCoreNavigation.BaggageManager {
  public static var instance: NbmapCoreNavigation.DefaultBaggageManager
  public func baggageBuilder() -> any NbmapCoreNavigation.BaggageBuilder
  public func getCurrentBaggage() -> (any NbmapCoreNavigation.Baggage)?
  @objc deinit
}
public typealias LaneIndication = NbmapCoreNavigation.NBLaneIndication
extension NbmapCoreNavigation.NBLaneIndication : Swift.CustomStringConvertible {
  public init?(descriptions: [Swift.String])
  public var description: Swift.String {
    get
  }
}
public enum SpanKind : Swift.String, Swift.Equatable, Swift.Codable {
  case `internal`
  case server
  case client
  case producer
  case consumer
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc open class RouteController : ObjectiveC.NSObject, NbmapCoreNavigation.Router {
  public enum DefaultBehavior {
    public static let shouldRerouteFromLocation: Swift.Bool
    public static let shouldDiscardLocation: Swift.Bool
    public static let didArriveAtWaypoint: Swift.Bool
    public static let shouldPreventReroutesWhenArrivingAtWaypoint: Swift.Bool
    public static let shouldDisableBatteryMonitoring: Swift.Bool
  }
  public var route: NbmapCoreNavigation.Route {
    get
  }
  public var simulationModel: Swift.Bool
  public var routes: [NbmapCoreNavigation.Route] {
    get
    set
  }
  public var index: Swift.Int
  weak public var delegate: (any NbmapCoreNavigation.RouterDelegate)?
  public var routeProgress: NbmapCoreNavigation.RouteProgress {
    get
  }
  public var navigationEngConfig: NbmapCoreNavigation.NavigationEngineConfig
  public var routingProvider: any NbmapCoreNavigation.RoutingProvider {
    get
    set
  }
  public var resolvedRoutingProvider: any NbmapCoreNavigation.RoutingProvider {
    get
  }
  required public init(from routes: [NbmapCoreNavigation.Route], alongIndex index: Swift.Int, customRoutingProvider: (any NbmapCoreNavigation.RoutingProvider)? = nil, navigationEngConfig: NbmapCoreNavigation.NavigationEngineConfig? = nil, offRouteDetector: (any NbmapCoreNavigation.OffRouteDetector)? = nil, speedCalibrator: (any NbmapCoreNavigation.SpeedCalibrator)? = nil, deadReckoning: NbmapCoreNavigation.DeadReckoning? = nil)
  public func finishRouting()
  @objc deinit
  public var location: CoreLocation.CLLocation? {
    get
  }
  public var rawLocation: CoreLocation.CLLocation? {
    get
    set
  }
  public var reroutingTolerance: CoreLocation.CLLocationDistance {
    get
  }
}
extension NbmapCoreNavigation.RouteController : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateHeading newHeading: CoreLocation.CLHeading)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
}
extension NbmapCoreNavigation.RouteController : NbmapCoreNavigation.OffRouteDetectorDelegate {
  public func offRouteDetactorEnableStationaryDetector() -> Swift.Bool
  public func offRouteDetactorIsMoving() -> Swift.Bool
  public func offRouteDetactor(_ detactor: any NbmapCoreNavigation.OffRouteDetector, shouldPreventReroutesWhenArrivingAt waypoint: NbmapCoreNavigation.Waypoint) -> Swift.Bool
  public func offRouteDetactor(_ detactor: any NbmapCoreNavigation.OffRouteDetector, shouldRerouteFrom location: CoreLocation.CLLocation) -> Swift.Bool
  public func offRouteDetactor(_ detactor: any NbmapCoreNavigation.OffRouteDetector, shouldAdvanceStepIndex to: Swift.Array<NbmapCoreNavigation.RouteStep>.Index?)
  public func offRouteDetactor(_ detactor: any NbmapCoreNavigation.OffRouteDetector, shouldForwardStepIndex to: Swift.Array<NbmapCoreNavigation.RouteStep>.Index?)
}
extension NbmapCoreNavigation.RouteController : NbmapCoreNavigation.RerouteDelegate {
  public func willRerouteFrom(location: CoreLocation.CLLocation)
  public func didToReRouteWith(location: CoreLocation.CLLocation, routes: [NbmapCoreNavigation.Route])
  public func failToReRouteWith(error: any Swift.Error)
}
extension NbmapCoreNavigation.RouteController : NbmapCoreNavigation.AlternativeRouteDelegate {
  public func didSelectNewRoute(route: NbmapCoreNavigation.Route)
  public func shouldRefreshRoutes(routes: [NbmapCoreNavigation.Route])
}
extension NbmapCoreNavigation.RouteController {
  public func onStationaryStatusUpdate(isMoving: Swift.Bool)
}
extension NbmapCoreNavigation.RouteController {
  public func onLegRemoved(legIndex: Swift.Int)
}
extension NbmapCoreNavigation.RouteController : NbmapCoreNavigation.SpeedCalibratorDelegate {
  public func isStationaryDetectionEnable() -> Swift.Bool
  public func isOnMoving() -> Swift.Bool
  public func onSpeedChanged(speed: CoreLocation.CLLocationSpeed)
}
public protocol NBTripSessionDelegate : AnyObject {
  func tripSessionShouldFireEvent() -> Swift.Bool
}
public struct Version {
  public static let major: Swift.Int
  public static let minor: Swift.Int
  public static let revision: Swift.Int
  public static let versionString: Swift.String
}
extension NbmapCoreNavigation.Google_Protobuf_Any {
  @discardableResult
  public static func register(messageType: any NbmapCoreNavigation.Message.Type) -> Swift.Bool
  public static func messageType(forTypeURL url: Swift.String) -> (any NbmapCoreNavigation.Message.Type)?
  public static func messageType(forMessageName name: Swift.String) -> (any NbmapCoreNavigation.Message.Type)?
}
@_hasMissingDesignatedInitializers public class ApplicationResourceProvider : NbmapCoreNavigation.ResourceProvider {
  public init(source: any NbmapCoreNavigation.IApplicationDataSource)
  override public var attributes: [Swift.String : NbmapCoreNavigation.AttributeValue] {
    get
  }
  @objc deinit
}
public let defaultAnyTypeURLPrefix: Swift.String
extension NbmapCoreNavigation.Google_Protobuf_Any {
  public init(message: any NbmapCoreNavigation.Message, partial: Swift.Bool = false, typePrefix: Swift.String = defaultAnyTypeURLPrefix) throws
  public init(textFormatString: Swift.String, extensions: (any NbmapCoreNavigation.ExtensionMap)? = nil) throws
  public init(textFormatString: Swift.String, options: NbmapCoreNavigation.TextFormatDecodingOptions, extensions: (any NbmapCoreNavigation.ExtensionMap)? = nil) throws
  public func isA<M>(_ type: M.Type) -> Swift.Bool where M : NbmapCoreNavigation.Message
  public func hash(into hasher: inout Swift.Hasher)
}
public class DispatchTimer {
  public enum State {
    case armed
    case disarmed
    public static func == (a: NbmapCoreNavigation.DispatchTimer.State, b: NbmapCoreNavigation.DispatchTimer.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias Payload = Dispatch.DispatchSource.DispatchSourceHandler
  public static let defaultAccuracy: Dispatch.DispatchTimeInterval
  public var state: NbmapCoreNavigation.DispatchTimer.State {
    get
  }
  public init(countdown: Dispatch.DispatchTimeInterval, repeating repetition: Dispatch.DispatchTimeInterval = .never, accuracy: Dispatch.DispatchTimeInterval = defaultAccuracy, executingOn executionQueue: Dispatch.DispatchQueue = .main, payload: @escaping NbmapCoreNavigation.DispatchTimer.Payload)
  @objc deinit
  public func arm()
  public func reset()
  public func disarm()
}
public struct RandomIdGenerator : NbmapCoreNavigation.IdGenerator {
  public init()
  public func generateSpanId() -> NbmapCoreNavigation.SpanId
  public func generateTraceId() -> NbmapCoreNavigation.TraceId
}
public protocol IdGenerator {
  func generateSpanId() -> NbmapCoreNavigation.SpanId
  func generateTraceId() -> NbmapCoreNavigation.TraceId
}
public protocol DoubleObserverMetricHandle {
  func observe(value: Swift.Double)
}
@objc @_hasMissingDesignatedInitializers public class NBTelemetryManager : ObjectiveC.NSObject, NbmapCoreNavigation.Telemetry {
  public var tracer: NbmapCoreNavigation.TracerSdk {
    get
  }
  public var jaegerExporter: NbmapCoreNavigation.OtlpHttpTraceExporter {
    get
  }
  public var eventConfigration: NbmapCoreNavigation.EventConfigration {
    get
  }
  public var telemetry: NbmapCoreNavigation.OpenTelemetry {
    get
  }
  public var enqueuedEvents: [any NbmapCoreNavigation.Span] {
    get
  }
  public var accessToken: Swift.String? {
    get
  }
  convenience public init(_ telemetry: NbmapCoreNavigation.OpenTelemetry? = nil, eventConfigration: NbmapCoreNavigation.EventConfigration? = nil, tracerProvider: (any NbmapCoreNavigation.TracerProvider)? = nil, tracer: NbmapCoreNavigation.TracerSdk? = nil, spanProcessor: (any NbmapCoreNavigation.SpanProcessor)? = nil, jaegerExporter: NbmapCoreNavigation.OtlpHttpTraceExporter? = nil, resources: NbmapCoreNavigation.Resource? = nil)
  public func setup(withAccessToken: Swift.String, userAgentBase: Swift.String, hostSDKVersion: Swift.String)
  public func track(spanName: Swift.String, with attributes: [Swift.String : Any]?, end: Swift.Bool? = true) -> any NbmapCoreNavigation.Span
  public func track(spanName: Swift.String, with attributes: [Swift.String : Any]?, event: Swift.String?, end: Swift.Bool? = true) -> any NbmapCoreNavigation.Span
  public func track(spanName: Swift.String, with attributes: [Swift.String : Any]?, event: Swift.String?, eventAttributes: [Swift.String : Any]?, end: Swift.Bool? = true) -> any NbmapCoreNavigation.Span
  public func track(spanName: Swift.String, with attributes: [Swift.String : Any]?, eventWithAttributes: [Swift.String : [Swift.String : Any]?]?, end: Swift.Bool? = true) -> any NbmapCoreNavigation.Span
  public func enqueueEvent(withName name: Swift.String, attributes: [Swift.String : Any] = [:])
  public func flush()
  public func shutdowm()
  @objc deinit
}
public enum Google_Protobuf_NullValue : NbmapCoreNavigation.Enum {
  public typealias RawValue = Swift.Int
  case nullValue
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_NullValue : Swift.CaseIterable {
  public static var allCases: [NbmapCoreNavigation.Google_Protobuf_NullValue]
  public typealias AllCases = [NbmapCoreNavigation.Google_Protobuf_NullValue]
}
public struct Google_Protobuf_Struct {
  public var fields: [Swift.String : NbmapCoreNavigation.Google_Protobuf_Value]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Google_Protobuf_Value {
  public var kind: NbmapCoreNavigation.Google_Protobuf_Value.OneOf_Kind?
  public var nullValue: NbmapCoreNavigation.Google_Protobuf_NullValue {
    get
    set
  }
  public var numberValue: Swift.Double {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
  public var structValue: NbmapCoreNavigation.Google_Protobuf_Struct {
    get
    set
  }
  public var listValue: NbmapCoreNavigation.Google_Protobuf_ListValue {
    get
    set
  }
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public enum OneOf_Kind : Swift.Equatable {
    case nullValue(NbmapCoreNavigation.Google_Protobuf_NullValue)
    case numberValue(Swift.Double)
    case stringValue(Swift.String)
    case boolValue(Swift.Bool)
    case structValue(NbmapCoreNavigation.Google_Protobuf_Struct)
    case listValue(NbmapCoreNavigation.Google_Protobuf_ListValue)
    public static func == (a: NbmapCoreNavigation.Google_Protobuf_Value.OneOf_Kind, b: NbmapCoreNavigation.Google_Protobuf_Value.OneOf_Kind) -> Swift.Bool
  }
  public init()
}
public struct Google_Protobuf_ListValue {
  public var values: [NbmapCoreNavigation.Google_Protobuf_Value]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
extension NbmapCoreNavigation.Google_Protobuf_NullValue : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_Struct : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_Value : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_Value.OneOf_Kind : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_ListValue : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_NullValue : NbmapCoreNavigation._ProtoNameProviding {
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
}
extension NbmapCoreNavigation.Google_Protobuf_Struct : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_Struct, rhs: NbmapCoreNavigation.Google_Protobuf_Struct) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_Value : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_Value, rhs: NbmapCoreNavigation.Google_Protobuf_Value) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_ListValue : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_ListValue, rhs: NbmapCoreNavigation.Google_Protobuf_ListValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct JSONEncodingOptions {
  public var alwaysPrintEnumsAsInts: Swift.Bool
  public var preserveProtoFieldNames: Swift.Bool
  public init()
}
extension CoreLocation.CLLocation {
  public var dictionaryRepresentation: [Swift.String : Any] {
    get
  }
  convenience public init(dictionary: [Swift.String : Any])
  public func isCloseToManuver(_ maximumDistance: CoreLocation.CLLocationDistance, of routeStep: NbmapCoreNavigation.RouteStep) -> Swift.Bool
  public func withinIntersection(routeProgress: NbmapCoreNavigation.RouteProgress, radius: CoreLocation.CLLocationDistance) -> Swift.Bool
  public func withinDistanceAndBearingInIntersection(routeProgress: NbmapCoreNavigation.RouteProgress, radius: CoreLocation.CLLocationDistance, bearingDiff: CoreLocation.CLLocationDirection) -> Swift.Bool
  public func isWithin(_ maximumDistance: CoreLocation.CLLocationDistance, of routeStep: NbmapCoreNavigation.RouteStep) -> Swift.Bool
  public func coordinates(for legProgress: NbmapCoreNavigation.RouteLegProgress) -> [CoreLocation.CLLocationCoordinate2D]
  public func nearbyCoordinates(for routeProgress: NbmapCoreNavigation.RouteProgress) -> [CoreLocation.CLLocationCoordinate2D]
  public var toRecordDic: [Swift.String : Any] {
    get
  }
}
@objc open class EndOfRouteFeedback : ObjectiveC.NSObject {
  @nonobjc public init(rating: Swift.Int? = nil, comment: Swift.String? = nil)
  @objc convenience public init(rating ratingNumber: Foundation.NSNumber?, comment: Swift.String?)
  @objc deinit
}
extension NbmapCoreNavigation.Google_Protobuf_FieldMask {
  public init(protoPaths: [Swift.String])
  public init(protoPaths: Swift.String...)
  public init?(jsonPaths: Swift.String...)
}
@objc open class SimulatedLocationModelManager : NbmapCoreNavigation.NavigationLocationManager {
  public init(route: NbmapCoreNavigation.Route, simulateSpeed: Swift.Double? = 45)
  public init(routeProgress: NbmapCoreNavigation.RouteProgress, simulateSpeed: Swift.Double? = 45)
  @objc deinit
  public var speedMultiplier: Swift.Double {
    get
    set
  }
  @objc override dynamic open var location: CoreLocation.CLLocation? {
    @objc get
    @objc set
  }
  override public var simulatesLocation: Swift.Bool {
    get
    set
  }
  @objc override dynamic open func startUpdatingLocation()
  @objc override dynamic open func stopUpdatingLocation()
  @objc override dynamic open func copy() -> Any
}
public protocol AlternativeRouteDelegate : ObjectiveC.NSObjectProtocol {
  func didSelectNewRoute(route: NbmapCoreNavigation.Route)
  func shouldRefreshRoutes(routes: [NbmapCoreNavigation.Route])
}
public class MultiLogRecordProcessor : NbmapCoreNavigation.LogRecordProcessor {
  public func forceFlush() -> NbmapCoreNavigation.ExportResult
  public func shutdown() -> NbmapCoreNavigation.ExportResult
  public init(logRecordProcessors: [any NbmapCoreNavigation.LogRecordProcessor])
  public func onEmit(logRecord: NbmapCoreNavigation.ReadableLogRecord)
  @objc deinit
}
public class TracerProviderBuilder {
  public var clock: any NbmapCoreNavigation.Clock {
    get
  }
  public var idGenerator: any NbmapCoreNavigation.IdGenerator {
    get
  }
  public var resource: NbmapCoreNavigation.Resource {
    get
  }
  public var spanLimits: NbmapCoreNavigation.SpanLimits {
    get
  }
  public var sampler: any NbmapCoreNavigation.Sampler {
    get
  }
  public var spanProcessors: [any NbmapCoreNavigation.SpanProcessor] {
    get
  }
  public init()
  public func with(clock: any NbmapCoreNavigation.Clock) -> Self
  public func with(idGenerator: any NbmapCoreNavigation.IdGenerator) -> Self
  public func with(resource: NbmapCoreNavigation.Resource) -> Self
  public func with(spanLimits: NbmapCoreNavigation.SpanLimits) -> Self
  public func with(sampler: any NbmapCoreNavigation.Sampler) -> Self
  public func add(spanProcessor: any NbmapCoreNavigation.SpanProcessor) -> Self
  public func add(spanProcessors: [any NbmapCoreNavigation.SpanProcessor]) -> Self
  public func build() -> NbmapCoreNavigation.TracerProviderSdk
  @objc deinit
}
public protocol TextMapBaggagePropagator {
  var fields: Swift.Set<Swift.String> { get }
  func inject<S>(baggage: any NbmapCoreNavigation.Baggage, carrier: inout [Swift.String : Swift.String], setter: S) where S : NbmapCoreNavigation.Setter
  @discardableResult
  func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> (any NbmapCoreNavigation.Baggage)? where G : NbmapCoreNavigation.Getter
}
@_hasMissingDesignatedInitializers open class RecordDataConfig {
  public static func isEnableRecord() -> Swift.Bool
  public static func setRecordState(isEnable: Swift.Bool)
  @objc deinit
}
public func sigmoid(x: Swift.Double) -> Swift.Double
public struct Google_Protobuf_Empty {
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
extension NbmapCoreNavigation.Google_Protobuf_Empty : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_Empty : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_Empty, rhs: NbmapCoreNavigation.Google_Protobuf_Empty) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class ConfigurationRequestParams : ObjectiveC.NSObject {
  @objc convenience override dynamic public init()
  public func updateCache(cache: Swift.String)
  @objc final public let baseUrl: Swift.String
  @objc deinit
}
public class BatchLogRecordProcessor : NbmapCoreNavigation.LogRecordProcessor {
  public init(logRecordExporter: any NbmapCoreNavigation.LogRecordExporter, scheduleDelay: Foundation.TimeInterval = 5, exportTimeout: Foundation.TimeInterval = 30, maxQueueSize: Swift.Int = 2048, maxExportBatchSize: Swift.Int = 512, willExportCallback: ((inout [NbmapCoreNavigation.ReadableLogRecord]) -> Swift.Void)? = nil)
  public func onEmit(logRecord: NbmapCoreNavigation.ReadableLogRecord)
  public func forceFlush() -> NbmapCoreNavigation.ExportResult
  public func forceFlush(timeout: Foundation.TimeInterval?)
  public func shutdown() -> NbmapCoreNavigation.ExportResult
  @objc deinit
}
public struct OpenTelemetry {
  public static var instance: NbmapCoreNavigation.OpenTelemetry
  public var tracerProvider: any NbmapCoreNavigation.TracerProvider {
    get
  }
  public var meterProvider: any NbmapCoreNavigation.MeterProvider {
    get
  }
  public var loggerProvider: any NbmapCoreNavigation.LoggerProvider {
    get
  }
  public var baggageManager: any NbmapCoreNavigation.BaggageManager {
    get
  }
  public var propagators: any NbmapCoreNavigation.ContextPropagators {
    get
  }
  public var contextProvider: NbmapCoreNavigation.OpenTelemetryContextProvider {
    get
  }
  public static func registerTracerProvider(tracerProvider: any NbmapCoreNavigation.TracerProvider)
  public static func registerMeterProvider(meterProvider: any NbmapCoreNavigation.MeterProvider)
  public static func registerLoggerProvider(loggerProvider: any NbmapCoreNavigation.LoggerProvider)
  public static func registerBaggageManager(baggageManager: any NbmapCoreNavigation.BaggageManager)
  public static func registerPropagators(textPropagators: [any NbmapCoreNavigation.TextMapPropagator], baggagePropagator: any NbmapCoreNavigation.TextMapBaggagePropagator)
  public static func registerContextManager(contextManager: any NbmapCoreNavigation.ContextManager)
}
extension UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) public func capture() -> UIKit.UIImage?
}
extension Swift.Double {
  public var toMilliseconds: Swift.UInt64 {
    get
  }
  public var toMicroseconds: Swift.UInt64 {
    get
  }
  public var toNanoseconds: Swift.UInt64 {
    get
  }
  public static func fromMilliseconds(_ millis: Swift.Int64) -> Foundation.TimeInterval
  public static func fromMicroseconds(_ micros: Swift.Int64) -> Foundation.TimeInterval
  public static func fromNanoseconds(_ nanos: Swift.Int64) -> Foundation.TimeInterval
}
public struct TextFormatEncodingOptions {
  public var printUnknownFields: Swift.Bool
  public init()
}
public struct Google_Protobuf_Api {
  public var name: Swift.String
  public var methods: [NbmapCoreNavigation.Google_Protobuf_Method]
  public var options: [NbmapCoreNavigation.Google_Protobuf_Option]
  public var version: Swift.String
  public var sourceContext: NbmapCoreNavigation.Google_Protobuf_SourceContext {
    get
    set
  }
  public var hasSourceContext: Swift.Bool {
    get
  }
  public mutating func clearSourceContext()
  public var mixins: [NbmapCoreNavigation.Google_Protobuf_Mixin]
  public var syntax: NbmapCoreNavigation.Google_Protobuf_Syntax
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Google_Protobuf_Method {
  public var name: Swift.String
  public var requestTypeURL: Swift.String
  public var requestStreaming: Swift.Bool
  public var responseTypeURL: Swift.String
  public var responseStreaming: Swift.Bool
  public var options: [NbmapCoreNavigation.Google_Protobuf_Option]
  public var syntax: NbmapCoreNavigation.Google_Protobuf_Syntax
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Google_Protobuf_Mixin {
  public var name: Swift.String
  public var root: Swift.String
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
extension NbmapCoreNavigation.Google_Protobuf_Api : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_Method : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_Mixin : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Google_Protobuf_Api : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_Api, rhs: NbmapCoreNavigation.Google_Protobuf_Api) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_Method : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_Method, rhs: NbmapCoreNavigation.Google_Protobuf_Method) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Google_Protobuf_Mixin : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Google_Protobuf_Mixin, rhs: NbmapCoreNavigation.Google_Protobuf_Mixin) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct W3CTraceContextPropagator : NbmapCoreNavigation.TextMapPropagator {
  public init()
  public let fields: Swift.Set<Swift.String>
  public func inject<S>(spanContext: NbmapCoreNavigation.SpanContext, carrier: inout [Swift.String : Swift.String], setter: S) where S : NbmapCoreNavigation.Setter
  public func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> NbmapCoreNavigation.SpanContext? where G : NbmapCoreNavigation.Getter
}
@_hasMissingDesignatedInitializers @objc(NBNavRouteLeg) open class RouteLeg : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  public init(steps: [NbmapCoreNavigation.RouteStep], name: Swift.String, distance: CoreLocation.CLLocationDistance, expectedTravelTime: Foundation.TimeInterval, source: NbmapCoreNavigation.Waypoint, destination: NbmapCoreNavigation.Waypoint, profileIdentifier: NbmapCoreNavigation.NBNavigationMode, segmentDistances: [CoreLocation.CLLocationDistance]? = nil, expectedSegmentTravelTimes: [Foundation.TimeInterval]? = nil, segmentSpeeds: [CoreLocation.CLLocationSpeed]? = nil, congestionLevels: [NbmapCoreNavigation.CongestionLevel]? = nil)
  @objc(initWithJSON:source:destination:options:) convenience public init(json: [Swift.String : Any], source: NbmapCoreNavigation.Waypoint, destination: NbmapCoreNavigation.Waypoint, options: NbmapCoreNavigation.DirectionsOptions)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc final public let source: NbmapCoreNavigation.Waypoint
  @objc final public let destination: NbmapCoreNavigation.Waypoint
  @objc final public let steps: [NbmapCoreNavigation.RouteStep]
  @objc final public let segmentDistances: [CoreLocation.CLLocationDistance]?
  @objc final public let expectedSegmentTravelTimes: [Foundation.TimeInterval]?
  @objc final public let segmentSpeeds: [CoreLocation.CLLocationSpeed]?
  final public let segmentCongestionLevels: [NbmapCoreNavigation.CongestionLevel]?
  @objc final public let name: Swift.String
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc final public let distance: CoreLocation.CLLocationDistance
  @objc final public let expectedTravelTime: Foundation.TimeInterval
  @objc final public let profileIdentifier: NbmapCoreNavigation.NBNavigationMode
  @objc deinit
}
public class LoggerProviderBuilder {
  public var clock: any NbmapCoreNavigation.Clock {
    get
  }
  public var resource: NbmapCoreNavigation.Resource {
    get
  }
  public var logLimits: NbmapCoreNavigation.LogLimits {
    get
  }
  public var logProcessors: [any NbmapCoreNavigation.LogRecordProcessor] {
    get
  }
  public init()
  public func with(clock: any NbmapCoreNavigation.Clock) -> Self
  public func with(resource: NbmapCoreNavigation.Resource) -> Self
  public func with(logLimits: NbmapCoreNavigation.LogLimits) -> Self
  public func with(processors: [any NbmapCoreNavigation.LogRecordProcessor]) -> Self
  public func build() -> NbmapCoreNavigation.LoggerProviderSdk
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InMemoryLogRecordExporter : NbmapCoreNavigation.LogRecordExporter {
  public func getFinishedLogRecords() -> [NbmapCoreNavigation.ReadableLogRecord]
  public func export(logRecords: [NbmapCoreNavigation.ReadableLogRecord]) -> NbmapCoreNavigation.ExportResult
  public func shutdown()
  public func forceFlush() -> NbmapCoreNavigation.ExportResult
  @objc deinit
}
extension NbmapCoreNavigation.Message {
  public func serializedData(partial: Swift.Bool = false) throws -> Foundation.Data
  @inlinable public init(serializedData data: Foundation.Data, extensions: (any NbmapCoreNavigation.ExtensionMap)? = nil, partial: Swift.Bool = false, options: NbmapCoreNavigation.BinaryDecodingOptions = BinaryDecodingOptions()) throws {
    self.init()
    try merge(contiguousBytes: data, extensions: extensions, partial: partial, options: options)
  }
  @inlinable public init<Bytes>(contiguousBytes bytes: Bytes, extensions: (any NbmapCoreNavigation.ExtensionMap)? = nil, partial: Swift.Bool = false, options: NbmapCoreNavigation.BinaryDecodingOptions = BinaryDecodingOptions()) throws where Bytes : Foundation.ContiguousBytes {
    self.init()
    try merge(contiguousBytes: bytes, extensions: extensions, partial: partial, options: options)
  }
  @inlinable public mutating func merge(serializedData data: Foundation.Data, extensions: (any NbmapCoreNavigation.ExtensionMap)? = nil, partial: Swift.Bool = false, options: NbmapCoreNavigation.BinaryDecodingOptions = BinaryDecodingOptions()) throws {
    try merge(contiguousBytes: data, extensions: extensions, partial: partial, options: options)
  }
  @inlinable public mutating func merge<Bytes>(contiguousBytes bytes: Bytes, extensions: (any NbmapCoreNavigation.ExtensionMap)? = nil, partial: Swift.Bool = false, options: NbmapCoreNavigation.BinaryDecodingOptions = BinaryDecodingOptions()) throws where Bytes : Foundation.ContiguousBytes {
    try bytes.withUnsafeBytes { (body: UnsafeRawBufferPointer) in
      try _merge(rawBuffer: body, extensions: extensions, partial: partial, options: options)
    }
  }
  @usableFromInline
  internal mutating func _merge(rawBuffer body: Swift.UnsafeRawBufferPointer, extensions: (any NbmapCoreNavigation.ExtensionMap)?, partial: Swift.Bool, options: NbmapCoreNavigation.BinaryDecodingOptions) throws
}
public enum JSONEncodingError : Swift.Error {
  case anyTranscodeFailure
  case timestampRange
  case durationRange
  case fieldMaskConversion
  case missingFieldNames
  case missingValue
  case valueNumberNotFinite
  public static func == (a: NbmapCoreNavigation.JSONEncodingError, b: NbmapCoreNavigation.JSONEncodingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TraceId : Swift.Comparable, Swift.Hashable, Swift.CustomStringConvertible, Swift.Equatable, Swift.Codable {
  public static let size: Swift.Int
  public static let invalidId: Swift.UInt64
  public static let invalid: NbmapCoreNavigation.TraceId
  public var idHi: Swift.UInt64 {
    get
  }
  public var idLo: Swift.UInt64 {
    get
  }
  public init(idHi: Swift.UInt64, idLo: Swift.UInt64)
  public init()
  public static func random() -> NbmapCoreNavigation.TraceId
  public init(fromData data: Foundation.Data)
  public init(fromBytes bytes: [Swift.UInt8])
  public init(fromBytes bytes: Swift.ArraySlice<Swift.UInt8>)
  public init(fromBytes bytes: Swift.ArraySlice<Swift.Character>)
  public func copyBytesTo(dest: inout Foundation.Data, destOffset: Swift.Int)
  public func copyBytesTo(dest: inout [Swift.UInt8], destOffset: Swift.Int)
  public func copyBytesTo(dest: inout Swift.ArraySlice<Swift.UInt8>, destOffset: Swift.Int)
  public init(fromHexString hex: Swift.String, withOffset offset: Swift.Int = 0)
  public var isValid: Swift.Bool {
    get
  }
  public var hexString: Swift.String {
    get
  }
  public var rawHigherLong: Swift.UInt64 {
    get
  }
  public var rawLowerLong: Swift.UInt64 {
    get
  }
  public var description: Swift.String {
    get
  }
  public static func < (lhs: NbmapCoreNavigation.TraceId, rhs: NbmapCoreNavigation.TraceId) -> Swift.Bool
  public static func == (lhs: NbmapCoreNavigation.TraceId, rhs: NbmapCoreNavigation.TraceId) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class SwiftEventBus {
  open class func post(_ name: Swift.String, sender: Any? = nil)
  open class func post(_ name: Swift.String, sender: ObjectiveC.NSObject?)
  open class func post(_ name: Swift.String, sender: Any? = nil, userInfo: [Swift.AnyHashable : Any]?)
  open class func postToMainThread(_ name: Swift.String, sender: Any? = nil)
  open class func postToMainThread(_ name: Swift.String, sender: ObjectiveC.NSObject?)
  open class func postToMainThread(_ name: Swift.String, sender: Any? = nil, userInfo: [Swift.AnyHashable : Any]?)
  @discardableResult
  open class func on(_ target: Swift.AnyObject, name: Swift.String, sender: Any? = nil, queue: Foundation.OperationQueue?, handler: @escaping ((Foundation.Notification?) -> Swift.Void)) -> any ObjectiveC.NSObjectProtocol
  @discardableResult
  open class func onMainThread(_ target: Swift.AnyObject, name: Swift.String, sender: Any? = nil, handler: @escaping ((Foundation.Notification?) -> Swift.Void)) -> any ObjectiveC.NSObjectProtocol
  @discardableResult
  open class func onBackgroundThread(_ target: Swift.AnyObject, name: Swift.String, sender: Any? = nil, handler: @escaping ((Foundation.Notification?) -> Swift.Void)) -> any ObjectiveC.NSObjectProtocol
  open class func unregister(_ target: Swift.AnyObject)
  open class func unregister(_ target: Swift.AnyObject, name: Swift.String)
  @objc deinit
}
public class JaegerBaggagePropagator : NbmapCoreNavigation.TextMapBaggagePropagator {
  public static let baggageHeader: Swift.String
  public static let baggagePrefix: Swift.String
  public var fields: Swift.Set<Swift.String>
  public init()
  public func inject<S>(baggage: any NbmapCoreNavigation.Baggage, carrier: inout [Swift.String : Swift.String], setter: S) where S : NbmapCoreNavigation.Setter
  public func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> (any NbmapCoreNavigation.Baggage)? where G : NbmapCoreNavigation.Getter
  @objc deinit
}
public func defaultOltpHttpTracesEndpoint() -> Foundation.URL
@_inheritsConvenienceInitializers public class OtlpHttpTraceExporter : NbmapCoreNavigation.OtlpHttpExporterBase, NbmapCoreNavigation.SpanExporter {
  override public init(endpoint: Foundation.URL = defaultOltpHttpTracesEndpoint(), useSession: Foundation.URLSession? = nil, token: Swift.String? = nil)
  public func export(spans: [NbmapCoreNavigation.SpanData]) -> NbmapCoreNavigation.SpanExporterResultCode
  public func flush() -> NbmapCoreNavigation.SpanExporterResultCode
  @objc deinit
}
public protocol NavigationService : CoreLocation.CLLocationManagerDelegate, NbmapCoreNavigation.NavigationEventsManagerDataSource {
  var delegate: (any NbmapCoreNavigation.NavigationServiceDelegate)? { get set }
  var locationManager: NbmapCoreNavigation.NavigationLocationManager { get }
  var router: any NbmapCoreNavigation.Router { get }
  var dataTrackingEnable: Swift.Bool { get set }
  var dataTracking: NbmapCoreNavigation.DataTracking? { get }
  var route: NbmapCoreNavigation.Route { get }
  func start()
  func stop()
  func endNavigation(feedback: NbmapCoreNavigation.EndOfRouteFeedback?)
  func isInTunnel(at location: CoreLocation.CLLocation, along progress: NbmapCoreNavigation.RouteProgress) -> Swift.Bool
  var poorGPSPatience: Swift.Double { get set }
  var simulationMode: NbmapCoreNavigation.SimulationMode { get set }
  var simulationSpeedMultiplier: Swift.Double { get set }
  var navigationDataEventTracking: (any NbmapCoreNavigation.NavigationEventTracking)? { get set }
  var navigationEngConfig: NbmapCoreNavigation.NavigationEngineConfig { get set }
  var routingProvider: (any NbmapCoreNavigation.RoutingProvider)? { get }
  var stationaryDetection: (any NbmapCoreNavigation.StationaryDetection)? { get }
}
@objc public class NBNavigationService : ObjectiveC.NSObject, NbmapCoreNavigation.NavigationService {
  weak public var delegate: (any NbmapCoreNavigation.NavigationServiceDelegate)?
  public var locationManager: NbmapCoreNavigation.NavigationLocationManager {
    get
  }
  weak public var navigationDataEventTracking: (any NbmapCoreNavigation.NavigationEventTracking)?
  public var router: any NbmapCoreNavigation.Router {
    get
  }
  public var dataTrackingEnable: Swift.Bool
  public var dataTracking: NbmapCoreNavigation.DataTracking? {
    get
  }
  public var navigationEngConfig: NbmapCoreNavigation.NavigationEngineConfig
  public var routingProvider: (any NbmapCoreNavigation.RoutingProvider)? {
    get
  }
  public var route: NbmapCoreNavigation.Route {
    get
  }
  public var stationaryDetection: (any NbmapCoreNavigation.StationaryDetection)?
  public var poorGPSPatience: Swift.Double {
    get
    set
  }
  public var simulationMode: NbmapCoreNavigation.SimulationMode {
    get
    set
  }
  public var simulationSpeedMultiplier: Swift.Double {
    get
    set
  }
  public var isSimulating: Swift.Bool {
    get
  }
  public func isInTunnel(at location: CoreLocation.CLLocation, along progress: NbmapCoreNavigation.RouteProgress) -> Swift.Bool
  required public init(routes: [NbmapCoreNavigation.Route], routeIndex: Swift.Int, locationSource: NbmapCoreNavigation.NavigationLocationManager? = nil, routerController: (any NbmapCoreNavigation.Router)? = nil, dataTracking: NbmapCoreNavigation.DataTracking? = nil, simulating simulationMode: NbmapCoreNavigation.SimulationMode? = nil, navigationEngConfig: NbmapCoreNavigation.NavigationEngineConfig? = nil, routingProvider: (any NbmapCoreNavigation.RoutingProvider)? = nil, stationarySetection: (any NbmapCoreNavigation.StationaryDetection)? = nil)
  @objc deinit
  @objc public func suspendLocationUpdates()
  public func start()
  public func stop()
  public func endNavigation(feedback: NbmapCoreNavigation.EndOfRouteFeedback? = nil)
}
extension NbmapCoreNavigation.NavigationService {
  public var routeProgress: NbmapCoreNavigation.RouteProgress {
    get
  }
  public var desiredAccuracy: CoreLocation.CLLocationAccuracy {
    get
  }
}
extension NbmapCoreNavigation.NavigationService {
  public var locationManagerType: NbmapCoreNavigation.NavigationLocationManager.Type {
    get
  }
}
extension NbmapCoreNavigation.NBNavigationService : NbmapCoreNavigation.RouterDelegate {
  public func routeControllerShouldDisableBatteryMonitoring(_ routeController: NbmapCoreNavigation.RouteController) -> Swift.Bool
  public func routeController(_ router: NbmapCoreNavigation.RouteController, didUpdate progress: NbmapCoreNavigation.RouteProgress, with location: CoreLocation.CLLocation, rawLocation: CoreLocation.CLLocation)
  public func routeController(_ routeController: NbmapCoreNavigation.RouteController, didPassVisualInstructionPoint instruction: NbmapCoreNavigation.VisualInstructionBanner, routeProgress: NbmapCoreNavigation.RouteProgress)
  public func routeController(_ routeController: NbmapCoreNavigation.RouteController, didPassSpokenInstructionPoint instruction: NbmapCoreNavigation.SpokenInstruction, routeProgress: NbmapCoreNavigation.RouteProgress)
  @objc dynamic public func routeController(_ routeController: NbmapCoreNavigation.RouteController, shouldRerouteFrom location: CoreLocation.CLLocation) -> Swift.Bool
  @objc dynamic public func routeController(_ routeController: NbmapCoreNavigation.RouteController, willRerouteFrom location: CoreLocation.CLLocation)
  @objc dynamic public func routeController(_ routeController: NbmapCoreNavigation.RouteController, didRerouteAlong route: NbmapCoreNavigation.Route, at location: CoreLocation.CLLocation?, proactive: Swift.Bool)
  @objc dynamic public func routeController(_ routeController: NbmapCoreNavigation.RouteController, didFailToRerouteWith error: any Swift.Error)
  @objc dynamic public func routeController(_ routeController: NbmapCoreNavigation.RouteController, shouldDiscard location: CoreLocation.CLLocation) -> Swift.Bool
  @objc dynamic public func routeController(_ routeController: NbmapCoreNavigation.RouteController, didArriveAt waypoint: NbmapCoreNavigation.Waypoint)
  public func routeController(_ router: NbmapCoreNavigation.RouteController, didRefresh progress: NbmapCoreNavigation.RouteProgress)
}
extension NbmapCoreNavigation.NBNavigationService : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateHeading newHeading: CoreLocation.CLHeading)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManagerDidChangeAuthorization(_ manager: CoreLocation.CLLocationManager)
}
extension NbmapCoreNavigation.NBNavigationService : NbmapCoreNavigation.StationaryDetectionDelegate {
  public func onStatusUpdate(isMoving: Swift.Bool)
  public func onSensorUpdate(angularSpeed: Swift.Double?, acceleration: Swift.Double?, speed: Swift.Double?)
}
extension NbmapCoreNavigation.NBNavigationService : NbmapCoreNavigation.NBTripSessionDelegate {
  public func tripSessionShouldFireEvent() -> Swift.Bool
}
open class RoundaboutCalibrator {
  required public init(drivingSide: NbmapCoreNavigation.DrivingSide, bearingFrom before: CoreLocation.CLLocationDegrees, to after: CoreLocation.CLLocationDegrees, startFrom position: CoreLocation.CLLocationCoordinate2D, endOf endPosition: CoreLocation.CLLocationCoordinate2D)
  @objc deinit
}
public protocol BaggageManagerProvider {
  func create() -> any NbmapCoreNavigation.BaggageManager
}
public class MovingAwayHelper {
  public var currentPointIsMovingAway: Swift.Bool {
    get
  }
  public var moveAwayCount: Swift.Int {
    get
  }
  public init(config: NbmapCoreNavigation.NavigationEngineConfig, movingAwayFromManeuverCounter: NbmapCoreNavigation.RingBuffer<Swift.Int>? = nil, currentPointIsMovingAway: Swift.Bool = false)
  public func movingAwayFromManeuver(location: CoreLocation.CLLocation, routeProgress: NbmapCoreNavigation.RouteProgress) -> Swift.Bool
  public func userDistanceToManeuver(location: CoreLocation.CLLocation, routeProgress: NbmapCoreNavigation.RouteProgress) -> CoreLocation.CLLocationDistance?
  public func size() -> Swift.Int
  public func clear()
  @objc deinit
}
public enum Severity : Swift.Int, Swift.Comparable, Swift.CustomStringConvertible {
  case trace, trace2, trace3, trace4, debug, debug2, debug3, debug4, info, info2, info3, info4, warn, warn2, warn3, warn4, error, error2, error3, error4, fatal, fatal2, fatal3, fatal4
  public var description: Swift.String {
    get
  }
  public static func < (lhs: NbmapCoreNavigation.Severity, rhs: NbmapCoreNavigation.Severity) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.RouteOptions {
  public func without(waypoint: NbmapCoreNavigation.Waypoint) -> NbmapCoreNavigation.RouteOptions
}
@_hasMissingDesignatedInitializers public class OSResourceProvider : NbmapCoreNavigation.ResourceProvider {
  public init(source: any NbmapCoreNavigation.IOperatingSystemDataSource)
  override public var attributes: [Swift.String : NbmapCoreNavigation.AttributeValue] {
    get
  }
  @objc deinit
}
public enum BinaryEncodingError : Swift.Error {
  case anyTranscodeFailure
  case missingRequiredFields
  public static func == (a: NbmapCoreNavigation.BinaryEncodingError, b: NbmapCoreNavigation.BinaryEncodingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Status : Swift.Equatable {
  case ok
  case unset
  case error(description: Swift.String)
  public var isOk: Swift.Bool {
    get
  }
  public var isError: Swift.Bool {
    get
  }
  public var name: Swift.String {
    get
  }
  public var code: Swift.Int {
    get
  }
  public static func == (a: NbmapCoreNavigation.Status, b: NbmapCoreNavigation.Status) -> Swift.Bool
}
extension NbmapCoreNavigation.Status : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension NbmapCoreNavigation.Status : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(NBCongestionLevel) public enum CongestionLevel : Swift.Int, Swift.CustomStringConvertible {
  case unknown = 0
  case low = 1
  case moderate = 2
  case heavy = 3
  case severe = 4
  public init?(description: Swift.String)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Message {
  public func textFormatString() -> Swift.String
  public func textFormatString(options: NbmapCoreNavigation.TextFormatEncodingOptions) -> Swift.String
  public init(textFormatString: Swift.String, extensions: (any NbmapCoreNavigation.ExtensionMap)? = nil) throws
  public init(textFormatString: Swift.String, options: NbmapCoreNavigation.TextFormatDecodingOptions, extensions: (any NbmapCoreNavigation.ExtensionMap)? = nil) throws
}
public struct SimpleExtensionMap : NbmapCoreNavigation.ExtensionMap, Swift.ExpressibleByArrayLiteral, Swift.CustomDebugStringConvertible {
  public typealias Element = NbmapCoreNavigation.AnyMessageExtension
  public init()
  public init(arrayLiteral: any NbmapCoreNavigation.AnyMessageExtension...)
  public init(_ others: NbmapCoreNavigation.SimpleExtensionMap...)
  public subscript(messageType: any NbmapCoreNavigation.Message.Type, fieldNumber: Swift.Int) -> (any NbmapCoreNavigation.AnyMessageExtension)? {
    get
  }
  public func fieldNumberForProto(messageType: any NbmapCoreNavigation.Message.Type, protoFieldName: Swift.String) -> Swift.Int?
  public mutating func insert(_ newValue: any NbmapCoreNavigation.AnyMessageExtension)
  public mutating func insert(contentsOf: [any NbmapCoreNavigation.AnyMessageExtension])
  public mutating func formUnion(_ other: NbmapCoreNavigation.SimpleExtensionMap)
  public func union(_ other: NbmapCoreNavigation.SimpleExtensionMap) -> NbmapCoreNavigation.SimpleExtensionMap
  public var debugDescription: Swift.String {
    get
  }
  public typealias ArrayLiteralElement = any NbmapCoreNavigation.AnyMessageExtension
}
public protocol Visitor {
  mutating func visitSingularFloatField(value: Swift.Float, fieldNumber: Swift.Int) throws
  mutating func visitSingularDoubleField(value: Swift.Double, fieldNumber: Swift.Int) throws
  mutating func visitSingularInt32Field(value: Swift.Int32, fieldNumber: Swift.Int) throws
  mutating func visitSingularInt64Field(value: Swift.Int64, fieldNumber: Swift.Int) throws
  mutating func visitSingularUInt32Field(value: Swift.UInt32, fieldNumber: Swift.Int) throws
  mutating func visitSingularUInt64Field(value: Swift.UInt64, fieldNumber: Swift.Int) throws
  mutating func visitSingularSInt32Field(value: Swift.Int32, fieldNumber: Swift.Int) throws
  mutating func visitSingularSInt64Field(value: Swift.Int64, fieldNumber: Swift.Int) throws
  mutating func visitSingularFixed32Field(value: Swift.UInt32, fieldNumber: Swift.Int) throws
  mutating func visitSingularFixed64Field(value: Swift.UInt64, fieldNumber: Swift.Int) throws
  mutating func visitSingularSFixed32Field(value: Swift.Int32, fieldNumber: Swift.Int) throws
  mutating func visitSingularSFixed64Field(value: Swift.Int64, fieldNumber: Swift.Int) throws
  mutating func visitSingularBoolField(value: Swift.Bool, fieldNumber: Swift.Int) throws
  mutating func visitSingularStringField(value: Swift.String, fieldNumber: Swift.Int) throws
  mutating func visitSingularBytesField(value: Foundation.Data, fieldNumber: Swift.Int) throws
  mutating func visitSingularEnumField<E>(value: E, fieldNumber: Swift.Int) throws where E : NbmapCoreNavigation.Enum
  mutating func visitSingularMessageField<M>(value: M, fieldNumber: Swift.Int) throws where M : NbmapCoreNavigation.Message
  mutating func visitSingularGroupField<G>(value: G, fieldNumber: Swift.Int) throws where G : NbmapCoreNavigation.Message
  mutating func visitRepeatedFloatField(value: [Swift.Float], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedDoubleField(value: [Swift.Double], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedInt32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedInt64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedUInt32Field(value: [Swift.UInt32], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedUInt64Field(value: [Swift.UInt64], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedSInt32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedSInt64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedFixed32Field(value: [Swift.UInt32], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedFixed64Field(value: [Swift.UInt64], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedSFixed32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedSFixed64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedBoolField(value: [Swift.Bool], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedStringField(value: [Swift.String], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedBytesField(value: [Foundation.Data], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedEnumField<E>(value: [E], fieldNumber: Swift.Int) throws where E : NbmapCoreNavigation.Enum
  mutating func visitRepeatedMessageField<M>(value: [M], fieldNumber: Swift.Int) throws where M : NbmapCoreNavigation.Message
  mutating func visitRepeatedGroupField<G>(value: [G], fieldNumber: Swift.Int) throws where G : NbmapCoreNavigation.Message
  mutating func visitPackedFloatField(value: [Swift.Float], fieldNumber: Swift.Int) throws
  mutating func visitPackedDoubleField(value: [Swift.Double], fieldNumber: Swift.Int) throws
  mutating func visitPackedInt32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  mutating func visitPackedInt64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  mutating func visitPackedUInt32Field(value: [Swift.UInt32], fieldNumber: Swift.Int) throws
  mutating func visitPackedUInt64Field(value: [Swift.UInt64], fieldNumber: Swift.Int) throws
  mutating func visitPackedSInt32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  mutating func visitPackedSInt64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  mutating func visitPackedFixed32Field(value: [Swift.UInt32], fieldNumber: Swift.Int) throws
  mutating func visitPackedFixed64Field(value: [Swift.UInt64], fieldNumber: Swift.Int) throws
  mutating func visitPackedSFixed32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  mutating func visitPackedSFixed64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  mutating func visitPackedBoolField(value: [Swift.Bool], fieldNumber: Swift.Int) throws
  mutating func visitPackedEnumField<E>(value: [E], fieldNumber: Swift.Int) throws where E : NbmapCoreNavigation.Enum
  mutating func visitMapField<KeyType, ValueType>(fieldType: NbmapCoreNavigation._ProtobufMap<KeyType, ValueType>.Type, value: NbmapCoreNavigation._ProtobufMap<KeyType, ValueType>.BaseType, fieldNumber: Swift.Int) throws where KeyType : NbmapCoreNavigation.MapKeyType, ValueType : NbmapCoreNavigation.MapValueType
  mutating func visitMapField<KeyType, ValueType>(fieldType: NbmapCoreNavigation._ProtobufEnumMap<KeyType, ValueType>.Type, value: NbmapCoreNavigation._ProtobufEnumMap<KeyType, ValueType>.BaseType, fieldNumber: Swift.Int) throws where KeyType : NbmapCoreNavigation.MapKeyType, ValueType : NbmapCoreNavigation.Enum, ValueType.RawValue == Swift.Int
  mutating func visitMapField<KeyType, ValueType>(fieldType: NbmapCoreNavigation._ProtobufMessageMap<KeyType, ValueType>.Type, value: NbmapCoreNavigation._ProtobufMessageMap<KeyType, ValueType>.BaseType, fieldNumber: Swift.Int) throws where KeyType : NbmapCoreNavigation.MapKeyType, ValueType : NbmapCoreNavigation.Message, ValueType : Swift.Hashable
  mutating func visitExtensionFields(fields: NbmapCoreNavigation.ExtensionFieldValueSet, start: Swift.Int, end: Swift.Int) throws
  mutating func visitExtensionFieldsAsMessageSet(fields: NbmapCoreNavigation.ExtensionFieldValueSet, start: Swift.Int, end: Swift.Int) throws
  mutating func visitUnknown(bytes: Foundation.Data) throws
}
extension NbmapCoreNavigation.Visitor {
  public mutating func visitSingularFloatField(value: Swift.Float, fieldNumber: Swift.Int) throws
  public mutating func visitSingularInt32Field(value: Swift.Int32, fieldNumber: Swift.Int) throws
  public mutating func visitSingularUInt32Field(value: Swift.UInt32, fieldNumber: Swift.Int) throws
  public mutating func visitSingularSInt32Field(value: Swift.Int32, fieldNumber: Swift.Int) throws
  public mutating func visitSingularSInt64Field(value: Swift.Int64, fieldNumber: Swift.Int) throws
  public mutating func visitSingularFixed32Field(value: Swift.UInt32, fieldNumber: Swift.Int) throws
  public mutating func visitSingularFixed64Field(value: Swift.UInt64, fieldNumber: Swift.Int) throws
  public mutating func visitSingularSFixed32Field(value: Swift.Int32, fieldNumber: Swift.Int) throws
  public mutating func visitSingularSFixed64Field(value: Swift.Int64, fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedFloatField(value: [Swift.Float], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedDoubleField(value: [Swift.Double], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedInt32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedInt64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedUInt32Field(value: [Swift.UInt32], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedUInt64Field(value: [Swift.UInt64], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedSInt32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedSInt64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedFixed32Field(value: [Swift.UInt32], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedFixed64Field(value: [Swift.UInt64], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedSFixed32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedSFixed64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedBoolField(value: [Swift.Bool], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedStringField(value: [Swift.String], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedBytesField(value: [Foundation.Data], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedEnumField<E>(value: [E], fieldNumber: Swift.Int) throws where E : NbmapCoreNavigation.Enum
  public mutating func visitRepeatedMessageField<M>(value: [M], fieldNumber: Swift.Int) throws where M : NbmapCoreNavigation.Message
  public mutating func visitRepeatedGroupField<G>(value: [G], fieldNumber: Swift.Int) throws where G : NbmapCoreNavigation.Message
  public mutating func visitPackedFloatField(value: [Swift.Float], fieldNumber: Swift.Int) throws
  public mutating func visitPackedDoubleField(value: [Swift.Double], fieldNumber: Swift.Int) throws
  public mutating func visitPackedInt32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  public mutating func visitPackedInt64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  public mutating func visitPackedUInt32Field(value: [Swift.UInt32], fieldNumber: Swift.Int) throws
  public mutating func visitPackedUInt64Field(value: [Swift.UInt64], fieldNumber: Swift.Int) throws
  public mutating func visitPackedSInt32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  public mutating func visitPackedSInt64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  public mutating func visitPackedFixed32Field(value: [Swift.UInt32], fieldNumber: Swift.Int) throws
  public mutating func visitPackedFixed64Field(value: [Swift.UInt64], fieldNumber: Swift.Int) throws
  public mutating func visitPackedSFixed32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  public mutating func visitPackedSFixed64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  public mutating func visitPackedBoolField(value: [Swift.Bool], fieldNumber: Swift.Int) throws
  public mutating func visitPackedEnumField<E>(value: [E], fieldNumber: Swift.Int) throws where E : NbmapCoreNavigation.Enum
  public mutating func visitSingularGroupField<G>(value: G, fieldNumber: Swift.Int) throws where G : NbmapCoreNavigation.Message
  public mutating func visitExtensionFieldsAsMessageSet(fields: NbmapCoreNavigation.ExtensionFieldValueSet, start: Swift.Int, end: Swift.Int) throws
  public mutating func visitExtensionFields(fields: NbmapCoreNavigation.ExtensionFieldValueSet, start: Swift.Int, end: Swift.Int) throws
}
public class ApplicationDataSource : NbmapCoreNavigation.IApplicationDataSource {
  public init()
  public var name: Swift.String? {
    get
  }
  public var identifier: Swift.String? {
    get
  }
  public var version: Swift.String? {
    get
  }
  public var build: Swift.String? {
    get
  }
  @objc deinit
}
public class MultiLogRecordExporter : NbmapCoreNavigation.LogRecordExporter {
  public init(logRecordExporters: [any NbmapCoreNavigation.LogRecordExporter])
  public func export(logRecords: [NbmapCoreNavigation.ReadableLogRecord]) -> NbmapCoreNavigation.ExportResult
  public func shutdown()
  public func forceFlush() -> NbmapCoreNavigation.ExportResult
  @objc deinit
}
public struct ProxyMeter : NbmapCoreNavigation.Meter {
  public func createRawDoubleCounter(name: Swift.String) -> NbmapCoreNavigation.AnyRawCounterMetric<Swift.Double>
  public func createRawIntCounter(name: Swift.String) -> NbmapCoreNavigation.AnyRawCounterMetric<Swift.Int>
  public func createRawDoubleHistogram(name: Swift.String) -> NbmapCoreNavigation.AnyRawHistogramMetric<Swift.Double>
  public func createRawIntHistogram(name: Swift.String) -> NbmapCoreNavigation.AnyRawHistogramMetric<Swift.Int>
  public func getLabelSet(labels: [Swift.String : Swift.String]) -> NbmapCoreNavigation.LabelSet
  public func createIntCounter(name: Swift.String, monotonic: Swift.Bool) -> NbmapCoreNavigation.AnyCounterMetric<Swift.Int>
  public func createDoubleCounter(name: Swift.String, monotonic: Swift.Bool) -> NbmapCoreNavigation.AnyCounterMetric<Swift.Double>
  public func createIntMeasure(name: Swift.String, absolute: Swift.Bool) -> NbmapCoreNavigation.AnyMeasureMetric<Swift.Int>
  public func createDoubleMeasure(name: Swift.String, absolute: Swift.Bool) -> NbmapCoreNavigation.AnyMeasureMetric<Swift.Double>
  public func createIntHistogram(name: Swift.String, explicitBoundaries: Swift.Array<Swift.Int>? = nil, absolute: Swift.Bool) -> NbmapCoreNavigation.AnyHistogramMetric<Swift.Int>
  public func createDoubleHistogram(name: Swift.String, explicitBoundaries: Swift.Array<Swift.Double>?, absolute: Swift.Bool) -> NbmapCoreNavigation.AnyHistogramMetric<Swift.Double>
  public func createIntObservableGauge(name: Swift.String, callback: @escaping (any NbmapCoreNavigation.IntObserverMetric) -> Swift.Void) -> any NbmapCoreNavigation.IntObserverMetric
  public func createDoubleObservableGauge(name: Swift.String, callback: @escaping (any NbmapCoreNavigation.DoubleObserverMetric) -> Swift.Void) -> any NbmapCoreNavigation.DoubleObserverMetric
  public func createIntObserver(name: Swift.String, absolute: Swift.Bool, callback: @escaping (any NbmapCoreNavigation.IntObserverMetric) -> Swift.Void) -> any NbmapCoreNavigation.IntObserverMetric
  public func createDoubleObserver(name: Swift.String, absolute: Swift.Bool, callback: @escaping (any NbmapCoreNavigation.DoubleObserverMetric) -> Swift.Void) -> any NbmapCoreNavigation.DoubleObserverMetric
}
public struct EntryKey : Swift.Equatable, Swift.Comparable, Swift.Hashable {
  public var name: Swift.String {
    get
  }
  public init?(name: Swift.String)
  public static func < (lhs: NbmapCoreNavigation.EntryKey, rhs: NbmapCoreNavigation.EntryKey) -> Swift.Bool
  public static func == (a: NbmapCoreNavigation.EntryKey, b: NbmapCoreNavigation.EntryKey) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class OperatingSystemDataSource : NbmapCoreNavigation.IOperatingSystemDataSource {
  public init()
  public var description: Swift.String {
    get
  }
  public var type: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var version: Swift.String {
    get
  }
  @objc deinit
}
public protocol MeterProvider : AnyObject {
  func get(instrumentationName: Swift.String, instrumentationVersion: Swift.String?) -> any NbmapCoreNavigation.Meter
}
public protocol RawHistogramMetric {
  associatedtype T
  func bind(labelset: NbmapCoreNavigation.LabelSet) -> NbmapCoreNavigation.BoundRawHistogramMetric<Self.T>
  func bind(labels: [Swift.String : Swift.String]) -> NbmapCoreNavigation.BoundRawHistogramMetric<Self.T>
  func record(explicitBoundaries: Swift.Array<Self.T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: Self.T, labelset: NbmapCoreNavigation.LabelSet)
  func record(explicitBoundaries: Swift.Array<Self.T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: Self.T, labels: [Swift.String : Swift.String])
}
public struct AnyRawHistogramMetric<T> : NbmapCoreNavigation.RawHistogramMetric {
  public init<U>(_ histogram: U) where T == U.T, U : NbmapCoreNavigation.RawHistogramMetric
  public func bind(labelset: NbmapCoreNavigation.LabelSet) -> NbmapCoreNavigation.BoundRawHistogramMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> NbmapCoreNavigation.BoundRawHistogramMetric<T>
  public func record(explicitBoundaries: Swift.Array<T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: T, labels: [Swift.String : Swift.String])
  public func record(explicitBoundaries: Swift.Array<T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: T, labelset: NbmapCoreNavigation.LabelSet)
}
public struct NoopRawHistogramMetric<T> : NbmapCoreNavigation.RawHistogramMetric {
  public func record(explicitBoundaries: Swift.Array<T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: T, labelset: NbmapCoreNavigation.LabelSet)
  public func record(explicitBoundaries: Swift.Array<T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: T, labels: [Swift.String : Swift.String])
  public init()
  public func bind(labelset: NbmapCoreNavigation.LabelSet) -> NbmapCoreNavigation.BoundRawHistogramMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> NbmapCoreNavigation.BoundRawHistogramMetric<T>
}
@_hasMissingDesignatedInitializers public class DefaultLoggerProvider : NbmapCoreNavigation.LoggerProvider {
  public static let instance: any NbmapCoreNavigation.LoggerProvider
  public func get(instrumentationScopeName: Swift.String) -> any NbmapCoreNavigation.Logger
  public func loggerBuilder(instrumentationScopeName: Swift.String) -> any NbmapCoreNavigation.LoggerBuilder
  @objc deinit
}
@objc open class SimulatedLocationManager : NbmapCoreNavigation.NavigationLocationManager {
  public init(route: NbmapCoreNavigation.Route)
  public init(routeProgress: NbmapCoreNavigation.RouteProgress)
  @objc deinit
  public var speedMultiplier: Swift.Double {
    get
    set
  }
  @objc override dynamic open var location: CoreLocation.CLLocation? {
    @objc get
    @objc set
  }
  override public var simulatesLocation: Swift.Bool {
    get
    set
  }
  @objc override dynamic open func startUpdatingLocation()
  @objc override dynamic open func stopUpdatingLocation()
  @objc override dynamic open func copy() -> Any
}
public protocol FieldType {
  associatedtype BaseType : Swift.Hashable
  static var proto3DefaultValue: Self.BaseType { get }
  static func decodeSingular<D>(value: inout Self.BaseType?, from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  static func decodeRepeated<D>(value: inout [Self.BaseType], from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  static func visitSingular<V>(value: Self.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  static func visitRepeated<V>(value: [Self.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  static func visitPacked<V>(value: [Self.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
}
public protocol MapKeyType : NbmapCoreNavigation.FieldType {
  static func _lessThan(lhs: Self.BaseType, rhs: Self.BaseType) -> Swift.Bool
}
extension NbmapCoreNavigation.MapKeyType where Self.BaseType : Swift.Comparable {
  public static func _lessThan(lhs: Self.BaseType, rhs: Self.BaseType) -> Swift.Bool
}
public protocol MapValueType : NbmapCoreNavigation.FieldType {
}
public struct ProtobufFloat : NbmapCoreNavigation.FieldType, NbmapCoreNavigation.MapValueType {
  public typealias BaseType = Swift.Float
  public static var proto3DefaultValue: Swift.Float {
    get
  }
  public static func decodeSingular<D>(value: inout NbmapCoreNavigation.ProtobufFloat.BaseType?, from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func decodeRepeated<D>(value: inout [NbmapCoreNavigation.ProtobufFloat.BaseType], from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func visitSingular<V>(value: NbmapCoreNavigation.ProtobufFloat.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitRepeated<V>(value: [NbmapCoreNavigation.ProtobufFloat.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitPacked<V>(value: [NbmapCoreNavigation.ProtobufFloat.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
}
public struct ProtobufDouble : NbmapCoreNavigation.FieldType, NbmapCoreNavigation.MapValueType {
  public typealias BaseType = Swift.Double
  public static var proto3DefaultValue: Swift.Double {
    get
  }
  public static func decodeSingular<D>(value: inout NbmapCoreNavigation.ProtobufDouble.BaseType?, from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func decodeRepeated<D>(value: inout [NbmapCoreNavigation.ProtobufDouble.BaseType], from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func visitSingular<V>(value: NbmapCoreNavigation.ProtobufDouble.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitRepeated<V>(value: [NbmapCoreNavigation.ProtobufDouble.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitPacked<V>(value: [NbmapCoreNavigation.ProtobufDouble.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
}
public struct ProtobufInt32 : NbmapCoreNavigation.FieldType, NbmapCoreNavigation.MapKeyType, NbmapCoreNavigation.MapValueType {
  public typealias BaseType = Swift.Int32
  public static var proto3DefaultValue: Swift.Int32 {
    get
  }
  public static func decodeSingular<D>(value: inout NbmapCoreNavigation.ProtobufInt32.BaseType?, from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func decodeRepeated<D>(value: inout [NbmapCoreNavigation.ProtobufInt32.BaseType], from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func visitSingular<V>(value: NbmapCoreNavigation.ProtobufInt32.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitRepeated<V>(value: [NbmapCoreNavigation.ProtobufInt32.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitPacked<V>(value: [NbmapCoreNavigation.ProtobufInt32.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
}
public struct ProtobufInt64 : NbmapCoreNavigation.FieldType, NbmapCoreNavigation.MapKeyType, NbmapCoreNavigation.MapValueType {
  public typealias BaseType = Swift.Int64
  public static var proto3DefaultValue: Swift.Int64 {
    get
  }
  public static func decodeSingular<D>(value: inout NbmapCoreNavigation.ProtobufInt64.BaseType?, from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func decodeRepeated<D>(value: inout [NbmapCoreNavigation.ProtobufInt64.BaseType], from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func visitSingular<V>(value: NbmapCoreNavigation.ProtobufInt64.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitRepeated<V>(value: [NbmapCoreNavigation.ProtobufInt64.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitPacked<V>(value: [NbmapCoreNavigation.ProtobufInt64.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
}
public struct ProtobufUInt32 : NbmapCoreNavigation.FieldType, NbmapCoreNavigation.MapKeyType, NbmapCoreNavigation.MapValueType {
  public typealias BaseType = Swift.UInt32
  public static var proto3DefaultValue: Swift.UInt32 {
    get
  }
  public static func decodeSingular<D>(value: inout NbmapCoreNavigation.ProtobufUInt32.BaseType?, from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func decodeRepeated<D>(value: inout [NbmapCoreNavigation.ProtobufUInt32.BaseType], from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func visitSingular<V>(value: NbmapCoreNavigation.ProtobufUInt32.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitRepeated<V>(value: [NbmapCoreNavigation.ProtobufUInt32.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitPacked<V>(value: [NbmapCoreNavigation.ProtobufUInt32.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
}
public struct ProtobufUInt64 : NbmapCoreNavigation.FieldType, NbmapCoreNavigation.MapKeyType, NbmapCoreNavigation.MapValueType {
  public typealias BaseType = Swift.UInt64
  public static var proto3DefaultValue: Swift.UInt64 {
    get
  }
  public static func decodeSingular<D>(value: inout NbmapCoreNavigation.ProtobufUInt64.BaseType?, from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func decodeRepeated<D>(value: inout [NbmapCoreNavigation.ProtobufUInt64.BaseType], from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func visitSingular<V>(value: NbmapCoreNavigation.ProtobufUInt64.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitRepeated<V>(value: [NbmapCoreNavigation.ProtobufUInt64.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitPacked<V>(value: [NbmapCoreNavigation.ProtobufUInt64.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
}
public struct ProtobufSInt32 : NbmapCoreNavigation.FieldType, NbmapCoreNavigation.MapKeyType, NbmapCoreNavigation.MapValueType {
  public typealias BaseType = Swift.Int32
  public static var proto3DefaultValue: Swift.Int32 {
    get
  }
  public static func decodeSingular<D>(value: inout NbmapCoreNavigation.ProtobufSInt32.BaseType?, from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func decodeRepeated<D>(value: inout [NbmapCoreNavigation.ProtobufSInt32.BaseType], from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func visitSingular<V>(value: NbmapCoreNavigation.ProtobufSInt32.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitRepeated<V>(value: [NbmapCoreNavigation.ProtobufSInt32.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitPacked<V>(value: [NbmapCoreNavigation.ProtobufSInt32.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
}
public struct ProtobufSInt64 : NbmapCoreNavigation.FieldType, NbmapCoreNavigation.MapKeyType, NbmapCoreNavigation.MapValueType {
  public typealias BaseType = Swift.Int64
  public static var proto3DefaultValue: Swift.Int64 {
    get
  }
  public static func decodeSingular<D>(value: inout NbmapCoreNavigation.ProtobufSInt64.BaseType?, from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func decodeRepeated<D>(value: inout [NbmapCoreNavigation.ProtobufSInt64.BaseType], from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func visitSingular<V>(value: NbmapCoreNavigation.ProtobufSInt64.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitRepeated<V>(value: [NbmapCoreNavigation.ProtobufSInt64.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitPacked<V>(value: [NbmapCoreNavigation.ProtobufSInt64.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
}
public struct ProtobufFixed32 : NbmapCoreNavigation.FieldType, NbmapCoreNavigation.MapKeyType, NbmapCoreNavigation.MapValueType {
  public typealias BaseType = Swift.UInt32
  public static var proto3DefaultValue: Swift.UInt32 {
    get
  }
  public static func decodeSingular<D>(value: inout NbmapCoreNavigation.ProtobufFixed32.BaseType?, from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func decodeRepeated<D>(value: inout [NbmapCoreNavigation.ProtobufFixed32.BaseType], from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func visitSingular<V>(value: NbmapCoreNavigation.ProtobufFixed32.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitRepeated<V>(value: [NbmapCoreNavigation.ProtobufFixed32.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitPacked<V>(value: [NbmapCoreNavigation.ProtobufFixed32.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
}
public struct ProtobufFixed64 : NbmapCoreNavigation.FieldType, NbmapCoreNavigation.MapKeyType, NbmapCoreNavigation.MapValueType {
  public typealias BaseType = Swift.UInt64
  public static var proto3DefaultValue: Swift.UInt64 {
    get
  }
  public static func decodeSingular<D>(value: inout NbmapCoreNavigation.ProtobufFixed64.BaseType?, from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func decodeRepeated<D>(value: inout [NbmapCoreNavigation.ProtobufFixed64.BaseType], from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func visitSingular<V>(value: NbmapCoreNavigation.ProtobufFixed64.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitRepeated<V>(value: [NbmapCoreNavigation.ProtobufFixed64.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitPacked<V>(value: [NbmapCoreNavigation.ProtobufFixed64.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
}
public struct ProtobufSFixed32 : NbmapCoreNavigation.FieldType, NbmapCoreNavigation.MapKeyType, NbmapCoreNavigation.MapValueType {
  public typealias BaseType = Swift.Int32
  public static var proto3DefaultValue: Swift.Int32 {
    get
  }
  public static func decodeSingular<D>(value: inout NbmapCoreNavigation.ProtobufSFixed32.BaseType?, from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func decodeRepeated<D>(value: inout [NbmapCoreNavigation.ProtobufSFixed32.BaseType], from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func visitSingular<V>(value: NbmapCoreNavigation.ProtobufSFixed32.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitRepeated<V>(value: [NbmapCoreNavigation.ProtobufSFixed32.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitPacked<V>(value: [NbmapCoreNavigation.ProtobufSFixed32.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
}
public struct ProtobufSFixed64 : NbmapCoreNavigation.FieldType, NbmapCoreNavigation.MapKeyType, NbmapCoreNavigation.MapValueType {
  public typealias BaseType = Swift.Int64
  public static var proto3DefaultValue: Swift.Int64 {
    get
  }
  public static func decodeSingular<D>(value: inout NbmapCoreNavigation.ProtobufSFixed64.BaseType?, from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func decodeRepeated<D>(value: inout [NbmapCoreNavigation.ProtobufSFixed64.BaseType], from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func visitSingular<V>(value: NbmapCoreNavigation.ProtobufSFixed64.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitRepeated<V>(value: [NbmapCoreNavigation.ProtobufSFixed64.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitPacked<V>(value: [NbmapCoreNavigation.ProtobufSFixed64.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
}
public struct ProtobufBool : NbmapCoreNavigation.FieldType, NbmapCoreNavigation.MapKeyType, NbmapCoreNavigation.MapValueType {
  public typealias BaseType = Swift.Bool
  public static var proto3DefaultValue: Swift.Bool {
    get
  }
  public static func decodeSingular<D>(value: inout NbmapCoreNavigation.ProtobufBool.BaseType?, from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func decodeRepeated<D>(value: inout [NbmapCoreNavigation.ProtobufBool.BaseType], from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func visitSingular<V>(value: NbmapCoreNavigation.ProtobufBool.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitRepeated<V>(value: [NbmapCoreNavigation.ProtobufBool.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitPacked<V>(value: [NbmapCoreNavigation.ProtobufBool.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func _lessThan(lhs: NbmapCoreNavigation.ProtobufBool.BaseType, rhs: NbmapCoreNavigation.ProtobufBool.BaseType) -> Swift.Bool
}
public struct ProtobufString : NbmapCoreNavigation.FieldType, NbmapCoreNavigation.MapKeyType, NbmapCoreNavigation.MapValueType {
  public typealias BaseType = Swift.String
  public static var proto3DefaultValue: Swift.String {
    get
  }
  public static func decodeSingular<D>(value: inout NbmapCoreNavigation.ProtobufString.BaseType?, from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func decodeRepeated<D>(value: inout [NbmapCoreNavigation.ProtobufString.BaseType], from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func visitSingular<V>(value: NbmapCoreNavigation.ProtobufString.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitRepeated<V>(value: [NbmapCoreNavigation.ProtobufString.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitPacked<V>(value: [NbmapCoreNavigation.ProtobufString.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
}
public struct ProtobufBytes : NbmapCoreNavigation.FieldType, NbmapCoreNavigation.MapValueType {
  public typealias BaseType = Foundation.Data
  public static var proto3DefaultValue: Foundation.Data {
    get
  }
  public static func decodeSingular<D>(value: inout NbmapCoreNavigation.ProtobufBytes.BaseType?, from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func decodeRepeated<D>(value: inout [NbmapCoreNavigation.ProtobufBytes.BaseType], from decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public static func visitSingular<V>(value: NbmapCoreNavigation.ProtobufBytes.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitRepeated<V>(value: [NbmapCoreNavigation.ProtobufBytes.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func visitPacked<V>(value: [NbmapCoreNavigation.ProtobufBytes.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
}
public protocol SpanBuilder : AnyObject {
  @discardableResult
  func setParent(_ parent: any NbmapCoreNavigation.Span) -> Self
  @discardableResult
  func setParent(_ parent: NbmapCoreNavigation.SpanContext) -> Self
  @discardableResult
  func setNoParent() -> Self
  @discardableResult
  func addLink(spanContext: NbmapCoreNavigation.SpanContext) -> Self
  @discardableResult
  func addLink(spanContext: NbmapCoreNavigation.SpanContext, attributes: [Swift.String : NbmapCoreNavigation.AttributeValue]) -> Self
  @discardableResult
  func setAttribute(key: Swift.String, value: Swift.String) -> Self
  @discardableResult
  func setAttribute(key: Swift.String, value: Swift.Int) -> Self
  @discardableResult
  func setAttribute(key: Swift.String, value: Swift.Double) -> Self
  @discardableResult
  func setAttribute(key: Swift.String, value: Swift.Bool) -> Self
  @discardableResult
  func setAttribute(key: Swift.String, value: NbmapCoreNavigation.AttributeValue) -> Self
  @discardableResult
  func setSpanKind(spanKind: NbmapCoreNavigation.SpanKind) -> Self
  @discardableResult
  func setStartTime(time: Foundation.Date) -> Self
  @discardableResult
  func setActive(_ active: Swift.Bool) -> Self
  func startSpan() -> any NbmapCoreNavigation.Span
}
extension NbmapCoreNavigation.SpanBuilder {
  @discardableResult
  public func setAttribute(key: Swift.String, value: Swift.String) -> Self
  @discardableResult
  public func setAttribute(key: Swift.String, value: Swift.Int) -> Self
  @discardableResult
  public func setAttribute(key: Swift.String, value: Swift.Double) -> Self
  @discardableResult
  public func setAttribute(key: Swift.String, value: Swift.Bool) -> Self
}
public enum JSONDecodingError : Swift.Error {
  case failure
  case malformedNumber
  case numberRange
  case malformedMap
  case malformedBool
  case malformedString
  case invalidUTF8
  case missingFieldNames
  case schemaMismatch
  case unrecognizedEnumValue
  case illegalNull
  case unquotedMapKey
  case leadingZero
  case truncated
  case malformedDuration
  case malformedTimestamp
  case malformedFieldMask
  case trailingGarbage
  case conflictingOneOf
  case messageDepthLimit
  case unknownField(Swift.String)
}
public struct LogLimits {
  public static let defaultMaxAttributeCount: Swift.Int
  public static let defaultMaxAtributeLength: Swift.Int
  public let maxAttributeCount: Swift.Int
  public let maxAttributeLength: Swift.Int
  public init(maxAttributeCount: Swift.Int = Self.defaultMaxAttributeCount, maxAttributeLength: Swift.Int = Self.defaultMaxAtributeLength)
}
open class BoundMeasureMetric<T> {
  public init()
  open func record(value: T)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class ViewEventType {
  public static let TYPE_ROUTE: Swift.String
  public static let TYPE_LOCATION: Swift.String
  public static let TYPE_SNAP_LOCATION: Swift.String
  public static let TYPE_SPOKEN: Swift.String
  public static let TYPE_BANNER: Swift.String
  public static let TYPE_REROUTE: Swift.String
  public static let TYPE_SUMMARY: Swift.String
  public static let TYPE_REROUTE_ERROR: Swift.String
  public static let TYPE_REROUTE_RESPONSE: Swift.String
  public static let TYPE_NAVIGATION_FINISHED: Swift.String
  public static let TYPE_ALTERNATIVE_LOCATION: Swift.String
  @objc deinit
}
public protocol TripSession {
  var delegate: (any NbmapCoreNavigation.NBTripSessionDelegate)? { get set }
  func onTripSession(didUpdate progress: NbmapCoreNavigation.RouteProgress)
  func onTripSession(didSet routes: [NbmapCoreNavigation.Route])
}
@objc(NBLane) public class Lane : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc final public let indications: NbmapCoreNavigation.LaneIndication
  @objc public init(indications: NbmapCoreNavigation.LaneIndication)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
public struct DefaultContextPropagators : NbmapCoreNavigation.ContextPropagators {
  public var textMapPropagator: any NbmapCoreNavigation.TextMapPropagator
  public var textMapBaggagePropagator: any NbmapCoreNavigation.TextMapBaggagePropagator
  public init()
  public init(textPropagators: [any NbmapCoreNavigation.TextMapPropagator], baggagePropagator: any NbmapCoreNavigation.TextMapBaggagePropagator)
  public mutating func addTextMapPropagator(textFormat: any NbmapCoreNavigation.TextMapPropagator)
}
public protocol Meter {
  func createIntCounter(name: Swift.String, monotonic: Swift.Bool) -> NbmapCoreNavigation.AnyCounterMetric<Swift.Int>
  func createDoubleCounter(name: Swift.String, monotonic: Swift.Bool) -> NbmapCoreNavigation.AnyCounterMetric<Swift.Double>
  func createIntMeasure(name: Swift.String, absolute: Swift.Bool) -> NbmapCoreNavigation.AnyMeasureMetric<Swift.Int>
  func createDoubleMeasure(name: Swift.String, absolute: Swift.Bool) -> NbmapCoreNavigation.AnyMeasureMetric<Swift.Double>
  func createIntHistogram(name: Swift.String, explicitBoundaries: Swift.Array<Swift.Int>?, absolute: Swift.Bool) -> NbmapCoreNavigation.AnyHistogramMetric<Swift.Int>
  func createDoubleHistogram(name: Swift.String, explicitBoundaries: Swift.Array<Swift.Double>?, absolute: Swift.Bool) -> NbmapCoreNavigation.AnyHistogramMetric<Swift.Double>
  func createRawDoubleHistogram(name: Swift.String) -> NbmapCoreNavigation.AnyRawHistogramMetric<Swift.Double>
  func createRawIntHistogram(name: Swift.String) -> NbmapCoreNavigation.AnyRawHistogramMetric<Swift.Int>
  func createRawDoubleCounter(name: Swift.String) -> NbmapCoreNavigation.AnyRawCounterMetric<Swift.Double>
  func createRawIntCounter(name: Swift.String) -> NbmapCoreNavigation.AnyRawCounterMetric<Swift.Int>
  func createIntObserver(name: Swift.String, absolute: Swift.Bool, callback: @escaping (any NbmapCoreNavigation.IntObserverMetric) -> Swift.Void) -> any NbmapCoreNavigation.IntObserverMetric
  func createDoubleObserver(name: Swift.String, absolute: Swift.Bool, callback: @escaping (any NbmapCoreNavigation.DoubleObserverMetric) -> Swift.Void) -> any NbmapCoreNavigation.DoubleObserverMetric
  func createIntObservableGauge(name: Swift.String, callback: @escaping (any NbmapCoreNavigation.IntObserverMetric) -> Swift.Void) -> any NbmapCoreNavigation.IntObserverMetric
  func createDoubleObservableGauge(name: Swift.String, callback: @escaping (any NbmapCoreNavigation.DoubleObserverMetric) -> Swift.Void) -> any NbmapCoreNavigation.DoubleObserverMetric
  func getLabelSet(labels: [Swift.String : Swift.String]) -> NbmapCoreNavigation.LabelSet
}
extension NbmapCoreNavigation.Meter {
  public func createIntCounter(name: Swift.String) -> NbmapCoreNavigation.AnyCounterMetric<Swift.Int>
  public func createDoubleCounter(name: Swift.String) -> NbmapCoreNavigation.AnyCounterMetric<Swift.Double>
  public func createIntMeasure(name: Swift.String) -> NbmapCoreNavigation.AnyMeasureMetric<Swift.Int>
  public func createDoubleMeasure(name: Swift.String) -> NbmapCoreNavigation.AnyMeasureMetric<Swift.Double>
  public func createIntObserver(name: Swift.String, callback: @escaping (any NbmapCoreNavigation.IntObserverMetric) -> Swift.Void) -> any NbmapCoreNavigation.IntObserverMetric
  public func createDoubleObserver(name: Swift.String, callback: @escaping (any NbmapCoreNavigation.DoubleObserverMetric) -> Swift.Void) -> any NbmapCoreNavigation.DoubleObserverMetric
}
@objc(NBTunnelIntersectionManagerDelegate) public protocol TunnelIntersectionManagerDelegate {
  @objc(tunnelIntersectionManager:willEnableAnimationAtLocation:) optional func tunnelIntersectionManager(_ manager: NbmapCoreNavigation.TunnelIntersectionManager, willEnableAnimationAt location: CoreLocation.CLLocation)
  @objc(tunnelIntersectionManager:willDisableAnimationAtLocation:) optional func tunnelIntersectionManager(_ manager: NbmapCoreNavigation.TunnelIntersectionManager, willDisableAnimationAt location: CoreLocation.CLLocation)
}
@_inheritsConvenienceInitializers @objc(NBTunnelIntersectionManager) open class TunnelIntersectionManager : ObjectiveC.NSObject {
  @objc weak public var delegate: (any NbmapCoreNavigation.TunnelIntersectionManagerDelegate)?
  @objc public var animatedLocationManager: NbmapCoreNavigation.SimulatedLocationManager?
  @objc public var tunnelExitLocations: [CoreLocation.CLLocation]
  @objc public var tunnelSimulationEnabled: Swift.Bool
  @objc public func userWithinTunnelEntranceRadius(at location: CoreLocation.CLLocation, routeProgress: NbmapCoreNavigation.RouteProgress) -> Swift.Bool
  @objc public func enableTunnelAnimation(routeController: NbmapCoreNavigation.RouteController, routeProgress: NbmapCoreNavigation.RouteProgress)
  @objc public func suspendTunnelAnimation(at location: CoreLocation.CLLocation, routeController: NbmapCoreNavigation.RouteController)
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.NSAttributedString.Key {
  public static let quantity: Foundation.NSAttributedString.Key
}
@objc(NBDistanceFormatter) open class DistanceFormatter : Foundation.LengthFormatter {
  public var unit: Foundation.LengthFormatter.Unit {
    get
  }
  @objc public init(approximate: Swift.Bool = false)
  @objc required dynamic public init?(coder decoder: Foundation.NSCoder)
  @objc override dynamic open func encode(with aCoder: Foundation.NSCoder)
  @objc public func string(from distance: CoreLocation.CLLocationDistance) -> Swift.String
  @objc override dynamic open func string(fromMeters numberInMeters: Swift.Double) -> Swift.String
  @objc(measurementOfDistance:) public func measurement(of distance: CoreLocation.CLLocationDistance) -> Foundation.Measurement<Foundation.UnitLength>
  @objc override dynamic open func attributedString(for obj: Any, withDefaultAttributes attrs: [Foundation.NSAttributedString.Key : Any]? = nil) -> Foundation.NSAttributedString?
  @objc deinit
}
public struct SpanId : Swift.Equatable, Swift.Comparable, Swift.Hashable, Swift.CustomStringConvertible, Swift.Codable {
  public static let size: Swift.Int
  public static let invalidId: Swift.UInt64
  public static let invalid: NbmapCoreNavigation.SpanId
  public static func getSize() -> Swift.Int
  public init(id: Swift.UInt64)
  public init()
  public static func random() -> NbmapCoreNavigation.SpanId
  public init(fromBytes bytes: Swift.Array<Swift.UInt8>, withOffset offset: Swift.Int = 0)
  public init(fromBytes bytes: Swift.ArraySlice<Swift.UInt8>, withOffset offset: Swift.Int = 0)
  public init(fromBytes bytes: Swift.ArraySlice<Swift.Character>, withOffset offset: Swift.Int = 0)
  public func copyBytesTo(dest: inout Foundation.Data, destOffset: Swift.Int)
  public func copyBytesTo(dest: inout Swift.Array<Swift.UInt8>, destOffset: Swift.Int)
  public func copyBytesTo(dest: inout Swift.ArraySlice<Swift.UInt8>, destOffset: Swift.Int)
  public init(fromHexString hex: Swift.String, withOffset offset: Swift.Int = 0)
  public var hexString: Swift.String {
    get
  }
  public var rawValue: Swift.UInt64 {
    get
  }
  public var isValid: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
  public static func < (lhs: NbmapCoreNavigation.SpanId, rhs: NbmapCoreNavigation.SpanId) -> Swift.Bool
  public static func == (lhs: NbmapCoreNavigation.SpanId, rhs: NbmapCoreNavigation.SpanId) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
open class ConfigurationApiConstants {
  public init()
  public static let TOMTOM_STYLE_BRIGHT: Swift.String
  public static let TOMTOM_STYLE_DARK: Swift.String
  public static let TOMTOM_STYLE_SATELLITE: Swift.String
  public static let MAPTILER_STYLE_BRIGHT: Swift.String
  public static let MAPTILER_STYLE_DARK: Swift.String
  public static let MAPTILER_STYLE_SATELLITE: Swift.String
  public static let IOS_SDK_PLATFORM: Swift.String
  public static let TOMTOM_STYLE_ID: Swift.Int
  public static let MAPTILER_STYLE_ID: Swift.Int
  public static let DEFAULT_QUERY_INTERVAL: Swift.Int
  public static let TIME_UNIT_IN_MINUTE: Swift.String
  public static let TIME_UNIT_IN_HOUR: Swift.String
  public static let TIME_UNIT_IN_DAY: Swift.String
  public static let CONFIGURATION_API_TAG: Swift.String
  public static let CONFIGURATION_CACHE_ID_KEY: Swift.String
  public static let CONFIGURATION_RESPONSE_KEY: Swift.String
  public static let CONFIGURATION_API_QUERY_INTERVAL_KEY: Swift.String
  public static let LAST_CONFIGURATION_CALL_TIMESTAMP_KEY: Swift.String
  @objc deinit
}
public struct SpanContext : Swift.Equatable, Swift.CustomStringConvertible, Swift.Hashable, Swift.Codable {
  public var traceId: NbmapCoreNavigation.TraceId {
    get
  }
  public var spanId: NbmapCoreNavigation.SpanId {
    get
  }
  public var traceFlags: NbmapCoreNavigation.TraceFlags {
    get
  }
  public var traceState: NbmapCoreNavigation.TraceState
  public let isRemote: Swift.Bool
  public static func create(traceId: NbmapCoreNavigation.TraceId, spanId: NbmapCoreNavigation.SpanId, traceFlags: NbmapCoreNavigation.TraceFlags, traceState: NbmapCoreNavigation.TraceState) -> NbmapCoreNavigation.SpanContext
  public static func createFromRemoteParent(traceId: NbmapCoreNavigation.TraceId, spanId: NbmapCoreNavigation.SpanId, traceFlags: NbmapCoreNavigation.TraceFlags, traceState: NbmapCoreNavigation.TraceState) -> NbmapCoreNavigation.SpanContext
  public var isValid: Swift.Bool {
    get
  }
  public var isSampled: Swift.Bool {
    get
  }
  public static func == (lhs: NbmapCoreNavigation.SpanContext, rhs: NbmapCoreNavigation.SpanContext) -> Swift.Bool
  public var description: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@objc(NBRouteProgress) open class RouteProgress : ObjectiveC.NSObject {
  @objc final public let route: NbmapCoreNavigation.Route
  @objc public var legIndex: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var currentLeg: NbmapCoreNavigation.RouteLeg {
    @objc get
  }
  public var isFinalLeg: Swift.Bool {
    get
  }
  @objc public var distanceTraveled: CoreLocation.CLLocationDistance {
    @objc get
  }
  @objc public var durationRemaining: Foundation.TimeInterval {
    @objc get
  }
  @objc public var fractionTraveled: Swift.Double {
    @objc get
  }
  @objc public var distanceRemaining: CoreLocation.CLLocationDistance {
    @objc get
  }
  @objc public var remainingWaypoints: [NbmapCoreNavigation.Waypoint] {
    @objc get
  }
  @objc public func remainingWaypointsWithoutLeg(removeIndex: Swift.Int) -> [NbmapCoreNavigation.Waypoint]
  @objc public var currentLegProgress: NbmapCoreNavigation.RouteLegProgress
  public var priorLeg: NbmapCoreNavigation.RouteLeg? {
    get
  }
  public var upcomingLeg: NbmapCoreNavigation.RouteLeg? {
    get
  }
  public var priorStep: NbmapCoreNavigation.RouteStep? {
    get
  }
  public var priorStepWithoutLastStepOfLeg: NbmapCoreNavigation.RouteStep? {
    get
  }
  public var upcomingStep: NbmapCoreNavigation.RouteStep? {
    get
  }
  public typealias TimedCongestionLevel = (NbmapCoreNavigation.CongestionLevel, Foundation.TimeInterval)
  public var congestionTravelTimesSegmentsByStep: [[[NbmapCoreNavigation.RouteProgress.TimedCongestionLevel]]]
  public var congestionTimesPerStep: [[[NbmapCoreNavigation.CongestionLevel : Foundation.TimeInterval]]]
  public var remainingLegs: [NbmapCoreNavigation.RouteLeg] {
    get
  }
  public var remainingSteps: [NbmapCoreNavigation.RouteStep] {
    get
  }
  public var nearbyShape: Turf.LineString {
    get
  }
  public var travelledRawLocations: NbmapCoreNavigation.RingBuffer<NbmapCoreNavigation.TravelledRawLocation>
  @objc public init(route: NbmapCoreNavigation.Route, legIndex: Swift.Int = 0, stepIndex: Swift.Int = 0, spokenInstructionIndex: Swift.Int = 0)
  public var averageCongestionLevelRemainingOnLeg: NbmapCoreNavigation.CongestionLevel? {
    get
  }
  @objc deinit
}
@objc(NBRouteLegProgress) open class RouteLegProgress : ObjectiveC.NSObject {
  @objc final public let leg: NbmapCoreNavigation.RouteLeg
  @objc public var stepIndex: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var currentLegComplete: Swift.Bool
  @objc public var remainingSteps: [NbmapCoreNavigation.RouteStep] {
    @objc get
  }
  @objc public var distanceTraveled: CoreLocation.CLLocationDistance {
    @objc get
  }
  @objc public var durationRemaining: Foundation.TimeInterval {
    @objc get
  }
  @objc public var distanceRemaining: CoreLocation.CLLocationDistance {
    @objc get
  }
  @objc public var fractionTraveled: Swift.Double {
    @objc get
  }
  @objc public var userHasArrivedAtWaypoint: Swift.Bool
  @objc public func stepBefore(_ step: NbmapCoreNavigation.RouteStep) -> NbmapCoreNavigation.RouteStep?
  @objc public func stepAfter(_ step: NbmapCoreNavigation.RouteStep) -> NbmapCoreNavigation.RouteStep?
  @objc public var priorStep: NbmapCoreNavigation.RouteStep? {
    @objc get
  }
  @objc public var currentStep: NbmapCoreNavigation.RouteStep {
    @objc get
  }
  @objc public var upComingStep: NbmapCoreNavigation.RouteStep? {
    @objc get
  }
  @objc public var followOnStep: NbmapCoreNavigation.RouteStep? {
    @objc get
  }
  @objc public func isCurrentStep(_ step: NbmapCoreNavigation.RouteStep) -> Swift.Bool
  @objc public var currentStepProgress: NbmapCoreNavigation.RouteStepProgress
  @objc public init(leg: NbmapCoreNavigation.RouteLeg, stepIndex: Swift.Int = 0, spokenInstructionIndex: Swift.Int = 0)
  @objc public var nearbyCoordinates: [CoreLocation.CLLocationCoordinate2D] {
    @objc get
  }
  public typealias StepIndexDistance = (index: Swift.Int, distance: CoreLocation.CLLocationDistance)
  public func closestStep(to coordinate: CoreLocation.CLLocationCoordinate2D) -> NbmapCoreNavigation.RouteLegProgress.StepIndexDistance?
  public func closestToNextStep(to coordinate: CoreLocation.CLLocationCoordinate2D) -> NbmapCoreNavigation.RouteLegProgress.StepIndexDistance?
  public func closestStepOfLeg(to coordinate: CoreLocation.CLLocationCoordinate2D) -> NbmapCoreNavigation.RouteLegProgress.StepIndexDistance?
  @objc deinit
}
@objc(NBRouteStepProgress) open class RouteStepProgress : ObjectiveC.NSObject {
  @objc final public let step: NbmapCoreNavigation.RouteStep
  @objc public var distanceTraveled: Swift.Double
  @objc public var userDistanceToManeuverLocation: Swift.Double
  @objc public var distanceRemaining: CoreLocation.CLLocationDistance {
    @objc get
  }
  @objc public var fractionTraveled: Swift.Double {
    @objc get
  }
  @objc public var durationRemaining: Foundation.TimeInterval {
    @objc get
  }
  @objc public init(step: NbmapCoreNavigation.RouteStep, spokenInstructionIndex: Swift.Int = 0)
  @objc public var intersectionsIncludingUpcomingManeuverIntersection: [NbmapCoreNavigation.Intersection]?
  @objc public var upcomingIntersection: NbmapCoreNavigation.Intersection? {
    @objc get
  }
  @objc public var intersectionIndex: Swift.Int
  @objc public var currentIntersection: NbmapCoreNavigation.Intersection? {
    @objc get
  }
  @objc public var intersectionDistances: Swift.Array<CoreLocation.CLLocationDistance>?
  public var userDistanceToUpcomingIntersection: CoreLocation.CLLocationDistance?
  @objc public var visualInstructionIndex: Swift.Int
  @objc public var remainingVisualInstructions: [NbmapCoreNavigation.VisualInstructionBanner]? {
    @objc get
  }
  @objc public var spokenInstructionIndex: Swift.Int
  @objc public var remainingSpokenInstructions: [NbmapCoreNavigation.SpokenInstruction]? {
    @objc get
  }
  @objc public var currentSpokenInstruction: NbmapCoreNavigation.SpokenInstruction? {
    @objc get
  }
  @objc public var currentVisualInstruction: NbmapCoreNavigation.VisualInstructionBanner? {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(NBDirectionsResult) open class DirectionsResult : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc public class var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc final public let coordinates: [CoreLocation.CLLocationCoordinate2D]?
  @objc open var coordinateCount: Swift.UInt {
    @objc get
  }
  @objc open func getCoordinates(_ coordinates: Swift.UnsafeMutablePointer<CoreLocation.CLLocationCoordinate2D>)
  @objc final public let legs: [NbmapCoreNavigation.RouteLeg]
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc final public let distance: CoreLocation.CLLocationDistance
  @objc final public let expectedTravelTime: Foundation.TimeInterval
  @objc final public let directionsOptions: NbmapCoreNavigation.DirectionsOptions
  @objc open var accessToken: Swift.String?
  @objc open var apiEndpoint: Foundation.URL?
  @objc open var routeIdentifier: Swift.String?
  @objc open var speechLocale: Foundation.Locale?
  @objc open var json: Swift.String?
  @objc open var fetchStartDate: Foundation.Date?
  @objc open var responseEndDate: Foundation.Date?
  final public let segmentCongestionLevels: [NbmapCoreNavigation.CongestionLevel]?
  @objc deinit
}
@objc(NBDirectionsOptions) open class DirectionsOptions : ObjectiveC.NSObject, Foundation.NSSecureCoding, Foundation.NSCopying {
  @objc required public init(waypoints: [NbmapCoreNavigation.Waypoint], profile: NbmapCoreNavigation.NBNavigationMode)
  @objc public class var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc(isEqualToDirectionsOptions:) open func isEqual(to directionsOptions: NbmapCoreNavigation.DirectionsOptions?) -> Swift.Bool
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc open var waypoints: [NbmapCoreNavigation.Waypoint]
  @objc open var travelledRawLocations: [NbmapCoreNavigation.TravelledRawLocation]
  @objc open var profileIdentifier: NbmapCoreNavigation.NBNavigationMode
  @objc open var shapeFormat: NbmapCoreNavigation.RouteShapeFormat
  @objc open var originalShape: Swift.String
  open var originalShapFormat: NbmapCoreNavigation.RouteShapeFormat?
  @objc open var routeShapeResolution: NbmapCoreNavigation.RouteShapeResolution
  @objc open var locale: Foundation.Locale
  @objc open var distanceMeasurementSystem: NbmapCoreNavigation.MeasurementSystem {
    @objc get
    @objc set
  }
  @objc open var departureTime: Swift.Int
  @objc deinit
}
public class LoggerProviderSdk : NbmapCoreNavigation.LoggerProvider {
  public init(clock: any NbmapCoreNavigation.Clock = MillisClock(), resource: NbmapCoreNavigation.Resource = EnvVarResource.get(), logLimits: NbmapCoreNavigation.LogLimits = LogLimits(), logRecordProcessors: [any NbmapCoreNavigation.LogRecordProcessor] = [])
  public func get(instrumentationScopeName: Swift.String) -> any NbmapCoreNavigation.Logger
  public func loggerBuilder(instrumentationScopeName: Swift.String) -> any NbmapCoreNavigation.LoggerBuilder
  @objc deinit
}
public struct RoutePoints {
  public var nestedList: [[[CoreLocation.CLLocationCoordinate2D]]]
  public var flatList: [CoreLocation.CLLocationCoordinate2D]
}
public struct RouteLineGranularDistances {
  public var distance: Swift.Double
  public var distanceArray: [NbmapCoreNavigation.RouteLineDistancesIndex]
}
public struct RouteLineDistancesIndex {
  public var point: CoreLocation.CLLocationCoordinate2D
  public var distanceRemaining: Swift.Double
}
public func calculateGranularDistances(_ coordinates: [CoreLocation.CLLocationCoordinate2D]) -> NbmapCoreNavigation.RouteLineGranularDistances?
public func calculateDistance(coordinate1: CoreLocation.CLLocationCoordinate2D, coordinate2: CoreLocation.CLLocationCoordinate2D) -> Swift.Double
public typealias Log = NbmapCoreNavigation.NavigationLog
public struct NavigationLog {
  public typealias Category = NbmapCoreNavigation.NavigationLogCategory
  public static func debug(_ message: Swift.String, category: NbmapCoreNavigation.NavigationLog.Category)
  public static func info(_ message: Swift.String, category: NbmapCoreNavigation.NavigationLog.Category)
  public static func warning(_ message: Swift.String, category: NbmapCoreNavigation.NavigationLog.Category)
  public static func error(_ message: Swift.String, category: NbmapCoreNavigation.NavigationLog.Category)
}
public struct NavigationLogCategory : Swift.RawRepresentable {
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public static let billing: NbmapCoreNavigation.NavigationLogCategory
  public static let navigation: NbmapCoreNavigation.NavigationLogCategory
  public static let navigationUI: NbmapCoreNavigation.NavigationLogCategory
  public static let settings: NbmapCoreNavigation.NavigationLogCategory
  public static let unimplementedMethods: NbmapCoreNavigation.NavigationLogCategory
  public var rawLogCategory: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
public typealias RoadClasses = NbmapCoreNavigation.NBRoadClasses
extension NbmapCoreNavigation.NBRoadClasses : Swift.CustomStringConvertible {
  public init?(descriptions: [Swift.String])
  public var description: Swift.String {
    get
  }
}
public func md5(_ string: Swift.String) -> Swift.String
public struct RingBuffer<T> {
  public enum OverwriteOperation {
    case ignore
    case overwrite
    public static func == (a: NbmapCoreNavigation.RingBuffer<T>.OverwriteOperation, b: NbmapCoreNavigation.RingBuffer<T>.OverwriteOperation) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public var isFull: Swift.Bool {
    get
  }
  public init(_ size: Swift.Int)
  public init<S>(_ elements: S, capacity: Swift.Int) where T == S.Element, S : Swift.Sequence
  public mutating func enQueue(_ element: T)
  @discardableResult
  public mutating func deQueue() -> T?
  public func peek() -> T?
  public func last() -> T?
  public func toList() -> [T?]
  public mutating func clear()
}
extension NbmapCoreNavigation.RingBuffer : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension NbmapCoreNavigation.RingBuffer : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: T...)
  public typealias ArrayLiteralElement = T
}
extension NbmapCoreNavigation.RingBuffer : Swift.Sequence {
  public func makeIterator() -> Swift.AnyIterator<T?>
  public typealias Element = T?
  public typealias Iterator = Swift.AnyIterator<T?>
}
final public class DefaultBaggage : NbmapCoreNavigation.Baggage, Swift.Equatable {
  public init(entries: [NbmapCoreNavigation.EntryKey : NbmapCoreNavigation.Entry?])
  public static func baggageBuilder() -> any NbmapCoreNavigation.BaggageBuilder
  final public func getEntries() -> [NbmapCoreNavigation.Entry]
  final public func getEntryValue(key: NbmapCoreNavigation.EntryKey) -> NbmapCoreNavigation.EntryValue?
  public static func == (lhs: NbmapCoreNavigation.DefaultBaggage, rhs: NbmapCoreNavigation.DefaultBaggage) -> Swift.Bool
  @objc deinit
}
public protocol UnimplementedLogging {
  func logUnimplemented(protocolType: Any, level: Swift.String, function: Swift.String)
}
extension NbmapCoreNavigation.UnimplementedLogging {
  public func logUnimplemented(protocolType: Any, level: Swift.String, function: Swift.String = #function)
}
extension NbmapCoreNavigation.Message {
  public static func jsonString<C>(from collection: C, options: NbmapCoreNavigation.JSONEncodingOptions = JSONEncodingOptions()) throws -> Swift.String where Self == C.Element, C : Swift.Collection
  public static func jsonUTF8Data<C>(from collection: C, options: NbmapCoreNavigation.JSONEncodingOptions = JSONEncodingOptions()) throws -> Foundation.Data where Self == C.Element, C : Swift.Collection
  public static func array(fromJSONString jsonString: Swift.String, options: NbmapCoreNavigation.JSONDecodingOptions = JSONDecodingOptions()) throws -> [Self]
  public static func array(fromJSONString jsonString: Swift.String, extensions: any NbmapCoreNavigation.ExtensionMap = SimpleExtensionMap(), options: NbmapCoreNavigation.JSONDecodingOptions = JSONDecodingOptions()) throws -> [Self]
  public static func array(fromJSONUTF8Data jsonUTF8Data: Foundation.Data, options: NbmapCoreNavigation.JSONDecodingOptions = JSONDecodingOptions()) throws -> [Self]
  public static func array(fromJSONUTF8Data jsonUTF8Data: Foundation.Data, extensions: any NbmapCoreNavigation.ExtensionMap = SimpleExtensionMap(), options: NbmapCoreNavigation.JSONDecodingOptions = JSONDecodingOptions()) throws -> [Self]
}
public struct JSONDecodingOptions {
  public var messageDepthLimit: Swift.Int
  public var ignoreUnknownFields: Swift.Bool
  public init()
}
public struct UnknownStorage : Swift.Equatable {
  public var data: Foundation.Data {
    get
  }
  public init()
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (a: NbmapCoreNavigation.UnknownStorage, b: NbmapCoreNavigation.UnknownStorage) -> Swift.Bool
}
public protocol ExtensibleMessage : NbmapCoreNavigation.Message {
  var _protobuf_extensionFieldValues: NbmapCoreNavigation.ExtensionFieldValueSet { get set }
}
extension NbmapCoreNavigation.ExtensibleMessage {
  public mutating func setExtensionValue<F>(ext: NbmapCoreNavigation.MessageExtension<F, Self>, value: F.ValueType) where F : NbmapCoreNavigation.ExtensionField
  public func getExtensionValue<F>(ext: NbmapCoreNavigation.MessageExtension<F, Self>) -> F.ValueType? where F : NbmapCoreNavigation.ExtensionField
  public func hasExtensionValue<F>(ext: NbmapCoreNavigation.MessageExtension<F, Self>) -> Swift.Bool where F : NbmapCoreNavigation.ExtensionField
  public mutating func clearExtensionValue<F>(ext: NbmapCoreNavigation.MessageExtension<F, Self>) where F : NbmapCoreNavigation.ExtensionField
}
extension NbmapCoreNavigation.ExtensibleMessage {
  public mutating func setExtensionValue<T>(ext: NbmapCoreNavigation.MessageExtension<NbmapCoreNavigation.RepeatedExtensionField<T>, Self>, value: [T.BaseType]) where T : NbmapCoreNavigation.FieldType
  public mutating func setExtensionValue<T>(ext: NbmapCoreNavigation.MessageExtension<NbmapCoreNavigation.PackedExtensionField<T>, Self>, value: [T.BaseType]) where T : NbmapCoreNavigation.FieldType
  public mutating func setExtensionValue<E>(ext: NbmapCoreNavigation.MessageExtension<NbmapCoreNavigation.RepeatedEnumExtensionField<E>, Self>, value: [E]) where E : NbmapCoreNavigation.Enum, E.RawValue == Swift.Int
  public mutating func setExtensionValue<E>(ext: NbmapCoreNavigation.MessageExtension<NbmapCoreNavigation.PackedEnumExtensionField<E>, Self>, value: [E]) where E : NbmapCoreNavigation.Enum, E.RawValue == Swift.Int
  public mutating func setExtensionValue<M>(ext: NbmapCoreNavigation.MessageExtension<NbmapCoreNavigation.RepeatedMessageExtensionField<M>, Self>, value: [M]) where M : NbmapCoreNavigation.Message, M : Swift.Equatable
  public mutating func setExtensionValue<M>(ext: NbmapCoreNavigation.MessageExtension<NbmapCoreNavigation.RepeatedGroupExtensionField<M>, Self>, value: [M]) where M : NbmapCoreNavigation.Message, M : Swift.Hashable
}
public enum ResourceAttributes : Swift.String {
  case cloudProvider
  case cloudAccountId
  case cloudRegion
  case cloudAvailabilityZone
  case cloudPlatform
  case awsEcsContainerArn
  case awsEcsClusterArn
  case awsEcsLaunchtype
  case awsEcsTaskArn
  case awsEcsTaskFamily
  case awsEcsTaskRevision
  case awsEksClusterArn
  case awsLogGroupNames
  case awsLogGroupArns
  case awsLogStreamNames
  case awsLogStreamArns
  case containerName
  case containerId
  case containerRuntime
  case containerImageName
  case containerImageTag
  case deploymentEnvironment
  case deviceId
  case deviceModelIdentifier
  case deviceModelName
  case faasName
  case faasId
  case faasVersion
  case faasInstance
  case faasMaxMemory
  case hostId
  case hostName
  case hostType
  case hostArch
  case hostImageName
  case hostImageId
  case hostImageVersion
  case k8sClusterName
  case k8sNodeName
  case k8sNodeUid
  case k8sNamespaceName
  case k8sPodUid
  case k8sPodName
  case k8sContainerName
  case k8sReplicasetUid
  case k8sReplicasetName
  case k8sDeploymentUid
  case k8sDeploymentName
  case k8sStatefulsetUid
  case k8sStatefulsetName
  case k8sDaemonsetUid
  case k8sDaemonsetName
  case k8sJobUid
  case k8sJobName
  case k8sCronjobUid
  case k8sCronjobName
  case osType
  case osDescription
  case osName
  case osVersion
  case processPid
  case processExecutableName
  case processExecutablePath
  case processCommand
  case processCommandLine
  case processCommandArgs
  case processOwner
  case processRuntimeName
  case processRuntimeVersion
  case processRuntimeDescription
  case serviceName
  case serviceNamespace
  case serviceInstanceId
  case serviceVersion
  case telemetrySdkName
  case telemetrySdkLanguage
  case telemetrySdkVersion
  case telemetryAutoVersion
  case webengineName
  case webengineVersion
  case webengineDescription
  public struct CloudProviderValues : Swift.CustomStringConvertible {
    public static let alibabaCloud: NbmapCoreNavigation.ResourceAttributes.CloudProviderValues
    public static let aws: NbmapCoreNavigation.ResourceAttributes.CloudProviderValues
    public static let azure: NbmapCoreNavigation.ResourceAttributes.CloudProviderValues
    public static let gcp: NbmapCoreNavigation.ResourceAttributes.CloudProviderValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct CloudPlatformValues : Swift.CustomStringConvertible {
    public static let alibabaCloudEcs: NbmapCoreNavigation.ResourceAttributes.CloudPlatformValues
    public static let alibabaCloudFc: NbmapCoreNavigation.ResourceAttributes.CloudPlatformValues
    public static let awsEc2: NbmapCoreNavigation.ResourceAttributes.CloudPlatformValues
    public static let awsEcs: NbmapCoreNavigation.ResourceAttributes.CloudPlatformValues
    public static let awsEks: NbmapCoreNavigation.ResourceAttributes.CloudPlatformValues
    public static let awsLambda: NbmapCoreNavigation.ResourceAttributes.CloudPlatformValues
    public static let awsElasticBeanstalk: NbmapCoreNavigation.ResourceAttributes.CloudPlatformValues
    public static let azureVm: NbmapCoreNavigation.ResourceAttributes.CloudPlatformValues
    public static let azureContainerInstances: NbmapCoreNavigation.ResourceAttributes.CloudPlatformValues
    public static let azureAks: NbmapCoreNavigation.ResourceAttributes.CloudPlatformValues
    public static let azureFunctions: NbmapCoreNavigation.ResourceAttributes.CloudPlatformValues
    public static let azureAppService: NbmapCoreNavigation.ResourceAttributes.CloudPlatformValues
    public static let gcpComputeEngine: NbmapCoreNavigation.ResourceAttributes.CloudPlatformValues
    public static let gcpCloudRun: NbmapCoreNavigation.ResourceAttributes.CloudPlatformValues
    public static let gcpKubernetesEngine: NbmapCoreNavigation.ResourceAttributes.CloudPlatformValues
    public static let gcpCloudFunctions: NbmapCoreNavigation.ResourceAttributes.CloudPlatformValues
    public static let gcpAppEngine: NbmapCoreNavigation.ResourceAttributes.CloudPlatformValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public enum AwsEcsLaunchtypeValues : Swift.String {
    case ec2
    case fargate
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct HostArchValues : Swift.CustomStringConvertible {
    public static let amd64: NbmapCoreNavigation.ResourceAttributes.HostArchValues
    public static let arm32: NbmapCoreNavigation.ResourceAttributes.HostArchValues
    public static let arm64: NbmapCoreNavigation.ResourceAttributes.HostArchValues
    public static let ia64: NbmapCoreNavigation.ResourceAttributes.HostArchValues
    public static let ppc32: NbmapCoreNavigation.ResourceAttributes.HostArchValues
    public static let ppc64: NbmapCoreNavigation.ResourceAttributes.HostArchValues
    public static let x86: NbmapCoreNavigation.ResourceAttributes.HostArchValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct OsTypeValues : Swift.CustomStringConvertible {
    public static let windows: NbmapCoreNavigation.ResourceAttributes.OsTypeValues
    public static let linux: NbmapCoreNavigation.ResourceAttributes.OsTypeValues
    public static let darwin: NbmapCoreNavigation.ResourceAttributes.OsTypeValues
    public static let freebsd: NbmapCoreNavigation.ResourceAttributes.OsTypeValues
    public static let netbsd: NbmapCoreNavigation.ResourceAttributes.OsTypeValues
    public static let openbsd: NbmapCoreNavigation.ResourceAttributes.OsTypeValues
    public static let dragonflybsd: NbmapCoreNavigation.ResourceAttributes.OsTypeValues
    public static let hpux: NbmapCoreNavigation.ResourceAttributes.OsTypeValues
    public static let aix: NbmapCoreNavigation.ResourceAttributes.OsTypeValues
    public static let solaris: NbmapCoreNavigation.ResourceAttributes.OsTypeValues
    public static let zOs: NbmapCoreNavigation.ResourceAttributes.OsTypeValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct TelemetrySdkLanguageValues : Swift.CustomStringConvertible {
    public static let cpp: NbmapCoreNavigation.ResourceAttributes.TelemetrySdkLanguageValues
    public static let dotnet: NbmapCoreNavigation.ResourceAttributes.TelemetrySdkLanguageValues
    public static let erlang: NbmapCoreNavigation.ResourceAttributes.TelemetrySdkLanguageValues
    public static let go: NbmapCoreNavigation.ResourceAttributes.TelemetrySdkLanguageValues
    public static let java: NbmapCoreNavigation.ResourceAttributes.TelemetrySdkLanguageValues
    public static let nodejs: NbmapCoreNavigation.ResourceAttributes.TelemetrySdkLanguageValues
    public static let php: NbmapCoreNavigation.ResourceAttributes.TelemetrySdkLanguageValues
    public static let python: NbmapCoreNavigation.ResourceAttributes.TelemetrySdkLanguageValues
    public static let ruby: NbmapCoreNavigation.ResourceAttributes.TelemetrySdkLanguageValues
    public static let webjs: NbmapCoreNavigation.ResourceAttributes.TelemetrySdkLanguageValues
    public static let swift: NbmapCoreNavigation.ResourceAttributes.TelemetrySdkLanguageValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public func == (left: NbmapCoreNavigation.ResourceAttributes, right: Swift.String) -> Swift.Bool
public func == (left: Swift.String, right: NbmapCoreNavigation.ResourceAttributes) -> Swift.Bool
@_hasMissingDesignatedInitializers public class NoopLogRecordExporter : NbmapCoreNavigation.LogRecordExporter {
  public static let instance: NbmapCoreNavigation.NoopLogRecordExporter
  public func export(logRecords: [NbmapCoreNavigation.ReadableLogRecord]) -> NbmapCoreNavigation.ExportResult
  public func shutdown()
  public func forceFlush() -> NbmapCoreNavigation.ExportResult
  @objc deinit
}
public protocol StationaryDetectionDelegate : AnyObject {
  func onStatusUpdate(isMoving: Swift.Bool)
  func onSensorUpdate(angularSpeed: Swift.Double?, acceleration: Swift.Double?, speed: Swift.Double?)
}
public protocol StationaryDetection {
  var delegate: (any NbmapCoreNavigation.StationaryDetectionDelegate)? { get set }
  func attach()
  func dettach()
  func isSensorEnabled() -> Swift.Bool
  func updateLocation(_ location: CoreLocation.CLLocation)
}
@_hasMissingDesignatedInitializers public class StationaryDetectionImpl : NbmapCoreNavigation.StationaryDetection {
  weak public var delegate: (any NbmapCoreNavigation.StationaryDetectionDelegate)?
  public init()
  public func updateLocation(_ location: CoreLocation.CLLocation)
  public func isSensorEnabled() -> Swift.Bool
  public func attach()
  public func dettach()
  @objc deinit
}
public enum BinaryDecodingError : Swift.Error {
  case trailingGarbage
  case truncated
  case invalidUTF8
  case malformedProtobuf
  case missingRequiredFields
  case internalExtensionError
  case messageDepthLimit
  public static func == (a: NbmapCoreNavigation.BinaryDecodingError, b: NbmapCoreNavigation.BinaryDecodingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct OtlpConfiguration {
  public static let DefaultTimeoutInterval: Foundation.TimeInterval
  public init(timeout: Foundation.TimeInterval = OtlpConfiguration.DefaultTimeoutInterval, headers: [(Swift.String, Swift.String)]? = nil)
}
public protocol Span : AnyObject, Swift.CustomStringConvertible {
  var kind: NbmapCoreNavigation.SpanKind { get }
  var context: NbmapCoreNavigation.SpanContext { get }
  var isRecording: Swift.Bool { get }
  var status: NbmapCoreNavigation.Status { get set }
  var name: Swift.String { get set }
  func setAttribute(key: Swift.String, value: NbmapCoreNavigation.AttributeValue?)
  func addEvent(name: Swift.String)
  func addEvent(name: Swift.String, timestamp: Foundation.Date)
  func addEvent(name: Swift.String, attributes: [Swift.String : NbmapCoreNavigation.AttributeValue])
  func addEvent(name: Swift.String, attributes: [Swift.String : NbmapCoreNavigation.AttributeValue], timestamp: Foundation.Date)
  func end()
  func end(time: Foundation.Date)
}
extension NbmapCoreNavigation.Span {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: any NbmapCoreNavigation.Span, rhs: any NbmapCoreNavigation.Span) -> Swift.Bool
}
extension NbmapCoreNavigation.Span {
  public func setAttribute(key: Swift.String, value: Swift.String)
  public func setAttribute(key: Swift.String, value: Swift.Int)
  public func setAttribute(key: Swift.String, value: Swift.Double)
  public func setAttribute(key: Swift.String, value: Swift.Bool)
  public func setAttribute(key: NbmapCoreNavigation.SemanticAttributes, value: Swift.String)
  public func setAttribute(key: NbmapCoreNavigation.SemanticAttributes, value: Swift.Int)
  public func setAttribute(key: NbmapCoreNavigation.SemanticAttributes, value: Swift.Double)
  public func setAttribute(key: NbmapCoreNavigation.SemanticAttributes, value: Swift.Bool)
}
extension NbmapCoreNavigation.Span {
  public func putHttpHostAttribute(string hostName: Swift.String, int port: Swift.Int)
  public func putHttpStatusCode(statusCode: Swift.Int, reasonPhrase: Swift.String)
}
public protocol LogRecordExporter {
  func export(logRecords: [NbmapCoreNavigation.ReadableLogRecord]) -> NbmapCoreNavigation.ExportResult
  func shutdown()
  func forceFlush() -> NbmapCoreNavigation.ExportResult
}
public struct EnvVarResource {
  public static let resource: NbmapCoreNavigation.Resource
  public static func get(environment: [Swift.String : Swift.String] = ProcessInfo.processInfo.environment) -> NbmapCoreNavigation.Resource
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class ConfigurationApiQueryInterval : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public static var supportsSecureCoding: Swift.Bool
  convenience public init(json: NbmapCoreNavigation.JSONDictionary)
  @objc convenience override dynamic public init()
  @objc required public init?(coder: Foundation.NSCoder)
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc final public let queryInterval: Swift.Int
  @objc final public let unit: Swift.String
  @objc deinit
}
public class MonotonicClock : NbmapCoreNavigation.Clock {
  public init(clock: any NbmapCoreNavigation.Clock)
  public var now: Foundation.Date {
    get
  }
  @objc deinit
}
public struct Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest {
  public var resourceSpans: [NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ResourceSpans]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse {
  public var partialSuccess: NbmapCoreNavigation.Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess {
    get
    set
  }
  public var hasPartialSuccess: Swift.Bool {
    get
  }
  public mutating func clearPartialSuccess()
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess {
  public var rejectedSpans: Swift.Int64
  public var errorMessage: Swift.String
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest, rhs: NbmapCoreNavigation.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse, rhs: NbmapCoreNavigation.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess, rhs: NbmapCoreNavigation.Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias LocationDistance = CoreLocation.CLLocationDistance
public typealias DistanceIndex = (distance: NbmapCoreNavigation.LocationDistance, index: Swift.Int)
extension Turf.LineString {
  public func closestCoordinate(to coordinate: NbmapCoreNavigation.LocationCoordinate2D, startingIndex: Swift.Int) -> NbmapCoreNavigation.DistanceIndex?
  public func indexedCoordinateFromStart(distance: CoreLocation.CLLocationDistance) -> Turf.LineString.IndexedCoordinate?
  public func distance() -> CoreLocation.CLLocationDistance?
}
extension Swift.String {
  public var nonEmptyString: Swift.String? {
    get
  }
}
public struct EventConfigration {
}
@objc(NBFeedbackType) public enum FeedbackType : Swift.Int, Swift.CustomStringConvertible {
  case general
  case accident
  case hazard
  case roadClosed
  case notAllowed
  case missingRoad
  case missingExit
  case routingError
  case confusingInstruction
  case reportTraffic
  case mapIssue
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(NBFeedbackSource) public enum FeedbackSource : Swift.Int, Swift.CustomStringConvertible {
  case user
  case reroute
  case unknown
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct Opentelemetry_Proto_Trace_V1_TracesData {
  public var resourceSpans: [NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ResourceSpans]
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Trace_V1_ResourceSpans {
  public var resource: NbmapCoreNavigation.Opentelemetry_Proto_Resource_V1_Resource {
    get
    set
  }
  public var hasResource: Swift.Bool {
    get
  }
  public mutating func clearResource()
  public var scopeSpans: [NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ScopeSpans]
  public var schemaURL: Swift.String
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Trace_V1_ScopeSpans {
  public var scope: NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_InstrumentationScope {
    get
    set
  }
  public var hasScope: Swift.Bool {
    get
  }
  public mutating func clearScope()
  public var spans: [NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span]
  public var schemaURL: Swift.String
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Trace_V1_Span {
  public var traceID: Foundation.Data
  public var spanID: Foundation.Data
  public var traceState: Swift.String
  public var parentSpanID: Foundation.Data
  public var name: Swift.String
  public var kind: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span.SpanKind
  public var startTimeUnixNano: Swift.UInt64
  public var endTimeUnixNano: Swift.UInt64
  public var attributes: [NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_KeyValue]
  public var droppedAttributesCount: Swift.UInt32
  public var events: [NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span.Event]
  public var droppedEventsCount: Swift.UInt32
  public var links: [NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span.Link]
  public var droppedLinksCount: Swift.UInt32
  public var status: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Status {
    get
    set
  }
  public var hasStatus: Swift.Bool {
    get
  }
  public mutating func clearStatus()
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public enum SpanKind : NbmapCoreNavigation.Enum {
    public typealias RawValue = Swift.Int
    case unspecified
    case `internal`
    case server
    case client
    case producer
    case consumer
    case UNRECOGNIZED(Swift.Int)
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public struct Event {
    public var timeUnixNano: Swift.UInt64
    public var name: Swift.String
    public var attributes: [NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_KeyValue]
    public var droppedAttributesCount: Swift.UInt32
    public var unknownFields: NbmapCoreNavigation.UnknownStorage
    public init()
  }
  public struct Link {
    public var traceID: Foundation.Data
    public var spanID: Foundation.Data
    public var traceState: Swift.String
    public var attributes: [NbmapCoreNavigation.Opentelemetry_Proto_Common_V1_KeyValue]
    public var droppedAttributesCount: Swift.UInt32
    public var unknownFields: NbmapCoreNavigation.UnknownStorage
    public init()
  }
  public init()
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span.SpanKind : Swift.CaseIterable {
  public static var allCases: [NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span.SpanKind]
  public typealias AllCases = [NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span.SpanKind]
}
public struct Opentelemetry_Proto_Trace_V1_Status {
  public var message: Swift.String
  public var code: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Status.StatusCode
  public var unknownFields: NbmapCoreNavigation.UnknownStorage
  public enum StatusCode : NbmapCoreNavigation.Enum {
    public typealias RawValue = Swift.Int
    case unset
    case ok
    case error
    case UNRECOGNIZED(Swift.Int)
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Status.StatusCode : Swift.CaseIterable {
  public static var allCases: [NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Status.StatusCode]
  public typealias AllCases = [NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Status.StatusCode]
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_TracesData : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ResourceSpans : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ScopeSpans : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span.SpanKind : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span.Event : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span.Link : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Status : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Status.StatusCode : @unchecked Swift.Sendable {
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_TracesData : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_TracesData, rhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_TracesData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ResourceSpans : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ResourceSpans, rhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ResourceSpans) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ScopeSpans : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ScopeSpans, rhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_ScopeSpans) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span, rhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span.SpanKind : NbmapCoreNavigation._ProtoNameProviding {
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span.Event : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span.Event, rhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span.Event) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span.Link : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span.Link, rhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Span.Link) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Status : NbmapCoreNavigation.Message, NbmapCoreNavigation._MessageImplementationBase, NbmapCoreNavigation._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  public func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  public static func == (lhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Status, rhs: NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Status) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NbmapCoreNavigation.Opentelemetry_Proto_Trace_V1_Status.StatusCode : NbmapCoreNavigation._ProtoNameProviding {
  public static let _protobuf_nameMap: NbmapCoreNavigation._NameMap
}
public enum AlternativeRouteError : Swift.Error {
  case failedToUpdateAlternativeRoutes(reason: Swift.String)
}
public struct NavigationHazmatTypes : Swift.OptionSet {
  public let rawValue: Swift.UInt
  public init(rawValue: Swift.UInt)
  public static let general: NbmapCoreNavigation.NavigationHazmatTypes
  public static let circumstantial: NbmapCoreNavigation.NavigationHazmatTypes
  public static let explosive: NbmapCoreNavigation.NavigationHazmatTypes
  public static let harmfulToWater: NbmapCoreNavigation.NavigationHazmatTypes
  public typealias ArrayLiteralElement = NbmapCoreNavigation.NavigationHazmatTypes
  public typealias Element = NbmapCoreNavigation.NavigationHazmatTypes
  public typealias RawValue = Swift.UInt
}
extension NbmapCoreNavigation.NavigationHazmatTypes : Swift.CustomStringConvertible {
  public init?(descriptions: [Swift.String])
  public var description: Swift.String {
    get
  }
}
@objc open class TravelledRawLocation : ObjectiveC.NSObject {
  final public let latitude: Swift.Double
  final public let longitude: Swift.Double
  final public let accuracy: Swift.Double
  final public let bearing: Swift.Double
  public init(latitude: Swift.Double, longitude: Swift.Double, accuracy: Swift.Double, bearing: Swift.Double)
  public func toJSONDictionary() -> NbmapCoreNavigation.JSONDictionary
  @objc deinit
}
public protocol EventBuilder : NbmapCoreNavigation.LogRecordBuilder {
}
public struct InstrumentationScopeInfo : Swift.Hashable, Swift.Codable {
  public var name: Swift.String {
    get
  }
  public var version: Swift.String? {
    get
  }
  public var schemaUrl: Swift.String? {
    get
  }
  public init()
  public init(name: Swift.String, version: Swift.String? = nil, schemaUrl: Swift.String? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: NbmapCoreNavigation.InstrumentationScopeInfo, b: NbmapCoreNavigation.InstrumentationScopeInfo) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension NbmapCoreNavigation.Google_Protobuf_Struct : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.String
  public typealias Value = NbmapCoreNavigation.Google_Protobuf_Value
  public init(dictionaryLiteral: (Swift.String, NbmapCoreNavigation.Google_Protobuf_Value)...)
}
extension NbmapCoreNavigation.Google_Protobuf_Struct {
  public init(fields: [Swift.String : NbmapCoreNavigation.Google_Protobuf_Value])
  public subscript(key: Swift.String) -> NbmapCoreNavigation.Google_Protobuf_Value? {
    get
    set(newValue)
  }
}
public struct SpanData : Swift.Equatable, Swift.Codable {
  public var traceId: NbmapCoreNavigation.TraceId {
    get
  }
  public var spanId: NbmapCoreNavigation.SpanId {
    get
  }
  public var traceFlags: NbmapCoreNavigation.TraceFlags {
    get
  }
  public var traceState: NbmapCoreNavigation.TraceState {
    get
  }
  public var parentSpanId: NbmapCoreNavigation.SpanId? {
    get
  }
  public var resource: NbmapCoreNavigation.Resource {
    get
  }
  public var instrumentationScope: NbmapCoreNavigation.InstrumentationScopeInfo {
    get
  }
  public var name: Swift.String {
    get
  }
  public var kind: NbmapCoreNavigation.SpanKind {
    get
  }
  public var startTime: Foundation.Date {
    get
  }
  public var attributes: [Swift.String : NbmapCoreNavigation.AttributeValue] {
    get
  }
  public var events: [NbmapCoreNavigation.SpanData.Event] {
    get
  }
  public var links: [NbmapCoreNavigation.SpanData.Link] {
    get
  }
  public var status: NbmapCoreNavigation.Status {
    get
  }
  public var endTime: Foundation.Date {
    get
  }
  public var hasRemoteParent: Swift.Bool {
    get
  }
  public var hasEnded: Swift.Bool {
    get
  }
  public var totalRecordedEvents: Swift.Int {
    get
  }
  public var totalRecordedLinks: Swift.Int {
    get
  }
  public var totalAttributeCount: Swift.Int {
    get
  }
  public static func == (lhs: NbmapCoreNavigation.SpanData, rhs: NbmapCoreNavigation.SpanData) -> Swift.Bool
  @discardableResult
  public mutating func settingName(_ name: Swift.String) -> NbmapCoreNavigation.SpanData
  @discardableResult
  public mutating func settingTraceId(_ traceId: NbmapCoreNavigation.TraceId) -> NbmapCoreNavigation.SpanData
  @discardableResult
  public mutating func settingSpanId(_ spanId: NbmapCoreNavigation.SpanId) -> NbmapCoreNavigation.SpanData
  @discardableResult
  public mutating func settingTraceFlags(_ traceFlags: NbmapCoreNavigation.TraceFlags) -> NbmapCoreNavigation.SpanData
  @discardableResult
  public mutating func settingTraceState(_ traceState: NbmapCoreNavigation.TraceState) -> NbmapCoreNavigation.SpanData
  @discardableResult
  public mutating func settingAttributes(_ attributes: [Swift.String : NbmapCoreNavigation.AttributeValue]) -> NbmapCoreNavigation.SpanData
  @discardableResult
  public mutating func settingStartTime(_ time: Foundation.Date) -> NbmapCoreNavigation.SpanData
  @discardableResult
  public mutating func settingEndTime(_ time: Foundation.Date) -> NbmapCoreNavigation.SpanData
  @discardableResult
  public mutating func settingKind(_ kind: NbmapCoreNavigation.SpanKind) -> NbmapCoreNavigation.SpanData
  @discardableResult
  public mutating func settingLinks(_ links: [NbmapCoreNavigation.SpanData.Link]) -> NbmapCoreNavigation.SpanData
  @discardableResult
  public mutating func settingParentSpanId(_ parentSpanId: NbmapCoreNavigation.SpanId) -> NbmapCoreNavigation.SpanData
  @discardableResult
  public mutating func settingResource(_ resource: NbmapCoreNavigation.Resource) -> NbmapCoreNavigation.SpanData
  @discardableResult
  public mutating func settingStatus(_ status: NbmapCoreNavigation.Status) -> NbmapCoreNavigation.SpanData
  @discardableResult
  public mutating func settingEvents(_ events: [NbmapCoreNavigation.SpanData.Event]) -> NbmapCoreNavigation.SpanData
  @discardableResult
  public mutating func settingHasRemoteParent(_ hasRemoteParent: Swift.Bool) -> NbmapCoreNavigation.SpanData
  @discardableResult
  public mutating func settingHasEnded(_ hasEnded: Swift.Bool) -> NbmapCoreNavigation.SpanData
  @discardableResult
  public mutating func settingTotalRecordedEvents(_ totalRecordedEvents: Swift.Int) -> NbmapCoreNavigation.SpanData
  @discardableResult
  public mutating func settingTotalRecordedLinks(_ totalRecordedLinks: Swift.Int) -> NbmapCoreNavigation.SpanData
  @discardableResult
  public mutating func settingTotalAttributeCount(_ totalAttributeCount: Swift.Int) -> NbmapCoreNavigation.SpanData
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension NbmapCoreNavigation.SpanData {
  public struct Event : Swift.Equatable, Swift.Codable {
    public var timestamp: Foundation.Date {
      get
    }
    public var name: Swift.String {
      get
    }
    public var attributes: [Swift.String : NbmapCoreNavigation.AttributeValue] {
      get
    }
    public init(name: Swift.String, timestamp: Foundation.Date, attributes: [Swift.String : NbmapCoreNavigation.AttributeValue]? = nil)
    public init(timestamp: Foundation.Date, event: NbmapCoreNavigation.SpanData.Event)
    public static func == (a: NbmapCoreNavigation.SpanData.Event, b: NbmapCoreNavigation.SpanData.Event) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension NbmapCoreNavigation.SpanData {
  public struct Link : Swift.Codable {
    public let context: NbmapCoreNavigation.SpanContext
    public let attributes: [Swift.String : NbmapCoreNavigation.AttributeValue]
    public init(context: NbmapCoreNavigation.SpanContext, attributes: [Swift.String : NbmapCoreNavigation.AttributeValue] = [String: AttributeValue]())
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public func == (lhs: NbmapCoreNavigation.SpanData.Link, rhs: NbmapCoreNavigation.SpanData.Link) -> Swift.Bool
public func == (lhs: [NbmapCoreNavigation.SpanData.Link], rhs: [NbmapCoreNavigation.SpanData.Link]) -> Swift.Bool
public class DefaultResources {
  public init()
  public func get() -> NbmapCoreNavigation.Resource
  @objc deinit
}
public protocol ContextPropagators {
  var textMapPropagator: any NbmapCoreNavigation.TextMapPropagator { get }
  var textMapBaggagePropagator: any NbmapCoreNavigation.TextMapBaggagePropagator { get }
}
public enum OpenTelemetryContextKeys : Swift.String {
  case span
  case baggage
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct OpenTelemetryContextProvider {
  public var activeSpan: (any NbmapCoreNavigation.Span)? {
    get
  }
  public var activeBaggage: (any NbmapCoreNavigation.Baggage)? {
    get
  }
  public func setActiveSpan(_ span: any NbmapCoreNavigation.Span)
  public func setActiveBaggage(_ baggage: any NbmapCoreNavigation.Baggage)
  public func removeContextForSpan(_ span: any NbmapCoreNavigation.Span)
  public func removeContextForBaggage(_ baggage: any NbmapCoreNavigation.Baggage)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class ConfigurationValue : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc convenience override dynamic public init()
  convenience public init(json: NbmapCoreNavigation.JSONDictionary)
  @objc required public init?(coder: Foundation.NSCoder)
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc final public let configurationApiQueryInterval: NbmapCoreNavigation.ConfigurationApiQueryInterval
  @objc final public let mapStyles: [NbmapCoreNavigation.ConfigurationMapStyle]
  @objc final public let defaultStyleId: Swift.Int
  @objc final public let baseUrl: Swift.String
  @objc deinit
}
public var RouteControllerMaximumDistanceBeforeRecalculating: Swift.Double
public var RouteControllerMaximumDistanceOfIntersectionArea: Swift.Double
public var RouteControllerMinimumDistanceBeforeRecalculating: Swift.Double
public var RouteControllerMinimumDistanceTravelAway: Swift.Double
public var RouteControllerArriveDistanceNotification: Swift.Double
public var RouteControllerMaximumAllowedDegreeOffsetForTurnCompletion: Swift.Double
public var RouteControllerMaximumAllowedDegreeOffsetForUTurn: Swift.Double
public var RouteControllerMediumAlertInterval: Swift.Double
public var RouteControllerHighAlertInterval: Swift.Double
public var RouteControllerManeuverZoneRadius: Swift.Double
public var RouteControllerDeadReckoningTimeInterval: Swift.Double
public var NavigationMetricsDebugLoggingEnabled: Swift.String
public let RouteControllerLinkedInstructionBufferMultiplier: Swift.Double
public var RouteSnappingMinimumSpeed: Swift.Double
public var RouteControllerMinimumDistanceForContinueInstruction: Swift.Double
public var RouteControllerMinimumBacktrackingDistanceForRerouting: Swift.Double
public var RouteControllerMinimumNumberLocationUpdatesBackwards: Swift.Int
public var RouteControllerNumberOfSecondsForRerouteFeedback: Swift.Double
public var RouteControllerProactiveReroutingInterval: Swift.Double
public var ReRouteControllerRequestResponseInterval: Swift.Double
public let OFF_ROUTE_PROBABILITY_THRESHOLD: Swift.Double
public var RouteControllerUserLocationSnappingDistance: Swift.Double
public var RouteSnappingMaxManipulatedCourseAngle: Swift.Double
public var RouteSnappingMinimumHorizontalAccuracy: Swift.Double
public var RouteControllerMinNumberOfInCorrectCourses: Swift.Int
public var RouteControllerIncorrectCourseMultiplier: Swift.Int
public var RouteControllerMinimumDistanceToTunnelEntrance: Swift.Double
public var RouteControllerMinimumSpeedAtTunnelEntranceRadius: Swift.Double
public var RouteControllerMaximumSpeedForUsingCurrentStep: Swift.Double
public var RouteControllerMinimumSnapCheckingCount: Swift.Int
public typealias RouteControllerNotificationUserInfoKey = NbmapCoreNavigation.NBRouteControllerNotificationUserInfoKey
extension NbmapCoreNavigation.NBNavigationService {
  public struct NotificationUserInfoKey : Swift.Hashable, Swift.Equatable, Swift.RawRepresentable {
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String
    public init(rawValue: Swift.String)
    public static let locationAuthorizationKey: NbmapCoreNavigation.NBNavigationService.NotificationUserInfoKey
    public static let simulationStateKey: NbmapCoreNavigation.NBNavigationService.NotificationUserInfoKey
    public static let simulatedSpeedMultiplierKey: NbmapCoreNavigation.NBNavigationService.NotificationUserInfoKey
  }
}
extension Foundation.NSNotification.Name {
  public static let routeControllerDidFailToReroute: Foundation.NSNotification.Name
  public static let routeControllerWillReroute: Foundation.NSNotification.Name
  public static let routeControllerDidReroute: Foundation.NSNotification.Name
  public static let routeControllerProgressDidChange: Foundation.NSNotification.Name
  public static let routeControllerDidPassSpokenInstructionPoint: Foundation.NSNotification.Name
  public static let routeControllerDidPassVisualInstructionPoint: Foundation.NSNotification.Name
}
extension Foundation.NSNotification.Name {
  public static let locationAuthorizationDidChange: Foundation.Notification.Name
  public static let navigationServiceSimulationDidChange: Foundation.Notification.Name
  public static let currentRoadNameDidChange: Foundation.Notification.Name
  public static let currentSpeedDidChange: Foundation.Notification.Name
}
extension Foundation.NSNotification.Name {
  public static let navigationCameraStateDidChange: Foundation.Notification.Name
  public static let navigationCameraViewportDidChange: Foundation.Notification.Name
}
public let NBEventTypeNavigationReroute: Swift.String
public let NBEventTypeNavigationDepart: Swift.String
public let NBEventTypeNavigationCancel: Swift.String
public let NBEventTypeNavigationArrive: Swift.String
public let NBEventTypeNavigationCarPlayConnect: Swift.String
public let NBEventTypeNavigationCarPlayDisconnect: Swift.String
public let NBEventTypeNavigationFeedback: Swift.String
public let NBEventTypeNavigationRouteRetrieval: Swift.String
public let NBEventTypeNavigationBillingStart: Swift.String
public let NBEventTypeNavigationBillingEnd: Swift.String
public let NBEventTypeNavigationTrip: Swift.String
public let NBDataTrackingKeyEvent: Swift.String
public let NBDataTrackingKeyCreated: Swift.String
public let BaseUrlKey: Swift.String
public protocol ThresholdCalculator {
  func createOffRouteRadius(location: CoreLocation.CLLocation, progress: NbmapCoreNavigation.RouteProgress, config: NbmapCoreNavigation.NavigationEngineConfig, trueDistanceToStep: Swift.Double, angularDiff: CoreLocation.CLLocationDegrees) -> CoreLocation.CLLocationDistance
}
@_hasMissingDesignatedInitializers public class OffRouteThresholdCalculator : NbmapCoreNavigation.ThresholdCalculator {
  public func createOffRouteRadius(location: CoreLocation.CLLocation, progress: NbmapCoreNavigation.RouteProgress, config: NbmapCoreNavigation.NavigationEngineConfig, trueDistanceToStep: Swift.Double, angularDiff: CoreLocation.CLLocationDegrees) -> CoreLocation.CLLocationDistance
  public func isNearingIntersection(location: CoreLocation.CLLocation, progress: NbmapCoreNavigation.RouteProgress, config: NbmapCoreNavigation.NavigationEngineConfig) -> Swift.Bool
  public func calculateDynamicThreshold(location: CoreLocation.CLLocation, config: NbmapCoreNavigation.NavigationEngineConfig, trueDistanceToStep: Swift.Double, stepIndex: Swift.Int, angularDiff: CoreLocation.CLLocationDegrees) -> CoreLocation.CLLocationDistance
  @objc deinit
}
public enum SimulationIntent : Swift.Int {
  case manual
  case poorGPS
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SimulationMode : Swift.Int {
  case onPoorGPS
  case always
  case never
  case inTunnels
  case onPoorGPSOrInTunnels
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SimulationState : Swift.Int {
  case willBeginSimulation
  case didBeginSimulation
  case inSimulation
  case willEndSimulation
  case didEndSimulation
  case notInSimulation
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct MultiSpanProcessor : NbmapCoreNavigation.SpanProcessor {
  public init(spanProcessors: [any NbmapCoreNavigation.SpanProcessor])
  public var isStartRequired: Swift.Bool {
    get
  }
  public var isEndRequired: Swift.Bool {
    get
  }
  public func onStart(parentContext: NbmapCoreNavigation.SpanContext?, span: any NbmapCoreNavigation.ReadableSpan)
  public func onEnd(span: any NbmapCoreNavigation.ReadableSpan)
  public func shutdown()
  public func forceFlush(timeout: Foundation.TimeInterval? = nil)
}
public protocol Baggage : AnyObject {
  static func baggageBuilder() -> any NbmapCoreNavigation.BaggageBuilder
  func getEntries() -> [NbmapCoreNavigation.Entry]
  func getEntryValue(key: NbmapCoreNavigation.EntryKey) -> NbmapCoreNavigation.EntryValue?
}
public func == (lhs: any NbmapCoreNavigation.Baggage, rhs: any NbmapCoreNavigation.Baggage) -> Swift.Bool
public protocol SpeedCalibrator {
  func updateSpeed(with location: CoreLocation.CLLocation, routeProgress: NbmapCoreNavigation.RouteProgress, userStatus: NbmapCoreNavigation.OffRouteStatus)
  func reset(routeProgress: NbmapCoreNavigation.RouteProgress)
  func postSpeed(speed: CoreLocation.CLLocationSpeed?)
  var delegate: (any NbmapCoreNavigation.SpeedCalibratorDelegate)? { get set }
  func cancel()
}
public protocol SpeedCalibratorDelegate : AnyObject {
  func isStationaryDetectionEnable() -> Swift.Bool
  func isOnMoving() -> Swift.Bool
  func onSpeedChanged(speed: CoreLocation.CLLocationSpeed)
}
public class DefaultBaggageBuilder : NbmapCoreNavigation.BaggageBuilder {
  public init()
  @discardableResult
  public func setParent(_ parent: (any NbmapCoreNavigation.Baggage)?) -> Self
  @discardableResult
  public func setNoParent() -> Self
  @discardableResult
  public func put(key: NbmapCoreNavigation.EntryKey, value: NbmapCoreNavigation.EntryValue, metadata: NbmapCoreNavigation.EntryMetadata?) -> Self
  @discardableResult
  public func put(key: Swift.String, value: Swift.String, metadata: Swift.String? = nil) -> Self
  @discardableResult
  public func remove(key: NbmapCoreNavigation.EntryKey) -> Self
  public func build() -> any NbmapCoreNavigation.Baggage
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TelemetryResourceProvider : NbmapCoreNavigation.ResourceProvider {
  public init(source: any NbmapCoreNavigation.ITelemetryDataSource)
  override public var attributes: [Swift.String : NbmapCoreNavigation.AttributeValue] {
    get
  }
  @objc deinit
}
@objc(NBVisualInstructionComponent) open class VisualInstructionComponent : ObjectiveC.NSObject, NbmapCoreNavigation.ComponentRepresentable {
  @objc public var imageURL: Foundation.URL?
  @objc public var label: Swift.String?
  @objc public var abbreviation: Swift.String?
  @objc public var abbreviationPriority: Swift.Int
  @objc public var text: Swift.String?
  @objc public var type: NbmapCoreNavigation.VisualInstructionComponentType
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc(initWithJSON:) convenience public init(json: [Swift.String : Any])
  @objc public init(type: NbmapCoreNavigation.VisualInstructionComponentType, text: Swift.String?, imageURL: Foundation.URL?, label: Swift.String?, abbreviation: Swift.String?, abbreviationPriority: Swift.Int)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
public enum Samplers {
  public static var alwaysOn: any NbmapCoreNavigation.Sampler
  public static var alwaysOff: any NbmapCoreNavigation.Sampler
  public static func traceIdRatio(ratio: Swift.Double) -> any NbmapCoreNavigation.Sampler
  public static func parentBased(root: any NbmapCoreNavigation.Sampler, remoteParentSampled: (any NbmapCoreNavigation.Sampler)? = nil, remoteParentNotSampled: (any NbmapCoreNavigation.Sampler)? = nil, localParentSampled: (any NbmapCoreNavigation.Sampler)? = nil, localParentNotSampled: (any NbmapCoreNavigation.Sampler)? = nil) -> any NbmapCoreNavigation.Sampler
}
public struct StringUtils {
  public static func isPrintableString(_ string: Swift.String) -> Swift.Bool
  public static func isValidMetricName(_ metricName: Swift.String) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class DeadReckoning {
  @objc deinit
}
public protocol MeasureMetric {
  associatedtype T
  func bind(labelset: NbmapCoreNavigation.LabelSet) -> NbmapCoreNavigation.BoundMeasureMetric<Self.T>
  func bind(labels: [Swift.String : Swift.String]) -> NbmapCoreNavigation.BoundMeasureMetric<Self.T>
}
extension NbmapCoreNavigation.MeasureMetric {
  public func record(value: Self.T, labelset: NbmapCoreNavigation.LabelSet)
  public func record(value: Self.T, labels: [Swift.String : Swift.String])
}
public struct AnyMeasureMetric<T> : NbmapCoreNavigation.MeasureMetric {
  public init<U>(_ measurable: U) where T == U.T, U : NbmapCoreNavigation.MeasureMetric
  public func bind(labelset: NbmapCoreNavigation.LabelSet) -> NbmapCoreNavigation.BoundMeasureMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> NbmapCoreNavigation.BoundMeasureMetric<T>
}
public struct NoopMeasureMetric<T> : NbmapCoreNavigation.MeasureMetric {
  public init()
  public func bind(labelset: NbmapCoreNavigation.LabelSet) -> NbmapCoreNavigation.BoundMeasureMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> NbmapCoreNavigation.BoundMeasureMetric<T>
}
public protocol AnyMessageExtension {
  var fieldNumber: Swift.Int { get }
  var fieldName: Swift.String { get }
  var messageType: any NbmapCoreNavigation.Message.Type { get }
  func _protobuf_newField<D>(decoder: inout D) throws -> (any NbmapCoreNavigation.AnyExtensionField)? where D : NbmapCoreNavigation.NDecoder
}
public class MessageExtension<FieldType, MessageType> : NbmapCoreNavigation.AnyMessageExtension where FieldType : NbmapCoreNavigation.ExtensionField, MessageType : NbmapCoreNavigation.Message {
  final public let fieldNumber: Swift.Int
  final public let fieldName: Swift.String
  final public let messageType: any NbmapCoreNavigation.Message.Type
  public init(_protobuf_fieldNumber: Swift.Int, fieldName: Swift.String)
  public func _protobuf_newField<D>(decoder: inout D) throws -> (any NbmapCoreNavigation.AnyExtensionField)? where D : NbmapCoreNavigation.NDecoder
  @objc deinit
}
public protocol RerouteDelegate : ObjectiveC.NSObjectProtocol {
  func willRerouteFrom(location: CoreLocation.CLLocation)
  func failToReRouteWith(error: any Swift.Error)
  func didToReRouteWith(location: CoreLocation.CLLocation, routes: [NbmapCoreNavigation.Route])
}
public struct TraceState : Swift.Equatable, Swift.Codable {
  public var entries: [NbmapCoreNavigation.TraceState.Entry] {
    get
  }
  public init()
  public init?(entries: [NbmapCoreNavigation.TraceState.Entry])
  public func get(key: Swift.String) -> Swift.String?
  public func setting(key: Swift.String, value: Swift.String) -> NbmapCoreNavigation.TraceState
  public func removing(key: Swift.String) -> NbmapCoreNavigation.TraceState
  public struct Entry : Swift.Equatable, Swift.Codable {
    public var key: Swift.String {
      get
    }
    public var value: Swift.String {
      get
    }
    public init?(key: Swift.String, value: Swift.String)
    public static func == (a: NbmapCoreNavigation.TraceState.Entry, b: NbmapCoreNavigation.TraceState.Entry) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public static func == (a: NbmapCoreNavigation.TraceState, b: NbmapCoreNavigation.TraceState) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(NBSpokenInstruction) open class SpokenInstruction : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc final public let distanceAlongStep: CoreLocation.CLLocationDistance
  @objc final public let text: Swift.String
  @objc final public let ssmlText: Swift.String?
  @objc final public let unit: Foundation.UnitLength?
  @objc(initWithJSON:) convenience public init(json: [Swift.String : Any])
  @objc public init(distanceAlongStep: CoreLocation.CLLocationDistance, text: Swift.String, ssmlText: Swift.String?, unit: Foundation.UnitLength?)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class LabelSet : Swift.Hashable {
  public var labels: [Swift.String : Swift.String] {
    get
  }
  public static var empty: NbmapCoreNavigation.LabelSet
  required public init(labels: [Swift.String : Swift.String])
  public static func == (lhs: NbmapCoreNavigation.LabelSet, rhs: NbmapCoreNavigation.LabelSet) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  open var hashValue: Swift.Int {
    get
  }
}
extension Foundation.NSNotification.Name {
  public static let navigationSettingsDidChange: Foundation.NSNotification.Name
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(NBNavigationSettings) public class NavigationSettings : ObjectiveC.NSObject {
  @objc dynamic public var voiceVolume: Swift.Float
  @objc dynamic public var voiceMuted: Swift.Bool
  @objc dynamic public var distanceUnit: Foundation.LengthFormatter.Unit
  public var usesMetric: Swift.Bool {
    get
  }
  public static let shared: NbmapCoreNavigation.NavigationSettings
  @objc deinit
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
public protocol Message : Swift.CustomDebugStringConvertible {
  init()
  static var protoMessageName: Swift.String { get }
  var isInitialized: Swift.Bool { get }
  var unknownFields: NbmapCoreNavigation.UnknownStorage { get set }
  mutating func decodeMessage<D>(decoder: inout D) throws where D : NbmapCoreNavigation.NDecoder
  func traverse<V>(visitor: inout V) throws where V : NbmapCoreNavigation.Visitor
  func hash(into hasher: inout Swift.Hasher)
  func isEqualTo(message: any NbmapCoreNavigation.Message) -> Swift.Bool
}
extension NbmapCoreNavigation.Message {
  public var isInitialized: Swift.Bool {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var debugDescription: Swift.String {
    get
  }
  public static func with(_ populator: (inout Self) throws -> ()) rethrows -> Self
}
public protocol _MessageImplementationBase : NbmapCoreNavigation.Message, Swift.Hashable {
  func _protobuf_generated_isEqualTo(other: Self) -> Swift.Bool
}
extension NbmapCoreNavigation._MessageImplementationBase {
  public func isEqualTo(message: any NbmapCoreNavigation.Message) -> Swift.Bool
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
  public func _protobuf_generated_isEqualTo(other: Self) -> Swift.Bool
}
open class SnapDistanceTracker {
  public static let debugOn: Swift.Bool
  public init()
  public func verify(originalTrueDistanceFromStep: Swift.Double, rawLocation: CoreLocation.CLLocation) -> Swift.Bool
  public static func roundUpTo2(value: Swift.Double) -> Swift.Double
  public static func calcDistanceOffsetTolerance(accuracy: Swift.Double, speed: Swift.Double) -> Swift.Double
  public static func getSpeedWeight(speed: Swift.Double) -> Swift.Double
  @objc deinit
}
public protocol NavigationServiceDelegate : AnyObject, NbmapCoreNavigation.UnimplementedLogging {
  func navigationService(_ service: any NbmapCoreNavigation.NavigationService, shouldRerouteFrom location: CoreLocation.CLLocation) -> Swift.Bool
  func navigationService(_ service: any NbmapCoreNavigation.NavigationService, willRerouteFrom location: CoreLocation.CLLocation)
  func navigationService(_ service: any NbmapCoreNavigation.NavigationService, willTakeAlternativeRoute route: NbmapCoreNavigation.Route, at location: CoreLocation.CLLocation?)
  func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didTakeAlternativeRouteAt location: CoreLocation.CLLocation?)
  func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didFailToTakeAlternativeRouteAt location: CoreLocation.CLLocation?)
  func navigationService(_ service: any NbmapCoreNavigation.NavigationService, shouldDiscard location: CoreLocation.CLLocation) -> Swift.Bool
  func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didRerouteAlong route: NbmapCoreNavigation.Route, at location: CoreLocation.CLLocation?, proactive: Swift.Bool)
  func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didFailToRerouteWith error: any Swift.Error)
  func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didRefresh routeProgress: NbmapCoreNavigation.RouteProgress)
  func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didUpdate progress: NbmapCoreNavigation.RouteProgress, with location: CoreLocation.CLLocation, rawLocation: CoreLocation.CLLocation)
  func navigationService(_ service: any NbmapCoreNavigation.NavigationService, shouldPreventReroutesWhenArrivingAt waypoint: NbmapCoreNavigation.Waypoint) -> Swift.Bool
  func navigationService(_ service: any NbmapCoreNavigation.NavigationService, willArriveAt waypoint: NbmapCoreNavigation.Waypoint, after remainingTimeInterval: Foundation.TimeInterval, distance: CoreLocation.CLLocationDistance)
  func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didArriveAt waypoint: NbmapCoreNavigation.Waypoint)
  func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didPassVisualInstructionPoint instruction: NbmapCoreNavigation.VisualInstructionBanner, routeProgress: NbmapCoreNavigation.RouteProgress)
  func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didPassSpokenInstructionPoint instruction: NbmapCoreNavigation.SpokenInstruction, routeProgress: NbmapCoreNavigation.RouteProgress)
  func navigationServiceDidChangeAuthorization(_ service: any NbmapCoreNavigation.NavigationService, didChangeAuthorizationFor locationManager: CoreLocation.CLLocationManager)
  func navigationServiceShouldDisableBatteryMonitoring(_ service: any NbmapCoreNavigation.NavigationService) -> Swift.Bool
  func navigationService(_ service: any NbmapCoreNavigation.NavigationService, willBeginSimulating progress: NbmapCoreNavigation.RouteProgress, becauseOf reason: NbmapCoreNavigation.SimulationIntent)
  func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didBeginSimulating progress: NbmapCoreNavigation.RouteProgress, becauseOf reason: NbmapCoreNavigation.SimulationIntent)
  func navigationService(_ service: any NbmapCoreNavigation.NavigationService, willEndSimulating progress: NbmapCoreNavigation.RouteProgress, becauseOf reason: NbmapCoreNavigation.SimulationIntent)
  func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didEndSimulating progress: NbmapCoreNavigation.RouteProgress, becauseOf reason: NbmapCoreNavigation.SimulationIntent)
}
extension NbmapCoreNavigation.NavigationServiceDelegate {
  public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, shouldRerouteFrom location: CoreLocation.CLLocation) -> Swift.Bool
  public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, willRerouteFrom location: CoreLocation.CLLocation)
  public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, shouldDiscard location: CoreLocation.CLLocation) -> Swift.Bool
  public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didRerouteAlong route: NbmapCoreNavigation.Route, at location: CoreLocation.CLLocation?, proactive: Swift.Bool)
  public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, willTakeAlternativeRoute route: NbmapCoreNavigation.Route, at location: CoreLocation.CLLocation?)
  public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didTakeAlternativeRouteAt location: CoreLocation.CLLocation?)
  public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didFailToTakeAlternativeRouteAt location: CoreLocation.CLLocation?)
  public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didFailToRerouteWith error: any Swift.Error)
  public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didRefresh routeProgress: NbmapCoreNavigation.RouteProgress)
  public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didUpdate progress: NbmapCoreNavigation.RouteProgress, with location: CoreLocation.CLLocation, rawLocation: CoreLocation.CLLocation)
  public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didPassVisualInstructionPoint instruction: NbmapCoreNavigation.VisualInstructionBanner, routeProgress: NbmapCoreNavigation.RouteProgress)
  public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didPassSpokenInstructionPoint instruction: NbmapCoreNavigation.SpokenInstruction, routeProgress: NbmapCoreNavigation.RouteProgress)
  public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, willArriveAt waypoint: NbmapCoreNavigation.Waypoint, after remainingTimeInterval: Foundation.TimeInterval, distance: CoreLocation.CLLocationDistance)
  public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didArriveAt waypoint: NbmapCoreNavigation.Waypoint)
  public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, shouldPreventReroutesWhenArrivingAt waypoint: NbmapCoreNavigation.Waypoint) -> Swift.Bool
  public func navigationServiceDidChangeAuthorization(_ service: any NbmapCoreNavigation.NavigationService, didChangeAuthorizationFor locationManager: CoreLocation.CLLocationManager)
  public func navigationServiceShouldDisableBatteryMonitoring(_ service: any NbmapCoreNavigation.NavigationService) -> Swift.Bool
  public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, willBeginSimulating progress: NbmapCoreNavigation.RouteProgress, becauseOf reason: NbmapCoreNavigation.SimulationIntent)
  public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didBeginSimulating progress: NbmapCoreNavigation.RouteProgress, becauseOf reason: NbmapCoreNavigation.SimulationIntent)
  public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, willEndSimulating progress: NbmapCoreNavigation.RouteProgress, becauseOf reason: NbmapCoreNavigation.SimulationIntent)
  public func navigationService(_ service: any NbmapCoreNavigation.NavigationService, didEndSimulating progress: NbmapCoreNavigation.RouteProgress, becauseOf reason: NbmapCoreNavigation.SimulationIntent)
}
extension Foundation.Locale {
  public static let DEFAULT_LANGUAGE_VALUE: Swift.String
  public static let LANGUAGE_ZH_VALUE: Swift.String
  public static let LANGUAGE_ZH_HANS_VALUE: Swift.String
  public static var preferredLocalLanguageCountryCode: Swift.String {
    get
  }
  public static var nationalizedCurrent: Foundation.Locale
  public static var usesMetric: Swift.Bool {
    get
  }
  public var usesMetric: Swift.Bool {
    get
  }
}
public protocol HistogramMetric {
  associatedtype T
  func bind(labelset: NbmapCoreNavigation.LabelSet) -> NbmapCoreNavigation.BoundHistogramMetric<Self.T>
  func bind(labels: [Swift.String : Swift.String]) -> NbmapCoreNavigation.BoundHistogramMetric<Self.T>
}
extension NbmapCoreNavigation.HistogramMetric {
  public func record(value: Self.T, labelset: NbmapCoreNavigation.LabelSet)
  public func record(value: Self.T, labels: [Swift.String : Swift.String])
}
public struct AnyHistogramMetric<T> : NbmapCoreNavigation.HistogramMetric {
  public init<U>(_ histogram: U) where T == U.T, U : NbmapCoreNavigation.HistogramMetric
  public func bind(labelset: NbmapCoreNavigation.LabelSet) -> NbmapCoreNavigation.BoundHistogramMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> NbmapCoreNavigation.BoundHistogramMetric<T>
}
public struct NoopHistogramMetric<T> : NbmapCoreNavigation.HistogramMetric {
  public init()
  public func bind(labelset: NbmapCoreNavigation.LabelSet) -> NbmapCoreNavigation.BoundHistogramMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> NbmapCoreNavigation.BoundHistogramMetric<T>
}
public class TracerProviderSdk : NbmapCoreNavigation.TracerProvider {
  public init(clock: any NbmapCoreNavigation.Clock = MillisClock(), idGenerator: any NbmapCoreNavigation.IdGenerator = RandomIdGenerator(), resource: NbmapCoreNavigation.Resource = EnvVarResource.get(), spanLimits: NbmapCoreNavigation.SpanLimits = SpanLimits(), sampler: any NbmapCoreNavigation.Sampler = Samplers.parentBased(root: Samplers.alwaysOn), spanProcessors: [any NbmapCoreNavigation.SpanProcessor] = [])
  @objc deinit
  public func get(instrumentationName: Swift.String, instrumentationVersion: Swift.String? = nil) -> any NbmapCoreNavigation.Tracer
  public func getActiveClock() -> any NbmapCoreNavigation.Clock
  public func updateActiveClock(_ newClock: any NbmapCoreNavigation.Clock)
  public func getActiveIdGenerator() -> any NbmapCoreNavigation.IdGenerator
  public func updateActiveIdGenerator(_ newGenerator: any NbmapCoreNavigation.IdGenerator)
  public func getActiveResource() -> NbmapCoreNavigation.Resource
  public func updateActiveResource(_ newResource: NbmapCoreNavigation.Resource)
  public func getActiveSpanLimits() -> NbmapCoreNavigation.SpanLimits
  public func updateActiveSpanLimits(_ spanLimits: NbmapCoreNavigation.SpanLimits)
  public func getActiveSampler() -> any NbmapCoreNavigation.Sampler
  public func updateActiveSampler(_ newSampler: any NbmapCoreNavigation.Sampler)
  public func getActiveSpanProcessors() -> [any NbmapCoreNavigation.SpanProcessor]
  public func addSpanProcessor(_ spanProcessor: any NbmapCoreNavigation.SpanProcessor)
  public func resetSpanProcessors()
  public func shutdown()
  public func forceFlush(timeout: Foundation.TimeInterval? = nil)
}
public protocol BaggageManager : AnyObject {
  func baggageBuilder() -> any NbmapCoreNavigation.BaggageBuilder
}
public protocol IApplicationDataSource {
  var name: Swift.String? { get }
  var identifier: Swift.String? { get }
  var version: Swift.String? { get }
  var build: Swift.String? { get }
}
@_hasMissingDesignatedInitializers public class RecordEventsReadableSpan : NbmapCoreNavigation.ReadableSpan {
  public var isRecording: Swift.Bool
  public var name: Swift.String {
    get
    set
  }
  public var spanLimits: NbmapCoreNavigation.SpanLimits {
    get
  }
  public var context: NbmapCoreNavigation.SpanContext {
    get
  }
  public var parentContext: NbmapCoreNavigation.SpanContext? {
    get
  }
  public var hasRemoteParent: Swift.Bool {
    get
  }
  public var spanProcessor: any NbmapCoreNavigation.SpanProcessor {
    get
  }
  public var links: [NbmapCoreNavigation.SpanData.Link] {
    get
  }
  public var totalRecordedLinks: Swift.Int {
    get
  }
  public var maxNumberOfAttributes: Swift.Int {
    get
  }
  public var maxNumberOfAttributesPerEvent: Swift.Int {
    get
  }
  public var kind: NbmapCoreNavigation.SpanKind {
    get
  }
  public var clock: any NbmapCoreNavigation.Clock {
    get
  }
  public var resource: NbmapCoreNavigation.Resource {
    get
  }
  public var instrumentationScopeInfo: NbmapCoreNavigation.InstrumentationScopeInfo {
    get
  }
  public var startTime: Foundation.Date {
    get
  }
  public var events: NbmapCoreNavigation.ArrayWithCapacity<NbmapCoreNavigation.SpanData.Event> {
    get
  }
  public var totalAttributeCount: Swift.Int {
    get
  }
  public var totalRecordedEvents: Swift.Int {
    get
  }
  public var status: NbmapCoreNavigation.Status {
    get
    set
  }
  public var latency: Foundation.TimeInterval {
    get
  }
  public var endTime: Foundation.Date? {
    get
  }
  public var hasEnded: Swift.Bool {
    get
  }
  public static func startSpan(context: NbmapCoreNavigation.SpanContext, name: Swift.String, instrumentationScopeInfo: NbmapCoreNavigation.InstrumentationScopeInfo, kind: NbmapCoreNavigation.SpanKind, parentContext: NbmapCoreNavigation.SpanContext?, hasRemoteParent: Swift.Bool, spanLimits: NbmapCoreNavigation.SpanLimits, spanProcessor: any NbmapCoreNavigation.SpanProcessor, clock: any NbmapCoreNavigation.Clock, resource: NbmapCoreNavigation.Resource, attributes: NbmapCoreNavigation.AttributesDictionary, links: [NbmapCoreNavigation.SpanData.Link], totalRecordedLinks: Swift.Int, startTime: Foundation.Date?) -> NbmapCoreNavigation.RecordEventsReadableSpan
  public func toSpanData() -> NbmapCoreNavigation.SpanData
  public func setAttribute(key: Swift.String, value: NbmapCoreNavigation.AttributeValue?)
  public func addEvent(name: Swift.String)
  public func addEvent(name: Swift.String, timestamp: Foundation.Date)
  public func addEvent(name: Swift.String, attributes: [Swift.String : NbmapCoreNavigation.AttributeValue])
  public func addEvent(name: Swift.String, attributes: [Swift.String : NbmapCoreNavigation.AttributeValue], timestamp: Foundation.Date)
  public func end()
  public func end(time: Foundation.Date)
  public var description: Swift.String {
    get
  }
  @objc deinit
}
public protocol TracerProvider {
  func get(instrumentationName: Swift.String, instrumentationVersion: Swift.String?) -> any NbmapCoreNavigation.Tracer
}
public protocol NDecoder {
  mutating func handleConflictingOneOf() throws
  mutating func nextFieldNumber() throws -> Swift.Int?
  mutating func decodeSingularFloatField(value: inout Swift.Float) throws
  mutating func decodeSingularFloatField(value: inout Swift.Float?) throws
  mutating func decodeRepeatedFloatField(value: inout [Swift.Float]) throws
  mutating func decodeSingularDoubleField(value: inout Swift.Double) throws
  mutating func decodeSingularDoubleField(value: inout Swift.Double?) throws
  mutating func decodeRepeatedDoubleField(value: inout [Swift.Double]) throws
  mutating func decodeSingularInt32Field(value: inout Swift.Int32) throws
  mutating func decodeSingularInt32Field(value: inout Swift.Int32?) throws
  mutating func decodeRepeatedInt32Field(value: inout [Swift.Int32]) throws
  mutating func decodeSingularInt64Field(value: inout Swift.Int64) throws
  mutating func decodeSingularInt64Field(value: inout Swift.Int64?) throws
  mutating func decodeRepeatedInt64Field(value: inout [Swift.Int64]) throws
  mutating func decodeSingularUInt32Field(value: inout Swift.UInt32) throws
  mutating func decodeSingularUInt32Field(value: inout Swift.UInt32?) throws
  mutating func decodeRepeatedUInt32Field(value: inout [Swift.UInt32]) throws
  mutating func decodeSingularUInt64Field(value: inout Swift.UInt64) throws
  mutating func decodeSingularUInt64Field(value: inout Swift.UInt64?) throws
  mutating func decodeRepeatedUInt64Field(value: inout [Swift.UInt64]) throws
  mutating func decodeSingularSInt32Field(value: inout Swift.Int32) throws
  mutating func decodeSingularSInt32Field(value: inout Swift.Int32?) throws
  mutating func decodeRepeatedSInt32Field(value: inout [Swift.Int32]) throws
  mutating func decodeSingularSInt64Field(value: inout Swift.Int64) throws
  mutating func decodeSingularSInt64Field(value: inout Swift.Int64?) throws
  mutating func decodeRepeatedSInt64Field(value: inout [Swift.Int64]) throws
  mutating func decodeSingularFixed32Field(value: inout Swift.UInt32) throws
  mutating func decodeSingularFixed32Field(value: inout Swift.UInt32?) throws
  mutating func decodeRepeatedFixed32Field(value: inout [Swift.UInt32]) throws
  mutating func decodeSingularFixed64Field(value: inout Swift.UInt64) throws
  mutating func decodeSingularFixed64Field(value: inout Swift.UInt64?) throws
  mutating func decodeRepeatedFixed64Field(value: inout [Swift.UInt64]) throws
  mutating func decodeSingularSFixed32Field(value: inout Swift.Int32) throws
  mutating func decodeSingularSFixed32Field(value: inout Swift.Int32?) throws
  mutating func decodeRepeatedSFixed32Field(value: inout [Swift.Int32]) throws
  mutating func decodeSingularSFixed64Field(value: inout Swift.Int64) throws
  mutating func decodeSingularSFixed64Field(value: inout Swift.Int64?) throws
  mutating func decodeRepeatedSFixed64Field(value: inout [Swift.Int64]) throws
  mutating func decodeSingularBoolField(value: inout Swift.Bool) throws
  mutating func decodeSingularBoolField(value: inout Swift.Bool?) throws
  mutating func decodeRepeatedBoolField(value: inout [Swift.Bool]) throws
  mutating func decodeSingularStringField(value: inout Swift.String) throws
  mutating func decodeSingularStringField(value: inout Swift.String?) throws
  mutating func decodeRepeatedStringField(value: inout [Swift.String]) throws
  mutating func decodeSingularBytesField(value: inout Foundation.Data) throws
  mutating func decodeSingularBytesField(value: inout Foundation.Data?) throws
  mutating func decodeRepeatedBytesField(value: inout [Foundation.Data]) throws
  mutating func decodeSingularEnumField<E>(value: inout E) throws where E : NbmapCoreNavigation.Enum, E.RawValue == Swift.Int
  mutating func decodeSingularEnumField<E>(value: inout E?) throws where E : NbmapCoreNavigation.Enum, E.RawValue == Swift.Int
  mutating func decodeRepeatedEnumField<E>(value: inout [E]) throws where E : NbmapCoreNavigation.Enum, E.RawValue == Swift.Int
  mutating func decodeSingularMessageField<M>(value: inout M?) throws where M : NbmapCoreNavigation.Message
  mutating func decodeRepeatedMessageField<M>(value: inout [M]) throws where M : NbmapCoreNavigation.Message
  mutating func decodeSingularGroupField<G>(value: inout G?) throws where G : NbmapCoreNavigation.Message
  mutating func decodeRepeatedGroupField<G>(value: inout [G]) throws where G : NbmapCoreNavigation.Message
  mutating func decodeMapField<KeyType, ValueType>(fieldType: NbmapCoreNavigation._ProtobufMap<KeyType, ValueType>.Type, value: inout NbmapCoreNavigation._ProtobufMap<KeyType, ValueType>.BaseType) throws where KeyType : NbmapCoreNavigation.MapKeyType, ValueType : NbmapCoreNavigation.MapValueType
  mutating func decodeMapField<KeyType, ValueType>(fieldType: NbmapCoreNavigation._ProtobufEnumMap<KeyType, ValueType>.Type, value: inout NbmapCoreNavigation._ProtobufEnumMap<KeyType, ValueType>.BaseType) throws where KeyType : NbmapCoreNavigation.MapKeyType, ValueType : NbmapCoreNavigation.Enum, ValueType.RawValue == Swift.Int
  mutating func decodeMapField<KeyType, ValueType>(fieldType: NbmapCoreNavigation._ProtobufMessageMap<KeyType, ValueType>.Type, value: inout NbmapCoreNavigation._ProtobufMessageMap<KeyType, ValueType>.BaseType) throws where KeyType : NbmapCoreNavigation.MapKeyType, ValueType : NbmapCoreNavigation.Message, ValueType : Swift.Hashable
  mutating func decodeExtensionField(values: inout NbmapCoreNavigation.ExtensionFieldValueSet, messageType: any NbmapCoreNavigation.Message.Type, fieldNumber: Swift.Int) throws
  mutating func decodeExtensionFieldsAsMessageSet(values: inout NbmapCoreNavigation.ExtensionFieldValueSet, messageType: any NbmapCoreNavigation.Message.Type) throws
}
extension NbmapCoreNavigation.NDecoder {
  public mutating func decodeExtensionFieldsAsMessageSet(values: inout NbmapCoreNavigation.ExtensionFieldValueSet, messageType: any NbmapCoreNavigation.Message.Type) throws
}
@_hasMissingDesignatedInitializers public class DefaultMeterProvider : NbmapCoreNavigation.MeterProvider {
  public static var instance: any NbmapCoreNavigation.MeterProvider
  public static func setDefault(meterFactory: any NbmapCoreNavigation.MeterProvider)
  public func get(instrumentationName: Swift.String, instrumentationVersion: Swift.String? = nil) -> any NbmapCoreNavigation.Meter
  @objc deinit
}
public protocol SpanExporter : AnyObject {
  @discardableResult
  func export(spans: [NbmapCoreNavigation.SpanData]) -> NbmapCoreNavigation.SpanExporterResultCode
  func flush() -> NbmapCoreNavigation.SpanExporterResultCode
  func shutdown()
}
public enum SpanExporterResultCode {
  case success
  case failure
  public static func == (a: NbmapCoreNavigation.SpanExporterResultCode, b: NbmapCoreNavigation.SpanExporterResultCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class NoopLogRecordProcessor : NbmapCoreNavigation.LogRecordProcessor {
  public static let noopLogRecordProcessor: NbmapCoreNavigation.NoopLogRecordProcessor
  public func onEmit(logRecord: NbmapCoreNavigation.ReadableLogRecord)
  public func forceFlush() -> NbmapCoreNavigation.ExportResult
  public func shutdown() -> NbmapCoreNavigation.ExportResult
  @objc deinit
}
public protocol RawCounterMetric {
  associatedtype T
  func record(sum: Self.T, startDate: Foundation.Date, endDate: Foundation.Date, labels: [Swift.String : Swift.String])
  func record(sum: Self.T, startDate: Foundation.Date, endDate: Foundation.Date, labelset: NbmapCoreNavigation.LabelSet)
  func bind(labelset: NbmapCoreNavigation.LabelSet) -> NbmapCoreNavigation.BoundRawCounterMetric<Self.T>
  func bind(labels: [Swift.String : Swift.String]) -> NbmapCoreNavigation.BoundRawCounterMetric<Self.T>
}
public struct AnyRawCounterMetric<T> : NbmapCoreNavigation.RawCounterMetric {
  public init<U>(_ countable: U) where T == U.T, U : NbmapCoreNavigation.RawCounterMetric
  public func bind(labelset: NbmapCoreNavigation.LabelSet) -> NbmapCoreNavigation.BoundRawCounterMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> NbmapCoreNavigation.BoundRawCounterMetric<T>
  public func record(sum: T, startDate: Foundation.Date, endDate: Foundation.Date, labelset: NbmapCoreNavigation.LabelSet)
  public func record(sum: T, startDate: Foundation.Date, endDate: Foundation.Date, labels: [Swift.String : Swift.String])
}
public struct NoopRawCounterMetric<T> : NbmapCoreNavigation.RawCounterMetric {
  public func record(sum: T, startDate: Foundation.Date, endDate: Foundation.Date, labels: [Swift.String : Swift.String])
  public func record(sum: T, startDate: Foundation.Date, endDate: Foundation.Date, labelset: NbmapCoreNavigation.LabelSet)
  public func bind(labelset: NbmapCoreNavigation.LabelSet) -> NbmapCoreNavigation.BoundRawCounterMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> NbmapCoreNavigation.BoundRawCounterMetric<T>
}
public struct SpanLimits : Swift.Equatable {
  public var attributeCountLimit: Swift.Int {
    get
  }
  public var eventCountLimit: Swift.Int {
    get
  }
  public var linkCountLimit: Swift.Int {
    get
  }
  public var attributePerEventCountLimit: Swift.Int {
    get
  }
  public var attributePerLinkCountLimit: Swift.Int {
    get
  }
  public init()
  @discardableResult
  public func settingAttributeCountLimit(_ number: Swift.UInt) -> NbmapCoreNavigation.SpanLimits
  @discardableResult
  public func settingEventCountLimit(_ number: Swift.UInt) -> NbmapCoreNavigation.SpanLimits
  @discardableResult
  public func settingLinkCountLimit(_ number: Swift.UInt) -> NbmapCoreNavigation.SpanLimits
  @discardableResult
  public func settingAttributePerEventCountLimit(_ number: Swift.UInt) -> NbmapCoreNavigation.SpanLimits
  @discardableResult
  public func settingAttributePerLinkCountLimit(_ number: Swift.UInt) -> NbmapCoreNavigation.SpanLimits
  public static func == (lhs: NbmapCoreNavigation.SpanLimits, rhs: NbmapCoreNavigation.SpanLimits) -> Swift.Bool
}
open class BoundHistogramMetric<T> {
  public init(explicitBoundaries: Swift.Array<T>? = nil)
  open func record(value: T)
  @objc deinit
}
@objc(NBWaypoint) open class Waypoint : ObjectiveC.NSObject, Foundation.NSCopying, Foundation.NSSecureCoding {
  @objc public class var supportsSecureCoding: Swift.Bool {
    @objc get
  }
  @objc public init(coordinate: CoreLocation.CLLocationCoordinate2D, coordinateAccuracy: CoreLocation.CLLocationAccuracy = -1, name: Swift.String? = nil)
  @objc public init(location: CoreLocation.CLLocation, heading: CoreLocation.CLHeading? = nil, name: Swift.String? = nil)
  @objc required public init?(coder decoder: Foundation.NSCoder)
  @objc open func encode(with coder: Foundation.NSCoder)
  @objc open func copy(with zone: ObjectiveC.NSZone?) -> Any
  @objc final public let coordinate: CoreLocation.CLLocationCoordinate2D
  @objc open var coordinateAccuracy: Swift.Double
  @objc open var heading: Swift.Double
  @objc open var headingAccuracy: Swift.Double
  @objc open var name: Swift.String?
  @objc open var allowsArrivingOnOppositeSide: Swift.Bool
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc open var latLngString: Swift.String {
    @objc get
  }
  @objc deinit
}
public protocol DoubleObserverMetric {
  func observe(value: Swift.Double, labelset: NbmapCoreNavigation.LabelSet)
  func observe(value: Swift.Double, labels: [Swift.String : Swift.String])
}
public struct NoopDoubleObserverMetric : NbmapCoreNavigation.DoubleObserverMetric {
  public init()
  public func observe(value: Swift.Double, labelset: NbmapCoreNavigation.LabelSet)
  public func observe(value: Swift.Double, labels: [Swift.String : Swift.String])
}
public enum BinaryDelimited {
  public enum Error : Swift.Error {
    case unknownStreamError
    case truncated
    public static func == (a: NbmapCoreNavigation.BinaryDelimited.Error, b: NbmapCoreNavigation.BinaryDelimited.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func serialize(message: any NbmapCoreNavigation.Message, to stream: Foundation.OutputStream, partial: Swift.Bool = false) throws
  public static func parse<M>(messageType: M.Type, from stream: Foundation.InputStream, extensions: (any NbmapCoreNavigation.ExtensionMap)? = nil, partial: Swift.Bool = false, options: NbmapCoreNavigation.BinaryDecodingOptions = BinaryDecodingOptions()) throws -> M where M : NbmapCoreNavigation.Message
  public static func merge<M>(into message: inout M, from stream: Foundation.InputStream, extensions: (any NbmapCoreNavigation.ExtensionMap)? = nil, partial: Swift.Bool = false, options: NbmapCoreNavigation.BinaryDecodingOptions = BinaryDecodingOptions()) throws where M : NbmapCoreNavigation.Message
}
public struct _ProtobufMap<KeyType, ValueType> where KeyType : NbmapCoreNavigation.MapKeyType, ValueType : NbmapCoreNavigation.FieldType {
  public typealias Key = KeyType.BaseType
  public typealias Value = ValueType.BaseType
  public typealias BaseType = Swift.Dictionary<NbmapCoreNavigation._ProtobufMap<KeyType, ValueType>.Key, NbmapCoreNavigation._ProtobufMap<KeyType, ValueType>.Value>
}
public struct _ProtobufMessageMap<KeyType, ValueType> where KeyType : NbmapCoreNavigation.MapKeyType, ValueType : NbmapCoreNavigation.Message, ValueType : Swift.Hashable {
  public typealias Key = KeyType.BaseType
  public typealias Value = ValueType
  public typealias BaseType = Swift.Dictionary<NbmapCoreNavigation._ProtobufMessageMap<KeyType, ValueType>.Key, NbmapCoreNavigation._ProtobufMessageMap<KeyType, ValueType>.Value>
}
public struct _ProtobufEnumMap<KeyType, ValueType> where KeyType : NbmapCoreNavigation.MapKeyType, ValueType : NbmapCoreNavigation.Enum {
  public typealias Key = KeyType.BaseType
  public typealias Value = ValueType
  public typealias BaseType = Swift.Dictionary<NbmapCoreNavigation._ProtobufEnumMap<KeyType, ValueType>.Key, NbmapCoreNavigation._ProtobufEnumMap<KeyType, ValueType>.Value>
}
public class MultiSpanExporter : NbmapCoreNavigation.SpanExporter {
  public init(spanExporters: [any NbmapCoreNavigation.SpanExporter])
  public func export(spans: [NbmapCoreNavigation.SpanData]) -> NbmapCoreNavigation.SpanExporterResultCode
  public func flush() -> NbmapCoreNavigation.SpanExporterResultCode
  public func shutdown()
  @objc deinit
}
open class BoundRawHistogramMetric<T> {
  public init()
  open func record(explicitBoundaries: Swift.Array<T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: T)
  @objc deinit
}
public class DeviceDataSource : NbmapCoreNavigation.IDeviceDataSource {
  public init()
  public var model: Swift.String? {
    get
  }
  public var identifier: Swift.String? {
    get
  }
  @objc deinit
}
public protocol BinaryFormattable {
  func fromByteArray(bytes: [Swift.UInt8]) -> NbmapCoreNavigation.SpanContext?
  func toByteArray(spanContext: NbmapCoreNavigation.SpanContext) -> [Swift.UInt8]
}
@_hasMissingDesignatedInitializers public class LoggerBuilderSdk : NbmapCoreNavigation.LoggerBuilder {
  public func setEventDomain(_ eventDomain: Swift.String) -> Self
  public func setSchemaUrl(_ schemaUrl: Swift.String) -> Self
  public func setInstrumentationVersion(_ instrumentationVersion: Swift.String) -> Self
  public func setIncludeTraceContext(_ includeTraceContext: Swift.Bool) -> Self
  public func setAttributes(_ attributes: [Swift.String : NbmapCoreNavigation.AttributeValue]) -> Self
  public func build() -> any NbmapCoreNavigation.Logger
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultTracerProvider : NbmapCoreNavigation.TracerProvider {
  public static let instance: NbmapCoreNavigation.DefaultTracerProvider
  public func get(instrumentationName: Swift.String, instrumentationVersion: Swift.String? = nil) -> any NbmapCoreNavigation.Tracer
  @objc deinit
}
extension NbmapCoreNavigation.VisualInstructionComponentType : Swift.Equatable {}
extension NbmapCoreNavigation.VisualInstructionComponentType : Swift.Hashable {}
extension NbmapCoreNavigation.VisualInstructionComponentType : Swift.RawRepresentable {}
extension NbmapCoreNavigation.TextFormatDecodingError : Swift.Equatable {}
extension NbmapCoreNavigation.TextFormatDecodingError : Swift.Hashable {}
extension NbmapCoreNavigation.RouteShapeResolution : Swift.Equatable {}
extension NbmapCoreNavigation.RouteShapeResolution : Swift.Hashable {}
extension NbmapCoreNavigation.RouteShapeResolution : Swift.RawRepresentable {}
extension NbmapCoreNavigation.RouteShapeFormat : Swift.Equatable {}
extension NbmapCoreNavigation.RouteShapeFormat : Swift.Hashable {}
extension NbmapCoreNavigation.RouteShapeFormat : Swift.RawRepresentable {}
extension NbmapCoreNavigation.SignStandard : Swift.Equatable {}
extension NbmapCoreNavigation.SignStandard : Swift.Hashable {}
extension NbmapCoreNavigation.AnyUnpackError : Swift.Equatable {}
extension NbmapCoreNavigation.AnyUnpackError : Swift.Hashable {}
extension NbmapCoreNavigation.SemanticAttributes : Swift.Equatable {}
extension NbmapCoreNavigation.SemanticAttributes : Swift.Hashable {}
extension NbmapCoreNavigation.SemanticAttributes : Swift.RawRepresentable {}
extension NbmapCoreNavigation.SemanticAttributes.NetTransportValues : Swift.Equatable {}
extension NbmapCoreNavigation.SemanticAttributes.NetTransportValues : Swift.Hashable {}
extension NbmapCoreNavigation.SemanticAttributes.NetTransportValues : Swift.RawRepresentable {}
extension NbmapCoreNavigation.SemanticAttributes.DbCassandraConsistencyLevelValues : Swift.Equatable {}
extension NbmapCoreNavigation.SemanticAttributes.DbCassandraConsistencyLevelValues : Swift.Hashable {}
extension NbmapCoreNavigation.SemanticAttributes.DbCassandraConsistencyLevelValues : Swift.RawRepresentable {}
extension NbmapCoreNavigation.SemanticAttributes.FaasTriggerValues : Swift.Equatable {}
extension NbmapCoreNavigation.SemanticAttributes.FaasTriggerValues : Swift.Hashable {}
extension NbmapCoreNavigation.SemanticAttributes.FaasTriggerValues : Swift.RawRepresentable {}
extension NbmapCoreNavigation.SemanticAttributes.MessagingDestinationKindValues : Swift.Equatable {}
extension NbmapCoreNavigation.SemanticAttributes.MessagingDestinationKindValues : Swift.Hashable {}
extension NbmapCoreNavigation.SemanticAttributes.MessagingDestinationKindValues : Swift.RawRepresentable {}
extension NbmapCoreNavigation.SemanticAttributes.MessagingOperationValues : Swift.Equatable {}
extension NbmapCoreNavigation.SemanticAttributes.MessagingOperationValues : Swift.Hashable {}
extension NbmapCoreNavigation.SemanticAttributes.MessagingOperationValues : Swift.RawRepresentable {}
extension NbmapCoreNavigation.SemanticAttributes.RpcGrpcStatusCodeValues : Swift.Equatable {}
extension NbmapCoreNavigation.SemanticAttributes.RpcGrpcStatusCodeValues : Swift.Hashable {}
extension NbmapCoreNavigation.SemanticAttributes.RpcGrpcStatusCodeValues : Swift.RawRepresentable {}
extension NbmapCoreNavigation.SemanticAttributes.MessageTypeValues : Swift.Equatable {}
extension NbmapCoreNavigation.SemanticAttributes.MessageTypeValues : Swift.Hashable {}
extension NbmapCoreNavigation.SemanticAttributes.MessageTypeValues : Swift.RawRepresentable {}
extension NbmapCoreNavigation.OffRouteStatus : Swift.Equatable {}
extension NbmapCoreNavigation.OffRouteStatus : Swift.Hashable {}
extension NbmapCoreNavigation.TransportType : Swift.Equatable {}
extension NbmapCoreNavigation.TransportType : Swift.Hashable {}
extension NbmapCoreNavigation.TransportType : Swift.RawRepresentable {}
extension NbmapCoreNavigation.ManeuverType : Swift.Equatable {}
extension NbmapCoreNavigation.ManeuverType : Swift.Hashable {}
extension NbmapCoreNavigation.ManeuverType : Swift.RawRepresentable {}
extension NbmapCoreNavigation.ManeuverDirection : Swift.Equatable {}
extension NbmapCoreNavigation.ManeuverDirection : Swift.Hashable {}
extension NbmapCoreNavigation.ManeuverDirection : Swift.RawRepresentable {}
extension NbmapCoreNavigation.DrivingSide : Swift.Equatable {}
extension NbmapCoreNavigation.DrivingSide : Swift.Hashable {}
extension NbmapCoreNavigation.DrivingSide : Swift.RawRepresentable {}
extension NbmapCoreNavigation.MeasurementSystem : Swift.Equatable {}
extension NbmapCoreNavigation.MeasurementSystem : Swift.Hashable {}
extension NbmapCoreNavigation.MeasurementSystem : Swift.RawRepresentable {}
extension NbmapCoreNavigation.InstructionFormat : Swift.Equatable {}
extension NbmapCoreNavigation.InstructionFormat : Swift.Hashable {}
extension NbmapCoreNavigation.InstructionFormat : Swift.RawRepresentable {}
extension NbmapCoreNavigation.ExportResult : Swift.Equatable {}
extension NbmapCoreNavigation.ExportResult : Swift.Hashable {}
extension NbmapCoreNavigation.SpanKind : Swift.Hashable {}
extension NbmapCoreNavigation.SpanKind : Swift.RawRepresentable {}
extension NbmapCoreNavigation.DispatchTimer.State : Swift.Equatable {}
extension NbmapCoreNavigation.DispatchTimer.State : Swift.Hashable {}
extension NbmapCoreNavigation.JSONEncodingError : Swift.Equatable {}
extension NbmapCoreNavigation.JSONEncodingError : Swift.Hashable {}
extension NbmapCoreNavigation.Severity : Swift.Hashable {}
extension NbmapCoreNavigation.Severity : Swift.RawRepresentable {}
extension NbmapCoreNavigation.BinaryEncodingError : Swift.Equatable {}
extension NbmapCoreNavigation.BinaryEncodingError : Swift.Hashable {}
extension NbmapCoreNavigation.CongestionLevel : Swift.Equatable {}
extension NbmapCoreNavigation.CongestionLevel : Swift.Hashable {}
extension NbmapCoreNavigation.CongestionLevel : Swift.RawRepresentable {}
extension NbmapCoreNavigation.RingBuffer.OverwriteOperation : Swift.Equatable {}
extension NbmapCoreNavigation.RingBuffer.OverwriteOperation : Swift.Hashable {}
extension NbmapCoreNavigation.ResourceAttributes : Swift.Equatable {}
extension NbmapCoreNavigation.ResourceAttributes : Swift.Hashable {}
extension NbmapCoreNavigation.ResourceAttributes : Swift.RawRepresentable {}
extension NbmapCoreNavigation.ResourceAttributes.AwsEcsLaunchtypeValues : Swift.Equatable {}
extension NbmapCoreNavigation.ResourceAttributes.AwsEcsLaunchtypeValues : Swift.Hashable {}
extension NbmapCoreNavigation.ResourceAttributes.AwsEcsLaunchtypeValues : Swift.RawRepresentable {}
extension NbmapCoreNavigation.BinaryDecodingError : Swift.Equatable {}
extension NbmapCoreNavigation.BinaryDecodingError : Swift.Hashable {}
extension NbmapCoreNavigation.FeedbackType : Swift.Equatable {}
extension NbmapCoreNavigation.FeedbackType : Swift.Hashable {}
extension NbmapCoreNavigation.FeedbackType : Swift.RawRepresentable {}
extension NbmapCoreNavigation.FeedbackSource : Swift.Equatable {}
extension NbmapCoreNavigation.FeedbackSource : Swift.Hashable {}
extension NbmapCoreNavigation.FeedbackSource : Swift.RawRepresentable {}
extension NbmapCoreNavigation.OpenTelemetryContextKeys : Swift.Equatable {}
extension NbmapCoreNavigation.OpenTelemetryContextKeys : Swift.Hashable {}
extension NbmapCoreNavigation.OpenTelemetryContextKeys : Swift.RawRepresentable {}
extension NbmapCoreNavigation.SimulationIntent : Swift.Equatable {}
extension NbmapCoreNavigation.SimulationIntent : Swift.Hashable {}
extension NbmapCoreNavigation.SimulationIntent : Swift.RawRepresentable {}
extension NbmapCoreNavigation.SimulationMode : Swift.Equatable {}
extension NbmapCoreNavigation.SimulationMode : Swift.Hashable {}
extension NbmapCoreNavigation.SimulationMode : Swift.RawRepresentable {}
extension NbmapCoreNavigation.SimulationState : Swift.Equatable {}
extension NbmapCoreNavigation.SimulationState : Swift.Hashable {}
extension NbmapCoreNavigation.SimulationState : Swift.RawRepresentable {}
extension NbmapCoreNavigation.SpanExporterResultCode : Swift.Equatable {}
extension NbmapCoreNavigation.SpanExporterResultCode : Swift.Hashable {}
extension NbmapCoreNavigation.BinaryDelimited.Error : Swift.Equatable {}
extension NbmapCoreNavigation.BinaryDelimited.Error : Swift.Hashable {}
